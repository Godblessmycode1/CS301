
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008120  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001814  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b1c  08009b1c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009b1c  08009b1c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b1c  08009b1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b1c  08009b1c  00019b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000010  08009b34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08009b34  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008576  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba8  00000000  00000000  000285f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000610  00000000  00000000  0002a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ed9  00000000  00000000  0002af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1b8  00000000  00000000  00043e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090254  00000000  00000000  0004f021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f70  00000000  00000000  000df278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000e11e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	080082f0 	.word	0x080082f0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	080082f0 	.word	0x080082f0

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b42      	ldr	r3, [pc, #264]	; (8000954 <MX_GPIO_Init+0x120>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a41      	ldr	r2, [pc, #260]	; (8000954 <MX_GPIO_Init+0x120>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <MX_GPIO_Init+0x120>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <MX_GPIO_Init+0x120>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3b      	ldr	r2, [pc, #236]	; (8000954 <MX_GPIO_Init+0x120>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <MX_GPIO_Init+0x120>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b36      	ldr	r3, [pc, #216]	; (8000954 <MX_GPIO_Init+0x120>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a35      	ldr	r2, [pc, #212]	; (8000954 <MX_GPIO_Init+0x120>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b33      	ldr	r3, [pc, #204]	; (8000954 <MX_GPIO_Init+0x120>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	4830      	ldr	r0, [pc, #192]	; (8000958 <MX_GPIO_Init+0x124>)
 8000898:	f006 fa46 	bl	8006d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2104      	movs	r1, #4
 80008a0:	482e      	ldr	r0, [pc, #184]	; (800095c <MX_GPIO_Init+0x128>)
 80008a2:	f006 fa41 	bl	8006d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MX_GPIO_Init+0x12c>)
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	4827      	ldr	r0, [pc, #156]	; (8000958 <MX_GPIO_Init+0x124>)
 80008ba:	f006 f8a1 	bl	8006a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_GPIO_Init+0x130>)
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4825      	ldr	r0, [pc, #148]	; (8000968 <MX_GPIO_Init+0x134>)
 80008d2:	f006 f895 	bl	8006a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_GPIO_Init+0x124>)
 80008f0:	f006 f886 	bl	8006a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_GPIO_Init+0x130>)
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_GPIO_Init+0x124>)
 800090a:	f006 f879 	bl	8006a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_GPIO_Init+0x128>)
 8000926:	f006 f86b 	bl	8006a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	2101      	movs	r1, #1
 800092e:	2017      	movs	r0, #23
 8000930:	f005 feed 	bl	800670e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000934:	2017      	movs	r0, #23
 8000936:	f005 ff06 	bl	8006746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800093a:	2202      	movs	r2, #2
 800093c:	2101      	movs	r1, #1
 800093e:	2028      	movs	r0, #40	; 0x28
 8000940:	f005 fee5 	bl	800670e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000944:	2028      	movs	r0, #40	; 0x28
 8000946:	f005 fefe 	bl	8006746 <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	40010800 	.word	0x40010800
 800095c:	40011400 	.word	0x40011400
 8000960:	10110000 	.word	0x10110000
 8000964:	10210000 	.word	0x10210000
 8000968:	40011000 	.word	0x40011000

0800096c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <LCD_WR_REG+0x40>)
 8000978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <LCD_WR_REG+0x40>)
 8000980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000984:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <LCD_WR_REG+0x44>)
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <LCD_WR_REG+0x40>)
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <LCD_WR_REG+0x40>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <LCD_WR_REG+0x40>)
 800099a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099e:	611a      	str	r2, [r3, #16]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40010c00 	.word	0x40010c00

080009b4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <LCD_WR_DATAX+0x40>)
 80009c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <LCD_WR_DATAX+0x40>)
 80009c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009cc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LCD_WR_DATAX+0x44>)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <LCD_WR_DATAX+0x40>)
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <LCD_WR_DATAX+0x40>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <LCD_WR_DATAX+0x40>)
 80009e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e6:	611a      	str	r2, [r3, #16]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40011000 	.word	0x40011000
 80009f8:	40010c00 	.word	0x40010c00

080009fc <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <LCD_RD_DATA+0x7c>)
 8000a04:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a08:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <LCD_RD_DATA+0x7c>)
 8000a0c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a10:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <LCD_RD_DATA+0x7c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <LCD_RD_DATA+0x80>)
 8000a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <LCD_RD_DATA+0x80>)
 8000a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a26:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <LCD_RD_DATA+0x80>)
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <LCD_RD_DATA+0x84>)
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	f648 1289 	movw	r2, #35209	; 0x8989
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d102      	bne.n	8000a40 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f005 fd6c 	bl	8006518 <HAL_Delay>
	t = DATAIN
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <LCD_RD_DATA+0x7c>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <LCD_RD_DATA+0x80>)
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <LCD_RD_DATA+0x80>)
 8000a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a52:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <LCD_RD_DATA+0x7c>)
 8000a56:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a5a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <LCD_RD_DATA+0x7c>)
 8000a5e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a62:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <LCD_RD_DATA+0x7c>)
 8000a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6a:	60da      	str	r2, [r3, #12]
	return t;
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010c00 	.word	0x40010c00
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	20000030 	.word	0x20000030

08000a84 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	4613      	mov	r3, r2
 8000a92:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff68 	bl	800096c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <LCD_WriteReg+0x4c>)
 8000a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <LCD_WriteReg+0x4c>)
 8000aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <LCD_WriteReg+0x50>)
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	60d3      	str	r3, [r2, #12]
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <LCD_WriteReg+0x4c>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <LCD_WriteReg+0x4c>)
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <LCD_WriteReg+0x4c>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac4:	611a      	str	r2, [r3, #16]
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	40010c00 	.word	0x40010c00

08000ad8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff41 	bl	800096c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000aea:	f7ff ff87 	bl	80009fc <LCD_RD_DATA>
 8000aee:	4603      	mov	r3, r0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <LCD_WriteRAM_Prepare+0x14>)
 8000afe:	891b      	ldrh	r3, [r3, #8]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff33 	bl	800096c <LCD_WR_REG>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000030 	.word	0x20000030

08000b10 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	460a      	mov	r2, r1
 8000b1a:	80fb      	strh	r3, [r7, #6]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b20:	4b73      	ldr	r3, [pc, #460]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000b22:	889b      	ldrh	r3, [r3, #4]
 8000b24:	f249 3241 	movw	r2, #37697	; 0x9341
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d005      	beq.n	8000b38 <LCD_SetCursor+0x28>
 8000b2c:	4b70      	ldr	r3, [pc, #448]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000b2e:	889b      	ldrh	r3, [r3, #4]
 8000b30:	f245 3210 	movw	r2, #21264	; 0x5310
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d164      	bne.n	8000c02 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b38:	4b6d      	ldr	r3, [pc, #436]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000b3a:	895b      	ldrh	r3, [r3, #10]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff15 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b42:	4b6c      	ldr	r3, [pc, #432]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	4b6a      	ldr	r3, [pc, #424]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b67      	ldr	r3, [pc, #412]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	4b65      	ldr	r3, [pc, #404]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	4b64      	ldr	r3, [pc, #400]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	4b62      	ldr	r3, [pc, #392]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b70:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	4b5e      	ldr	r3, [pc, #376]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4a5d      	ldr	r2, [pc, #372]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	60d3      	str	r3, [r2, #12]
 8000b88:	4b5a      	ldr	r3, [pc, #360]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	4b57      	ldr	r3, [pc, #348]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b9c:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000b9e:	899b      	ldrh	r3, [r3, #12]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fee3 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ba6:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	4b51      	ldr	r3, [pc, #324]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b4e      	ldr	r3, [pc, #312]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	60d3      	str	r3, [r2, #12]
 8000bec:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfe:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000c00:	e248      	b.n	8001094 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000c04:	889b      	ldrh	r3, [r3, #4]
 8000c06:	f646 0204 	movw	r2, #26628	; 0x6804
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d176      	bne.n	8000cfc <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c0e:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000c10:	799b      	ldrb	r3, [r3, #6]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d106      	bne.n	8000c24 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	3b01      	subs	r3, #1
 8000c22:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000c26:	895b      	ldrh	r3, [r3, #10]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe9f 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c34:	611a      	str	r2, [r3, #16]
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3c:	615a      	str	r2, [r3, #20]
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	60d3      	str	r3, [r2, #12]
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <LCD_SetCursor+0x1e0>)
 8000c8a:	899b      	ldrh	r3, [r3, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe6d 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c98:	611a      	str	r2, [r3, #16]
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	615a      	str	r2, [r3, #20]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <LCD_SetCursor+0x1e8>)
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	60d3      	str	r3, [r2, #12]
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <LCD_SetCursor+0x1e4>)
 8000ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cea:	611a      	str	r2, [r3, #16]
}
 8000cec:	e1d2      	b.n	8001094 <LCD_SetCursor+0x584>
 8000cee:	bf00      	nop
 8000cf0:	20000030 	.word	0x20000030
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000cfc:	4b99      	ldr	r3, [pc, #612]	; (8000f64 <LCD_SetCursor+0x454>)
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	f641 1263 	movw	r2, #6499	; 0x1963
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f040 8133 	bne.w	8000f70 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000d0a:	4b96      	ldr	r3, [pc, #600]	; (8000f64 <LCD_SetCursor+0x454>)
 8000d0c:	799b      	ldrb	r3, [r3, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d163      	bne.n	8000dda <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d12:	4b94      	ldr	r3, [pc, #592]	; (8000f64 <LCD_SetCursor+0x454>)
 8000d14:	881a      	ldrh	r2, [r3, #0]
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d20:	4b90      	ldr	r3, [pc, #576]	; (8000f64 <LCD_SetCursor+0x454>)
 8000d22:	895b      	ldrh	r3, [r3, #10]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe21 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d2a:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	4b8d      	ldr	r3, [pc, #564]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	4b8c      	ldr	r3, [pc, #560]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	4b88      	ldr	r3, [pc, #544]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	4b86      	ldr	r3, [pc, #536]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d52:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000d54:	4b84      	ldr	r3, [pc, #528]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	4b82      	ldr	r3, [pc, #520]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	4b81      	ldr	r3, [pc, #516]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	4b7f      	ldr	r3, [pc, #508]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	4b7d      	ldr	r3, [pc, #500]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	4b7c      	ldr	r3, [pc, #496]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000d7e:	4b7a      	ldr	r3, [pc, #488]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b75      	ldr	r3, [pc, #468]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	4b73      	ldr	r3, [pc, #460]	; (8000f68 <LCD_SetCursor+0x458>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	4b72      	ldr	r3, [pc, #456]	; (8000f68 <LCD_SetCursor+0x458>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	4b70      	ldr	r3, [pc, #448]	; (8000f68 <LCD_SetCursor+0x458>)
 8000da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000daa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000dac:	4b6e      	ldr	r3, [pc, #440]	; (8000f68 <LCD_SetCursor+0x458>)
 8000dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <LCD_SetCursor+0x458>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4a6b      	ldr	r2, [pc, #428]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	60d3      	str	r3, [r2, #12]
 8000dc4:	4b68      	ldr	r3, [pc, #416]	; (8000f68 <LCD_SetCursor+0x458>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	4b67      	ldr	r3, [pc, #412]	; (8000f68 <LCD_SetCursor+0x458>)
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <LCD_SetCursor+0x458>)
 8000dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	e061      	b.n	8000e9e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000dda:	4b62      	ldr	r3, [pc, #392]	; (8000f64 <LCD_SetCursor+0x454>)
 8000ddc:	895b      	ldrh	r3, [r3, #10]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fdc4 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000de4:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <LCD_SetCursor+0x458>)
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	4b5e      	ldr	r3, [pc, #376]	; (8000f68 <LCD_SetCursor+0x458>)
 8000dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	0a1b      	lsrs	r3, r3, #8
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b5c      	ldr	r3, [pc, #368]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	4b58      	ldr	r3, [pc, #352]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e10:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e12:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	4a51      	ldr	r2, [pc, #324]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	60d3      	str	r3, [r2, #12]
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <LCD_SetCursor+0x454>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	121a      	asrs	r2, r3, #8
 8000e56:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e74:	611a      	str	r2, [r3, #16]
 8000e76:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <LCD_SetCursor+0x454>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	4a39      	ldr	r2, [pc, #228]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	60d3      	str	r3, [r2, #12]
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	615a      	str	r2, [r3, #20]
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <LCD_SetCursor+0x458>)
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <LCD_SetCursor+0x454>)
 8000ea0:	899b      	ldrh	r3, [r3, #12]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fd62 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <LCD_SetCursor+0x458>)
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <LCD_SetCursor+0x458>)
 8000eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <LCD_SetCursor+0x458>)
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <LCD_SetCursor+0x458>)
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <LCD_SetCursor+0x458>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <LCD_SetCursor+0x458>)
 8000ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <LCD_SetCursor+0x458>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	60d3      	str	r3, [r2, #12]
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <LCD_SetCursor+0x458>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <LCD_SetCursor+0x458>)
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <LCD_SetCursor+0x458>)
 8000efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <LCD_SetCursor+0x454>)
 8000f14:	885b      	ldrh	r3, [r3, #2]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	121a      	asrs	r2, r3, #8
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <LCD_SetCursor+0x454>)
 8000f44:	885b      	ldrh	r3, [r3, #2]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <LCD_SetCursor+0x45c>)
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	60d3      	str	r3, [r2, #12]
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <LCD_SetCursor+0x458>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f60:	611a      	str	r2, [r3, #16]
}
 8000f62:	e097      	b.n	8001094 <LCD_SetCursor+0x584>
 8000f64:	20000030 	.word	0x20000030
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <LCD_SetCursor+0x58c>)
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d172      	bne.n	8001062 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <LCD_SetCursor+0x58c>)
 8000f7e:	895b      	ldrh	r3, [r3, #10]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fcf3 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000f86:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <LCD_SetCursor+0x590>)
 8000f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <LCD_SetCursor+0x590>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <LCD_SetCursor+0x594>)
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <LCD_SetCursor+0x58c>)
 8000fb6:	895b      	ldrh	r3, [r3, #10]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fcd5 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4a33      	ldr	r2, [pc, #204]	; (80010a4 <LCD_SetCursor+0x594>)
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	60d3      	str	r3, [r2, #12]
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <LCD_SetCursor+0x590>)
 8000fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <LCD_SetCursor+0x58c>)
 8000ff0:	899b      	ldrh	r3, [r3, #12]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fcba 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <LCD_SetCursor+0x590>)
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <LCD_SetCursor+0x590>)
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <LCD_SetCursor+0x594>)
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <LCD_SetCursor+0x590>)
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <LCD_SetCursor+0x590>)
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <LCD_SetCursor+0x590>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <LCD_SetCursor+0x58c>)
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	b29b      	uxth	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fc9c 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <LCD_SetCursor+0x590>)
 8001036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <LCD_SetCursor+0x590>)
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <LCD_SetCursor+0x594>)
 8001048:	b2db      	uxtb	r3, r3
 800104a:	60d3      	str	r3, [r2, #12]
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <LCD_SetCursor+0x590>)
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <LCD_SetCursor+0x590>)
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <LCD_SetCursor+0x590>)
 800105a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105e:	611a      	str	r2, [r3, #16]
}
 8001060:	e018      	b.n	8001094 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <LCD_SetCursor+0x58c>)
 8001064:	799b      	ldrb	r3, [r3, #6]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d106      	bne.n	8001078 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <LCD_SetCursor+0x58c>)
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	3b01      	subs	r3, #1
 8001076:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <LCD_SetCursor+0x58c>)
 800107a:	895b      	ldrh	r3, [r3, #10]
 800107c:	88fa      	ldrh	r2, [r7, #6]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fcff 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <LCD_SetCursor+0x58c>)
 8001088:	899b      	ldrh	r3, [r3, #12]
 800108a:	88ba      	ldrh	r2, [r7, #4]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fcf8 	bl	8000a84 <LCD_WriteReg>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000030 	.word	0x20000030
 80010a0:	40011000 	.word	0x40011000
 80010a4:	40010c00 	.word	0x40010c00

080010a8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80010ba:	4b78      	ldr	r3, [pc, #480]	; (800129c <LCD_Scan_Dir+0x1f4>)
 80010bc:	799b      	ldrb	r3, [r3, #6]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10b      	bne.n	80010da <LCD_Scan_Dir+0x32>
 80010c2:	4b76      	ldr	r3, [pc, #472]	; (800129c <LCD_Scan_Dir+0x1f4>)
 80010c4:	889b      	ldrh	r3, [r3, #4]
 80010c6:	f646 0204 	movw	r2, #26628	; 0x6804
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d005      	beq.n	80010da <LCD_Scan_Dir+0x32>
 80010ce:	4b73      	ldr	r3, [pc, #460]	; (800129c <LCD_Scan_Dir+0x1f4>)
 80010d0:	889b      	ldrh	r3, [r3, #4]
 80010d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d109      	bne.n	80010ee <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80010da:	4b70      	ldr	r3, [pc, #448]	; (800129c <LCD_Scan_Dir+0x1f4>)
 80010dc:	799b      	ldrb	r3, [r3, #6]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d134      	bne.n	800114c <LCD_Scan_Dir+0xa4>
 80010e2:	4b6e      	ldr	r3, [pc, #440]	; (800129c <LCD_Scan_Dir+0x1f4>)
 80010e4:	889b      	ldrh	r3, [r3, #4]
 80010e6:	f641 1263 	movw	r2, #6499	; 0x1963
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12e      	bne.n	800114c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b07      	cmp	r3, #7
 80010f2:	d82b      	bhi.n	800114c <LCD_Scan_Dir+0xa4>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <LCD_Scan_Dir+0x54>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800111d 	.word	0x0800111d
 8001100:	08001123 	.word	0x08001123
 8001104:	08001129 	.word	0x08001129
 8001108:	0800112f 	.word	0x0800112f
 800110c:	08001135 	.word	0x08001135
 8001110:	0800113b 	.word	0x0800113b
 8001114:	08001141 	.word	0x08001141
 8001118:	08001147 	.word	0x08001147
		{
		case 0:
			dir = 6;
 800111c:	2306      	movs	r3, #6
 800111e:	71fb      	strb	r3, [r7, #7]
			break;
 8001120:	e014      	b.n	800114c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001122:	2307      	movs	r3, #7
 8001124:	71fb      	strb	r3, [r7, #7]
			break;
 8001126:	e011      	b.n	800114c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	71fb      	strb	r3, [r7, #7]
			break;
 800112c:	e00e      	b.n	800114c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800112e:	2305      	movs	r3, #5
 8001130:	71fb      	strb	r3, [r7, #7]
			break;
 8001132:	e00b      	b.n	800114c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	71fb      	strb	r3, [r7, #7]
			break;
 8001138:	e008      	b.n	800114c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
			break;
 800113e:	e005      	b.n	800114c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001140:	2303      	movs	r3, #3
 8001142:	71fb      	strb	r3, [r7, #7]
			break;
 8001144:	e002      	b.n	800114c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	71fb      	strb	r3, [r7, #7]
			break;
 800114a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <LCD_Scan_Dir+0x1f4>)
 800114e:	889b      	ldrh	r3, [r3, #4]
 8001150:	f249 3241 	movw	r2, #37697	; 0x9341
 8001154:	4293      	cmp	r3, r2
 8001156:	d018      	beq.n	800118a <LCD_Scan_Dir+0xe2>
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <LCD_Scan_Dir+0x1f4>)
 800115a:	889b      	ldrh	r3, [r3, #4]
 800115c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001160:	4293      	cmp	r3, r2
 8001162:	d012      	beq.n	800118a <LCD_Scan_Dir+0xe2>
 8001164:	4b4d      	ldr	r3, [pc, #308]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001166:	889b      	ldrh	r3, [r3, #4]
 8001168:	f245 3210 	movw	r2, #21264	; 0x5310
 800116c:	4293      	cmp	r3, r2
 800116e:	d00c      	beq.n	800118a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	f245 5210 	movw	r2, #21776	; 0x5510
 8001178:	4293      	cmp	r3, r2
 800117a:	d006      	beq.n	800118a <LCD_Scan_Dir+0xe2>
 800117c:	4b47      	ldr	r3, [pc, #284]	; (800129c <LCD_Scan_Dir+0x1f4>)
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	f641 1263 	movw	r2, #6499	; 0x1963
 8001184:	4293      	cmp	r3, r2
 8001186:	f040 8250 	bne.w	800162a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b07      	cmp	r3, #7
 800118e:	d836      	bhi.n	80011fe <LCD_Scan_Dir+0x156>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <LCD_Scan_Dir+0xf0>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011ff 	.word	0x080011ff
 800119c:	080011b9 	.word	0x080011b9
 80011a0:	080011c3 	.word	0x080011c3
 80011a4:	080011cd 	.word	0x080011cd
 80011a8:	080011d7 	.word	0x080011d7
 80011ac:	080011e1 	.word	0x080011e1
 80011b0:	080011eb 	.word	0x080011eb
 80011b4:	080011f5 	.word	0x080011f5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011be:	81fb      	strh	r3, [r7, #14]
			break;
 80011c0:	e01d      	b.n	80011fe <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c8:	81fb      	strh	r3, [r7, #14]
			break;
 80011ca:	e018      	b.n	80011fe <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011d2:	81fb      	strh	r3, [r7, #14]
			break;
 80011d4:	e013      	b.n	80011fe <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	81fb      	strh	r3, [r7, #14]
			break;
 80011de:	e00e      	b.n	80011fe <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011e6:	81fb      	strh	r3, [r7, #14]
			break;
 80011e8:	e009      	b.n	80011fe <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80011f0:	81fb      	strh	r3, [r7, #14]
			break;
 80011f2:	e004      	b.n	80011fe <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80011fa:	81fb      	strh	r3, [r7, #14]
			break;
 80011fc:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001200:	889b      	ldrh	r3, [r3, #4]
 8001202:	f245 5210 	movw	r2, #21776	; 0x5510
 8001206:	4293      	cmp	r3, r2
 8001208:	d103      	bne.n	8001212 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800120a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800120e:	81bb      	strh	r3, [r7, #12]
 8001210:	e001      	b.n	8001216 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001212:	2336      	movs	r3, #54	; 0x36
 8001214:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	f245 3210 	movw	r2, #21264	; 0x5310
 800121e:	4293      	cmp	r3, r2
 8001220:	d00f      	beq.n	8001242 <LCD_Scan_Dir+0x19a>
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	f245 5210 	movw	r2, #21776	; 0x5510
 800122a:	4293      	cmp	r3, r2
 800122c:	d009      	beq.n	8001242 <LCD_Scan_Dir+0x19a>
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001230:	889b      	ldrh	r3, [r3, #4]
 8001232:	f641 1263 	movw	r2, #6499	; 0x1963
 8001236:	4293      	cmp	r3, r2
 8001238:	d003      	beq.n	8001242 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	f646 0204 	movw	r2, #26628	; 0x6804
 800124a:	4293      	cmp	r3, r2
 800124c:	d103      	bne.n	8001256 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001256:	89fa      	ldrh	r2, [r7, #14]
 8001258:	89bb      	ldrh	r3, [r7, #12]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fc11 	bl	8000a84 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	f641 1263 	movw	r2, #6499	; 0x1963
 800126a:	4293      	cmp	r3, r2
 800126c:	d028      	beq.n	80012c0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <LCD_Scan_Dir+0x1f4>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <LCD_Scan_Dir+0x1f4>)
 800127e:	885b      	ldrh	r3, [r3, #2]
 8001280:	429a      	cmp	r2, r3
 8001282:	d21d      	bcs.n	80012c0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <LCD_Scan_Dir+0x1f4>)
 800128c:	885a      	ldrh	r2, [r3, #2]
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001290:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001292:	4a02      	ldr	r2, [pc, #8]	; (800129c <LCD_Scan_Dir+0x1f4>)
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	8053      	strh	r3, [r2, #2]
 8001298:	e012      	b.n	80012c0 <LCD_Scan_Dir+0x218>
 800129a:	bf00      	nop
 800129c:	20000030 	.word	0x20000030
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80012a0:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012a2:	881a      	ldrh	r2, [r3, #0]
 80012a4:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012a6:	885b      	ldrh	r3, [r3, #2]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d909      	bls.n	80012c0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012ac:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012b2:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012b4:	885a      	ldrh	r2, [r3, #2]
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012b8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012ba:	4a79      	ldr	r2, [pc, #484]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012bc:	897b      	ldrh	r3, [r7, #10]
 80012be:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80012c0:	4b77      	ldr	r3, [pc, #476]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	f245 5210 	movw	r2, #21776	; 0x5510
 80012c8:	4293      	cmp	r3, r2
 80012ca:	f040 80ef 	bne.w	80014ac <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80012ce:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80012d0:	895b      	ldrh	r3, [r3, #10]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fb4a 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012d8:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <LCD_Scan_Dir+0x400>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001302:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 8001304:	895b      	ldrh	r3, [r3, #10]
 8001306:	3301      	adds	r3, #1
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fb2e 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001310:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <LCD_Scan_Dir+0x400>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800133a:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 800133c:	895b      	ldrh	r3, [r3, #10]
 800133e:	3302      	adds	r3, #2
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fb12 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800134a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	121a      	asrs	r2, r3, #8
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <LCD_Scan_Dir+0x400>)
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001376:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001378:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 800137a:	895b      	ldrh	r3, [r3, #10]
 800137c:	3303      	adds	r3, #3
 800137e:	b29b      	uxth	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff faf3 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001386:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	3b01      	subs	r3, #1
 800139c:	4a42      	ldr	r2, [pc, #264]	; (80014a8 <LCD_Scan_Dir+0x400>)
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	60d3      	str	r3, [r2, #12]
 80013a2:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80013b8:	899b      	ldrh	r3, [r3, #12]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fad6 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <LCD_Scan_Dir+0x400>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 80013ec:	899b      	ldrh	r3, [r3, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff faba 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 80013fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <LCD_Scan_Dir+0x400>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 8001424:	899b      	ldrh	r3, [r3, #12]
 8001426:	3302      	adds	r3, #2
 8001428:	b29b      	uxth	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fa9e 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800143a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 8001442:	885b      	ldrh	r3, [r3, #2]
 8001444:	3b01      	subs	r3, #1
 8001446:	121a      	asrs	r2, r3, #8
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <LCD_Scan_Dir+0x400>)
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	615a      	str	r2, [r3, #20]
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 8001462:	899b      	ldrh	r3, [r3, #12]
 8001464:	3303      	adds	r3, #3
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fa7f 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147c:	615a      	str	r2, [r3, #20]
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <LCD_Scan_Dir+0x3f8>)
 8001480:	885b      	ldrh	r3, [r3, #2]
 8001482:	3b01      	subs	r3, #1
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <LCD_Scan_Dir+0x400>)
 8001486:	b2db      	uxtb	r3, r3
 8001488:	60d3      	str	r3, [r2, #12]
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <LCD_Scan_Dir+0x3fc>)
 8001498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800149e:	e10b      	b.n	80016b8 <LCD_Scan_Dir+0x610>
 80014a0:	20000030 	.word	0x20000030
 80014a4:	40011000 	.word	0x40011000
 80014a8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80014ac:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <LCD_Scan_Dir+0x618>)
 80014ae:	895b      	ldrh	r3, [r3, #10]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fa5b 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014b6:	4b83      	ldr	r3, [pc, #524]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	4b80      	ldr	r3, [pc, #512]	; (80016c8 <LCD_Scan_Dir+0x620>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	4b7c      	ldr	r3, [pc, #496]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014de:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	4b75      	ldr	r3, [pc, #468]	; (80016c8 <LCD_Scan_Dir+0x620>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	4b73      	ldr	r3, [pc, #460]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	615a      	str	r2, [r3, #20]
 80014fc:	4b71      	ldr	r3, [pc, #452]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800150a:	4b6e      	ldr	r3, [pc, #440]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 800150c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <LCD_Scan_Dir+0x618>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	121a      	asrs	r2, r3, #8
 8001522:	4b69      	ldr	r3, [pc, #420]	; (80016c8 <LCD_Scan_Dir+0x620>)
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	4b64      	ldr	r3, [pc, #400]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800153a:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	4b60      	ldr	r3, [pc, #384]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <LCD_Scan_Dir+0x618>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	4a5d      	ldr	r2, [pc, #372]	; (80016c8 <LCD_Scan_Dir+0x620>)
 8001552:	b2db      	uxtb	r3, r3
 8001554:	60d3      	str	r3, [r2, #12]
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001568:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800156a:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <LCD_Scan_Dir+0x618>)
 800156c:	899b      	ldrh	r3, [r3, #12]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f9fc 	bl	800096c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <LCD_Scan_Dir+0x620>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <LCD_Scan_Dir+0x620>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015c8:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <LCD_Scan_Dir+0x618>)
 80015da:	885b      	ldrh	r3, [r3, #2]
 80015dc:	3b01      	subs	r3, #1
 80015de:	121a      	asrs	r2, r3, #8
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <LCD_Scan_Dir+0x620>)
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 80015fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <LCD_Scan_Dir+0x618>)
 800160a:	885b      	ldrh	r3, [r3, #2]
 800160c:	3b01      	subs	r3, #1
 800160e:	4a2e      	ldr	r2, [pc, #184]	; (80016c8 <LCD_Scan_Dir+0x620>)
 8001610:	b2db      	uxtb	r3, r3
 8001612:	60d3      	str	r3, [r2, #12]
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <LCD_Scan_Dir+0x61c>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001628:	e046      	b.n	80016b8 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b07      	cmp	r3, #7
 800162e:	d836      	bhi.n	800169e <LCD_Scan_Dir+0x5f6>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <LCD_Scan_Dir+0x590>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001659 	.word	0x08001659
 800163c:	08001663 	.word	0x08001663
 8001640:	0800166d 	.word	0x0800166d
 8001644:	0800169f 	.word	0x0800169f
 8001648:	08001677 	.word	0x08001677
 800164c:	08001681 	.word	0x08001681
 8001650:	0800168b 	.word	0x0800168b
 8001654:	08001695 	.word	0x08001695
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800165e:	81fb      	strh	r3, [r7, #14]
			break;
 8001660:	e01d      	b.n	800169e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	81fb      	strh	r3, [r7, #14]
			break;
 800166a:	e018      	b.n	800169e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	81fb      	strh	r3, [r7, #14]
			break;
 8001674:	e013      	b.n	800169e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800167c:	81fb      	strh	r3, [r7, #14]
			break;
 800167e:	e00e      	b.n	800169e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001686:	81fb      	strh	r3, [r7, #14]
			break;
 8001688:	e009      	b.n	800169e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	f043 0318 	orr.w	r3, r3, #24
 8001690:	81fb      	strh	r3, [r7, #14]
			break;
 8001692:	e004      	b.n	800169e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	81fb      	strh	r3, [r7, #14]
			break;
 800169c:	bf00      	nop
		}
		dirreg = 0X03;
 800169e:	2303      	movs	r3, #3
 80016a0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80016aa:	89fa      	ldrh	r2, [r7, #14]
 80016ac:	89bb      	ldrh	r3, [r7, #12]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f9e7 	bl	8000a84 <LCD_WriteReg>
	}
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000030 	.word	0x20000030
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40010c00 	.word	0x40010c00

080016cc <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
 80016d6:	460b      	mov	r3, r1
 80016d8:	80bb      	strh	r3, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80016de:	4b75      	ldr	r3, [pc, #468]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 80016e0:	889b      	ldrh	r3, [r3, #4]
 80016e2:	f249 3241 	movw	r2, #37697	; 0x9341
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d005      	beq.n	80016f6 <LCD_Fast_DrawPoint+0x2a>
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 80016ec:	889b      	ldrh	r3, [r3, #4]
 80016ee:	f245 3210 	movw	r2, #21264	; 0x5310
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d164      	bne.n	80017c0 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80016f6:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 80016f8:	895b      	ldrh	r3, [r3, #10]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f936 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800170a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	4b69      	ldr	r3, [pc, #420]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800172e:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 8001742:	b2db      	uxtb	r3, r3
 8001744:	60d3      	str	r3, [r2, #12]
 8001746:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001758:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800175a:	4b56      	ldr	r3, [pc, #344]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 800175c:	899b      	ldrh	r3, [r3, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f904 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001764:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800176e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b50      	ldr	r3, [pc, #320]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800179c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	4a45      	ldr	r2, [pc, #276]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	60d3      	str	r3, [r2, #12]
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	e1e6      	b.n	8001b8e <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	f245 5210 	movw	r2, #21776	; 0x5510
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d179      	bne.n	80018c0 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 80017ce:	895b      	ldrh	r3, [r3, #10]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f8cb 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80017fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001802:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 8001806:	895b      	ldrh	r3, [r3, #10]
 8001808:	3301      	adds	r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f8ad 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001818:	611a      	str	r2, [r3, #16]
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800181c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001820:	615a      	str	r2, [r3, #20]
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 8001826:	b2db      	uxtb	r3, r3
 8001828:	60d3      	str	r3, [r2, #12]
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 8001840:	899b      	ldrh	r3, [r3, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f892 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <LCD_Fast_DrawPoint+0x1e8>)
 8001878:	899b      	ldrh	r3, [r3, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f874 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 8001886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <LCD_Fast_DrawPoint+0x1f0>)
 8001898:	b2db      	uxtb	r3, r3
 800189a:	60d3      	str	r3, [r2, #12]
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <LCD_Fast_DrawPoint+0x1ec>)
 80018aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	e16d      	b.n	8001b8e <LCD_Fast_DrawPoint+0x4c2>
 80018b2:	bf00      	nop
 80018b4:	20000030 	.word	0x20000030
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <LCD_Fast_DrawPoint+0x398>)
 80018c2:	889b      	ldrh	r3, [r3, #4]
 80018c4:	f641 1263 	movw	r2, #6499	; 0x1963
 80018c8:	4293      	cmp	r3, r2
 80018ca:	f040 80d1 	bne.w	8001a70 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <LCD_Fast_DrawPoint+0x398>)
 80018d0:	799b      	ldrb	r3, [r3, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <LCD_Fast_DrawPoint+0x398>)
 80018d8:	881a      	ldrh	r2, [r3, #0]
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80018e4:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <LCD_Fast_DrawPoint+0x398>)
 80018e6:	895b      	ldrh	r3, [r3, #10]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f83f 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80018ee:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80018f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80018f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800191c:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 800191e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 8001930:	b2db      	uxtb	r3, r3
 8001932:	60d3      	str	r3, [r2, #12]
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	615a      	str	r2, [r3, #20]
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001946:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001948:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 800194a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001974:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001976:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	615a      	str	r2, [r3, #20]
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4a38      	ldr	r2, [pc, #224]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 800198a:	b2db      	uxtb	r3, r3
 800198c:	60d3      	str	r3, [r2, #12]
 800198e:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	615a      	str	r2, [r3, #20]
 8001994:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 800199c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <LCD_Fast_DrawPoint+0x398>)
 80019a4:	899b      	ldrh	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe ffe0 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	60d3      	str	r3, [r2, #12]
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a14:	615a      	str	r2, [r3, #20]
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	88bb      	ldrh	r3, [r7, #4]
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <LCD_Fast_DrawPoint+0x3a0>)
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	60d3      	str	r3, [r2, #12]
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <LCD_Fast_DrawPoint+0x39c>)
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	e095      	b.n	8001b8e <LCD_Fast_DrawPoint+0x4c2>
 8001a62:	bf00      	nop
 8001a64:	20000030 	.word	0x20000030
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001a70:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d16f      	bne.n	8001b5c <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001a7e:	799b      	ldrb	r3, [r3, #6]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001a86:	881a      	ldrh	r2, [r3, #0]
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001a94:	895b      	ldrh	r3, [r3, #10]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe ff68 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a9c:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <LCD_Fast_DrawPoint+0x528>)
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4a45      	ldr	r2, [pc, #276]	; (8001bf4 <LCD_Fast_DrawPoint+0x528>)
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	60d3      	str	r3, [r2, #12]
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001af8:	899b      	ldrh	r3, [r3, #12]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe ff36 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b00:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b06:	611a      	str	r2, [r3, #16]
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <LCD_Fast_DrawPoint+0x528>)
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	615a      	str	r2, [r3, #20]
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <LCD_Fast_DrawPoint+0x528>)
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	60d3      	str	r3, [r2, #12]
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	e018      	b.n	8001b8e <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001b5e:	799b      	ldrb	r3, [r3, #6]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001b74:	895b      	ldrh	r3, [r3, #10]
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe ff82 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001b82:	899b      	ldrh	r3, [r3, #12]
 8001b84:	88ba      	ldrh	r2, [r7, #4]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe ff7b 	bl	8000a84 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b94:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9c:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <LCD_Fast_DrawPoint+0x520>)
 8001ba0:	891a      	ldrh	r2, [r3, #8]
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <LCD_Fast_DrawPoint+0x528>)
 8001ba4:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <LCD_Fast_DrawPoint+0x528>)
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	60d3      	str	r3, [r2, #12]
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <LCD_Fast_DrawPoint+0x524>)
 8001bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be2:	611a      	str	r2, [r3, #16]
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000030 	.word	0x20000030
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40010c00 	.word	0x40010c00

08001bf8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001c02:	20be      	movs	r0, #190	; 0xbe
 8001c04:	f7fe feb2 	bl	800096c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001c08:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	4b49      	ldr	r3, [pc, #292]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c16:	615a      	str	r2, [r3, #20]
 8001c18:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <LCD_SSD_BackLightSet+0x144>)
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fd6b 	bl	8000720 <__aeabi_i2d>
 8001c4a:	a339      	add	r3, pc, #228	; (adr r3, 8001d30 <LCD_SSD_BackLightSet+0x138>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe faea 	bl	8000228 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4c38      	ldr	r4, [pc, #224]	; (8001d3c <LCD_SSD_BackLightSet+0x144>)
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe fdc9 	bl	80007f4 <__aeabi_d2uiz>
 8001c62:	4603      	mov	r3, r0
 8001c64:	60e3      	str	r3, [r4, #12]
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <LCD_SSD_BackLightSet+0x144>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	615a      	str	r2, [r3, #20]
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001caa:	611a      	str	r2, [r3, #16]
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <LCD_SSD_BackLightSet+0x144>)
 8001cb6:	22ff      	movs	r2, #255	; 0xff
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ccc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <LCD_SSD_BackLightSet+0x144>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf6:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LCD_SSD_BackLightSet+0x144>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <LCD_SSD_BackLightSet+0x140>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	611a      	str	r2, [r3, #16]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	66666666 	.word	0x66666666
 8001d34:	40046666 	.word	0x40046666
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	40010c00 	.word	0x40010c00

08001d40 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d177      	bne.n	8001e40 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001d50:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001d56:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d58:	22f0      	movs	r2, #240	; 0xf0
 8001d5a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001d5c:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d62:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d64:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00b      	beq.n	8001d88 <LCD_Display_Dir+0x48>
 8001d70:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d005      	beq.n	8001d88 <LCD_Display_Dir+0x48>
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d7e:	889b      	ldrh	r3, [r3, #4]
 8001d80:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d11e      	bne.n	8001dc6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001d88:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d8a:	222c      	movs	r2, #44	; 0x2c
 8001d8c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d90:	222a      	movs	r2, #42	; 0x2a
 8001d92:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001d94:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d96:	222b      	movs	r2, #43	; 0x2b
 8001d98:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001d9c:	889b      	ldrh	r3, [r3, #4]
 8001d9e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d006      	beq.n	8001db4 <LCD_Display_Dir+0x74>
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001da8:	889b      	ldrh	r3, [r3, #4]
 8001daa:	f245 3210 	movw	r2, #21264	; 0x5310
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f040 80c7 	bne.w	8001f42 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001db4:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001db6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dba:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001dbc:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001dbe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dc2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001dc4:	e0bd      	b.n	8001f42 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001dc8:	889b      	ldrh	r3, [r3, #4]
 8001dca:	f245 5210 	movw	r2, #21776	; 0x5510
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d114      	bne.n	8001dfc <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001dd2:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001dd4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001dd8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001dda:	4b5e      	ldr	r3, [pc, #376]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ddc:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001de0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001de2:	4b5c      	ldr	r3, [pc, #368]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001de4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001de8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001dec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001df0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001df2:	4b58      	ldr	r3, [pc, #352]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001df4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001df8:	805a      	strh	r2, [r3, #2]
 8001dfa:	e0a3      	b.n	8001f44 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001dfc:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d111      	bne.n	8001e2c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e08:	4b52      	ldr	r3, [pc, #328]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e0a:	222c      	movs	r2, #44	; 0x2c
 8001e0c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e10:	222b      	movs	r2, #43	; 0x2b
 8001e12:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001e14:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e16:	222a      	movs	r2, #42	; 0x2a
 8001e18:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001e1a:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e20:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001e22:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e24:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e28:	805a      	strh	r2, [r3, #2]
 8001e2a:	e08b      	b.n	8001f44 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001e2c:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e2e:	2222      	movs	r2, #34	; 0x22
 8001e30:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001e32:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e34:	2220      	movs	r2, #32
 8001e36:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001e38:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e3a:	2221      	movs	r2, #33	; 0x21
 8001e3c:	819a      	strh	r2, [r3, #12]
 8001e3e:	e081      	b.n	8001f44 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e4c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e50:	22f0      	movs	r2, #240	; 0xf0
 8001e52:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001e54:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d005      	beq.n	8001e6c <LCD_Display_Dir+0x12c>
 8001e60:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d109      	bne.n	8001e80 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e6e:	222c      	movs	r2, #44	; 0x2c
 8001e70:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e74:	222a      	movs	r2, #42	; 0x2a
 8001e76:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e7a:	222b      	movs	r2, #43	; 0x2b
 8001e7c:	819a      	strh	r2, [r3, #12]
 8001e7e:	e04b      	b.n	8001f18 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001e80:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e82:	889b      	ldrh	r3, [r3, #4]
 8001e84:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d109      	bne.n	8001ea0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e8e:	222c      	movs	r2, #44	; 0x2c
 8001e90:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e94:	222b      	movs	r2, #43	; 0x2b
 8001e96:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001e9a:	222a      	movs	r2, #42	; 0x2a
 8001e9c:	819a      	strh	r2, [r3, #12]
 8001e9e:	e03b      	b.n	8001f18 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d114      	bne.n	8001ed6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001eae:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001eb2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001eb6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001eba:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ebe:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001ec2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ec6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001eca:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ece:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ed2:	805a      	strh	r2, [r3, #2]
 8001ed4:	e020      	b.n	8001f18 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	f641 1263 	movw	r2, #6499	; 0x1963
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d111      	bne.n	8001f06 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ee4:	222c      	movs	r2, #44	; 0x2c
 8001ee6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001eea:	222a      	movs	r2, #42	; 0x2a
 8001eec:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ef0:	222b      	movs	r2, #43	; 0x2b
 8001ef2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001ef6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001efa:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001efe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f02:	805a      	strh	r2, [r3, #2]
 8001f04:	e008      	b.n	8001f18 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001f08:	2222      	movs	r2, #34	; 0x22
 8001f0a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001f0e:	2221      	movs	r2, #33	; 0x21
 8001f10:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001f14:	2220      	movs	r2, #32
 8001f16:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d005      	beq.n	8001f30 <LCD_Display_Dir+0x1f0>
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001f26:	889b      	ldrh	r3, [r3, #4]
 8001f28:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d109      	bne.n	8001f44 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001f32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f36:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <LCD_Display_Dir+0x214>)
 8001f3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f3e:	805a      	strh	r2, [r3, #2]
 8001f40:	e000      	b.n	8001f44 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f42:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff f8af 	bl	80010a8 <LCD_Scan_Dir>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000030 	.word	0x20000030

08001f58 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001f5e:	4b90      	ldr	r3, [pc, #576]	; (80021a0 <LCD_Init+0x248>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	4a8f      	ldr	r2, [pc, #572]	; (80021a0 <LCD_Init+0x248>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6193      	str	r3, [r2, #24]
 8001f6a:	4b8d      	ldr	r3, [pc, #564]	; (80021a0 <LCD_Init+0x248>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001f76:	4b8a      	ldr	r3, [pc, #552]	; (80021a0 <LCD_Init+0x248>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4a89      	ldr	r2, [pc, #548]	; (80021a0 <LCD_Init+0x248>)
 8001f7c:	f043 0310 	orr.w	r3, r3, #16
 8001f80:	6193      	str	r3, [r2, #24]
 8001f82:	4b87      	ldr	r3, [pc, #540]	; (80021a0 <LCD_Init+0x248>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001f8e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f92:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001f94:	2301      	movs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001f98:	2301      	movs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	487f      	ldr	r0, [pc, #508]	; (80021a4 <LCD_Init+0x24c>)
 8001fa8:	f004 fd2a 	bl	8006a00 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	487b      	ldr	r0, [pc, #492]	; (80021a8 <LCD_Init+0x250>)
 8001fba:	f004 fd21 	bl	8006a00 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001fbe:	2032      	movs	r0, #50	; 0x32
 8001fc0:	f004 faaa 	bl	8006518 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7fe fd5c 	bl	8000a84 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001fcc:	2032      	movs	r0, #50	; 0x32
 8001fce:	f004 faa3 	bl	8006518 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7fe fd80 	bl	8000ad8 <LCD_ReadReg>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b73      	ldr	r3, [pc, #460]	; (80021ac <LCD_Init+0x254>)
 8001fde:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001fe0:	4b72      	ldr	r3, [pc, #456]	; (80021ac <LCD_Init+0x254>)
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	2bfe      	cmp	r3, #254	; 0xfe
 8001fe6:	d90b      	bls.n	8002000 <LCD_Init+0xa8>
 8001fe8:	4b70      	ldr	r3, [pc, #448]	; (80021ac <LCD_Init+0x254>)
 8001fea:	889b      	ldrh	r3, [r3, #4]
 8001fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d005      	beq.n	8002000 <LCD_Init+0xa8>
 8001ff4:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <LCD_Init+0x254>)
 8001ff6:	889b      	ldrh	r3, [r3, #4]
 8001ff8:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001ffc:	f040 80c8 	bne.w	8002190 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002000:	20d3      	movs	r0, #211	; 0xd3
 8002002:	f7fe fcb3 	bl	800096c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002006:	f7fe fcf9 	bl	80009fc <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800200a:	f7fe fcf7 	bl	80009fc <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800200e:	f7fe fcf5 	bl	80009fc <LCD_RD_DATA>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	4b65      	ldr	r3, [pc, #404]	; (80021ac <LCD_Init+0x254>)
 8002018:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800201a:	4b64      	ldr	r3, [pc, #400]	; (80021ac <LCD_Init+0x254>)
 800201c:	889b      	ldrh	r3, [r3, #4]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b29a      	uxth	r2, r3
 8002022:	4b62      	ldr	r3, [pc, #392]	; (80021ac <LCD_Init+0x254>)
 8002024:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002026:	f7fe fce9 	bl	80009fc <LCD_RD_DATA>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <LCD_Init+0x254>)
 8002030:	889b      	ldrh	r3, [r3, #4]
 8002032:	4313      	orrs	r3, r2
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <LCD_Init+0x254>)
 8002038:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800203a:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <LCD_Init+0x254>)
 800203c:	889b      	ldrh	r3, [r3, #4]
 800203e:	f249 3241 	movw	r2, #37697	; 0x9341
 8002042:	4293      	cmp	r3, r2
 8002044:	f000 80a4 	beq.w	8002190 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002048:	20bf      	movs	r0, #191	; 0xbf
 800204a:	f7fe fc8f 	bl	800096c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800204e:	f7fe fcd5 	bl	80009fc <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8002052:	f7fe fcd3 	bl	80009fc <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8002056:	f7fe fcd1 	bl	80009fc <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800205a:	f7fe fccf 	bl	80009fc <LCD_RD_DATA>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b52      	ldr	r3, [pc, #328]	; (80021ac <LCD_Init+0x254>)
 8002064:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002066:	4b51      	ldr	r3, [pc, #324]	; (80021ac <LCD_Init+0x254>)
 8002068:	889b      	ldrh	r3, [r3, #4]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <LCD_Init+0x254>)
 8002070:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002072:	f7fe fcc3 	bl	80009fc <LCD_RD_DATA>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <LCD_Init+0x254>)
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	4313      	orrs	r3, r2
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b4a      	ldr	r3, [pc, #296]	; (80021ac <LCD_Init+0x254>)
 8002084:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <LCD_Init+0x254>)
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	f646 0204 	movw	r2, #26628	; 0x6804
 800208e:	4293      	cmp	r3, r2
 8002090:	d07e      	beq.n	8002190 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8002092:	20d4      	movs	r0, #212	; 0xd4
 8002094:	f7fe fc6a 	bl	800096c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002098:	f7fe fcb0 	bl	80009fc <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 800209c:	f7fe fcae 	bl	80009fc <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80020a0:	f7fe fcac 	bl	80009fc <LCD_RD_DATA>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b40      	ldr	r3, [pc, #256]	; (80021ac <LCD_Init+0x254>)
 80020aa:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <LCD_Init+0x254>)
 80020ae:	889b      	ldrh	r3, [r3, #4]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <LCD_Init+0x254>)
 80020b6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80020b8:	f7fe fca0 	bl	80009fc <LCD_RD_DATA>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <LCD_Init+0x254>)
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <LCD_Init+0x254>)
 80020ca:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <LCD_Init+0x254>)
 80020ce:	889b      	ldrh	r3, [r3, #4]
 80020d0:	f245 3210 	movw	r2, #21264	; 0x5310
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d05b      	beq.n	8002190 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80020d8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80020dc:	f7fe fc46 	bl	800096c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80020e0:	f7fe fc8c 	bl	80009fc <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80020e4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80020e8:	f7fe fc40 	bl	800096c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80020ec:	f7fe fc86 	bl	80009fc <LCD_RD_DATA>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <LCD_Init+0x254>)
 80020f6:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <LCD_Init+0x254>)
 80020fa:	889b      	ldrh	r3, [r3, #4]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <LCD_Init+0x254>)
 8002102:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002104:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002108:	f7fe fc30 	bl	800096c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800210c:	f7fe fc76 	bl	80009fc <LCD_RD_DATA>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <LCD_Init+0x254>)
 8002116:	889b      	ldrh	r3, [r3, #4]
 8002118:	4313      	orrs	r3, r2
 800211a:	b29a      	uxth	r2, r3
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <LCD_Init+0x254>)
 800211e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <LCD_Init+0x254>)
 8002122:	889b      	ldrh	r3, [r3, #4]
 8002124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002128:	d103      	bne.n	8002132 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <LCD_Init+0x254>)
 800212c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002130:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <LCD_Init+0x254>)
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	f245 5210 	movw	r2, #21776	; 0x5510
 800213a:	4293      	cmp	r3, r2
 800213c:	d028      	beq.n	8002190 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800213e:	20a1      	movs	r0, #161	; 0xa1
 8002140:	f7fe fc14 	bl	800096c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002144:	f7fe fc5a 	bl	80009fc <LCD_RD_DATA>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <LCD_Init+0x254>)
 800214e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002150:	f7fe fc54 	bl	80009fc <LCD_RD_DATA>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <LCD_Init+0x254>)
 800215a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <LCD_Init+0x254>)
 800215e:	889b      	ldrh	r3, [r3, #4]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <LCD_Init+0x254>)
 8002166:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002168:	f7fe fc48 	bl	80009fc <LCD_RD_DATA>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <LCD_Init+0x254>)
 8002172:	889b      	ldrh	r3, [r3, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <LCD_Init+0x254>)
 800217a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <LCD_Init+0x254>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	f245 7261 	movw	r2, #22369	; 0x5761
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <LCD_Init+0x254>)
 800218a:	f641 1263 	movw	r2, #6499	; 0x1963
 800218e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <LCD_Init+0x254>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	f249 3241 	movw	r2, #37697	; 0x9341
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 811f 	bne.w	80023dc <LCD_Init+0x484>
 800219e:	e007      	b.n	80021b0 <LCD_Init+0x258>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40011000 	.word	0x40011000
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	20000030 	.word	0x20000030
			{
		LCD_WR_REG(0xCF);
 80021b0:	20cf      	movs	r0, #207	; 0xcf
 80021b2:	f7fe fbdb 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fbfc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80021bc:	20c1      	movs	r0, #193	; 0xc1
 80021be:	f7fe fbf9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80021c2:	2030      	movs	r0, #48	; 0x30
 80021c4:	f7fe fbf6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80021c8:	20ed      	movs	r0, #237	; 0xed
 80021ca:	f7fe fbcf 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80021ce:	2064      	movs	r0, #100	; 0x64
 80021d0:	f7fe fbf0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f7fe fbed 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80021da:	2012      	movs	r0, #18
 80021dc:	f7fe fbea 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80021e0:	2081      	movs	r0, #129	; 0x81
 80021e2:	f7fe fbe7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80021e6:	20e8      	movs	r0, #232	; 0xe8
 80021e8:	f7fe fbc0 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80021ec:	2085      	movs	r0, #133	; 0x85
 80021ee:	f7fe fbe1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80021f2:	2010      	movs	r0, #16
 80021f4:	f7fe fbde 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80021f8:	207a      	movs	r0, #122	; 0x7a
 80021fa:	f7fe fbdb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80021fe:	20cb      	movs	r0, #203	; 0xcb
 8002200:	f7fe fbb4 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002204:	2039      	movs	r0, #57	; 0x39
 8002206:	f7fe fbd5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800220a:	202c      	movs	r0, #44	; 0x2c
 800220c:	f7fe fbd2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002210:	2000      	movs	r0, #0
 8002212:	f7fe fbcf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002216:	2034      	movs	r0, #52	; 0x34
 8002218:	f7fe fbcc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800221c:	2002      	movs	r0, #2
 800221e:	f7fe fbc9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002222:	20f7      	movs	r0, #247	; 0xf7
 8002224:	f7fe fba2 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002228:	2020      	movs	r0, #32
 800222a:	f7fe fbc3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800222e:	20ea      	movs	r0, #234	; 0xea
 8002230:	f7fe fb9c 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe fbbd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fbba 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002240:	20c0      	movs	r0, #192	; 0xc0
 8002242:	f7fe fb93 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002246:	201b      	movs	r0, #27
 8002248:	f7fe fbb4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800224c:	20c1      	movs	r0, #193	; 0xc1
 800224e:	f7fe fb8d 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002252:	2001      	movs	r0, #1
 8002254:	f7fe fbae 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002258:	20c5      	movs	r0, #197	; 0xc5
 800225a:	f7fe fb87 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800225e:	2030      	movs	r0, #48	; 0x30
 8002260:	f7fe fba8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002264:	2030      	movs	r0, #48	; 0x30
 8002266:	f7fe fba5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800226a:	20c7      	movs	r0, #199	; 0xc7
 800226c:	f7fe fb7e 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002270:	20b7      	movs	r0, #183	; 0xb7
 8002272:	f7fe fb9f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002276:	2036      	movs	r0, #54	; 0x36
 8002278:	f7fe fb78 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800227c:	2048      	movs	r0, #72	; 0x48
 800227e:	f7fe fb99 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002282:	203a      	movs	r0, #58	; 0x3a
 8002284:	f7fe fb72 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002288:	2055      	movs	r0, #85	; 0x55
 800228a:	f7fe fb93 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800228e:	20b1      	movs	r0, #177	; 0xb1
 8002290:	f7fe fb6c 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fb8d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800229a:	201a      	movs	r0, #26
 800229c:	f7fe fb8a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80022a0:	20b6      	movs	r0, #182	; 0xb6
 80022a2:	f7fe fb63 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80022a6:	200a      	movs	r0, #10
 80022a8:	f7fe fb84 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80022ac:	20a2      	movs	r0, #162	; 0xa2
 80022ae:	f7fe fb81 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80022b2:	20f2      	movs	r0, #242	; 0xf2
 80022b4:	f7fe fb5a 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fb7b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80022be:	2026      	movs	r0, #38	; 0x26
 80022c0:	f7fe fb54 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7fe fb75 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80022ca:	20e0      	movs	r0, #224	; 0xe0
 80022cc:	f7fe fb4e 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80022d0:	200f      	movs	r0, #15
 80022d2:	f7fe fb6f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80022d6:	202a      	movs	r0, #42	; 0x2a
 80022d8:	f7fe fb6c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80022dc:	2028      	movs	r0, #40	; 0x28
 80022de:	f7fe fb69 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80022e2:	2008      	movs	r0, #8
 80022e4:	f7fe fb66 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80022e8:	200e      	movs	r0, #14
 80022ea:	f7fe fb63 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80022ee:	2008      	movs	r0, #8
 80022f0:	f7fe fb60 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80022f4:	2054      	movs	r0, #84	; 0x54
 80022f6:	f7fe fb5d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80022fa:	20a9      	movs	r0, #169	; 0xa9
 80022fc:	f7fe fb5a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002300:	2043      	movs	r0, #67	; 0x43
 8002302:	f7fe fb57 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002306:	200a      	movs	r0, #10
 8002308:	f7fe fb54 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800230c:	200f      	movs	r0, #15
 800230e:	f7fe fb51 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe fb4e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fb4b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe fb48 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe fb45 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800232a:	20e1      	movs	r0, #225	; 0xe1
 800232c:	f7fe fb1e 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe fb3f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002336:	2015      	movs	r0, #21
 8002338:	f7fe fb3c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800233c:	2017      	movs	r0, #23
 800233e:	f7fe fb39 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002342:	2007      	movs	r0, #7
 8002344:	f7fe fb36 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002348:	2011      	movs	r0, #17
 800234a:	f7fe fb33 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800234e:	2006      	movs	r0, #6
 8002350:	f7fe fb30 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002354:	202b      	movs	r0, #43	; 0x2b
 8002356:	f7fe fb2d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800235a:	2056      	movs	r0, #86	; 0x56
 800235c:	f7fe fb2a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002360:	203c      	movs	r0, #60	; 0x3c
 8002362:	f7fe fb27 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002366:	2005      	movs	r0, #5
 8002368:	f7fe fb24 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800236c:	2010      	movs	r0, #16
 800236e:	f7fe fb21 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002372:	200f      	movs	r0, #15
 8002374:	f7fe fb1e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002378:	203f      	movs	r0, #63	; 0x3f
 800237a:	f7fe fb1b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800237e:	203f      	movs	r0, #63	; 0x3f
 8002380:	f7fe fb18 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002384:	200f      	movs	r0, #15
 8002386:	f7fe fb15 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800238a:	202b      	movs	r0, #43	; 0x2b
 800238c:	f7fe faee 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fb0f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fb0c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800239c:	2001      	movs	r0, #1
 800239e:	f7fe fb09 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80023a2:	203f      	movs	r0, #63	; 0x3f
 80023a4:	f7fe fb06 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80023a8:	202a      	movs	r0, #42	; 0x2a
 80023aa:	f7fe fadf 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fb00 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe fafd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fafa 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80023c0:	20ef      	movs	r0, #239	; 0xef
 80023c2:	f7fe faf7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80023c6:	2011      	movs	r0, #17
 80023c8:	f7fe fad0 	bl	800096c <LCD_WR_REG>
		HAL_Delay(120);
 80023cc:	2078      	movs	r0, #120	; 0x78
 80023ce:	f004 f8a3 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80023d2:	2029      	movs	r0, #41	; 0x29
 80023d4:	f7fe faca 	bl	800096c <LCD_WR_REG>
 80023d8:	f003 bcd8 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80023dc:	4b58      	ldr	r3, [pc, #352]	; (8002540 <LCD_Init+0x5e8>)
 80023de:	889b      	ldrh	r3, [r3, #4]
 80023e0:	f646 0204 	movw	r2, #26628	; 0x6804
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f040 80ad 	bne.w	8002544 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80023ea:	2011      	movs	r0, #17
 80023ec:	f7fe fabe 	bl	800096c <LCD_WR_REG>
		HAL_Delay(20);
 80023f0:	2014      	movs	r0, #20
 80023f2:	f004 f891 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80023f6:	20d0      	movs	r0, #208	; 0xd0
 80023f8:	f7fe fab8 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80023fc:	2007      	movs	r0, #7
 80023fe:	f7fe fad9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002402:	2042      	movs	r0, #66	; 0x42
 8002404:	f7fe fad6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002408:	201d      	movs	r0, #29
 800240a:	f7fe fad3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800240e:	20d1      	movs	r0, #209	; 0xd1
 8002410:	f7fe faac 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe facd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800241a:	201a      	movs	r0, #26
 800241c:	f7fe faca 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002420:	2009      	movs	r0, #9
 8002422:	f7fe fac7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002426:	20d2      	movs	r0, #210	; 0xd2
 8002428:	f7fe faa0 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800242c:	2001      	movs	r0, #1
 800242e:	f7fe fac1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002432:	2022      	movs	r0, #34	; 0x22
 8002434:	f7fe fabe 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002438:	20c0      	movs	r0, #192	; 0xc0
 800243a:	f7fe fa97 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800243e:	2010      	movs	r0, #16
 8002440:	f7fe fab8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002444:	203b      	movs	r0, #59	; 0x3b
 8002446:	f7fe fab5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe fab2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002450:	2002      	movs	r0, #2
 8002452:	f7fe faaf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002456:	2011      	movs	r0, #17
 8002458:	f7fe faac 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800245c:	20c5      	movs	r0, #197	; 0xc5
 800245e:	f7fe fa85 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002462:	2003      	movs	r0, #3
 8002464:	f7fe faa6 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002468:	20c8      	movs	r0, #200	; 0xc8
 800246a:	f7fe fa7f 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe faa0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002474:	2025      	movs	r0, #37	; 0x25
 8002476:	f7fe fa9d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800247a:	2021      	movs	r0, #33	; 0x21
 800247c:	f7fe fa9a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002480:	2005      	movs	r0, #5
 8002482:	f7fe fa97 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fa94 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800248c:	200a      	movs	r0, #10
 800248e:	f7fe fa91 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002492:	2065      	movs	r0, #101	; 0x65
 8002494:	f7fe fa8e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002498:	2025      	movs	r0, #37	; 0x25
 800249a:	f7fe fa8b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800249e:	2077      	movs	r0, #119	; 0x77
 80024a0:	f7fe fa88 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80024a4:	2050      	movs	r0, #80	; 0x50
 80024a6:	f7fe fa85 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80024aa:	200f      	movs	r0, #15
 80024ac:	f7fe fa82 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fa7f 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80024b6:	20f8      	movs	r0, #248	; 0xf8
 80024b8:	f7fe fa58 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fa79 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80024c2:	20fe      	movs	r0, #254	; 0xfe
 80024c4:	f7fe fa52 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe fa73 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80024ce:	2002      	movs	r0, #2
 80024d0:	f7fe fa70 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80024d4:	2020      	movs	r0, #32
 80024d6:	f7fe fa49 	bl	800096c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80024da:	2036      	movs	r0, #54	; 0x36
 80024dc:	f7fe fa46 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80024e0:	2008      	movs	r0, #8
 80024e2:	f7fe fa67 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80024e6:	203a      	movs	r0, #58	; 0x3a
 80024e8:	f7fe fa40 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80024ec:	2055      	movs	r0, #85	; 0x55
 80024ee:	f7fe fa61 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80024f2:	202b      	movs	r0, #43	; 0x2b
 80024f4:	f7fe fa3a 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe fa5b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe fa58 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002504:	2001      	movs	r0, #1
 8002506:	f7fe fa55 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800250a:	203f      	movs	r0, #63	; 0x3f
 800250c:	f7fe fa52 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002510:	202a      	movs	r0, #42	; 0x2a
 8002512:	f7fe fa2b 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fa4c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fa49 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002522:	2001      	movs	r0, #1
 8002524:	f7fe fa46 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002528:	20df      	movs	r0, #223	; 0xdf
 800252a:	f7fe fa43 	bl	80009b4 <LCD_WR_DATAX>
		HAL_Delay(120);
 800252e:	2078      	movs	r0, #120	; 0x78
 8002530:	f003 fff2 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002534:	2029      	movs	r0, #41	; 0x29
 8002536:	f7fe fa19 	bl	800096c <LCD_WR_REG>
 800253a:	f003 bc27 	b.w	8005d8c <LCD_Init+0x3e34>
 800253e:	bf00      	nop
 8002540:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5310) {
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <LCD_Init+0x5fc>)
 8002546:	889b      	ldrh	r3, [r3, #4]
 8002548:	f245 3210 	movw	r2, #21264	; 0x5310
 800254c:	4293      	cmp	r3, r2
 800254e:	f040 877c 	bne.w	800344a <LCD_Init+0x14f2>
 8002552:	e001      	b.n	8002558 <LCD_Init+0x600>
 8002554:	20000030 	.word	0x20000030
		LCD_WR_REG(0xED);
 8002558:	20ed      	movs	r0, #237	; 0xed
 800255a:	f7fe fa07 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800255e:	2001      	movs	r0, #1
 8002560:	f7fe fa28 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002564:	20fe      	movs	r0, #254	; 0xfe
 8002566:	f7fe fa25 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800256a:	20ee      	movs	r0, #238	; 0xee
 800256c:	f7fe f9fe 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002570:	20de      	movs	r0, #222	; 0xde
 8002572:	f7fe fa1f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002576:	2021      	movs	r0, #33	; 0x21
 8002578:	f7fe fa1c 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800257c:	20f1      	movs	r0, #241	; 0xf1
 800257e:	f7fe f9f5 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002582:	2001      	movs	r0, #1
 8002584:	f7fe fa16 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002588:	20df      	movs	r0, #223	; 0xdf
 800258a:	f7fe f9ef 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800258e:	2010      	movs	r0, #16
 8002590:	f7fe fa10 	bl	80009b4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002594:	20c4      	movs	r0, #196	; 0xc4
 8002596:	f7fe f9e9 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800259a:	208f      	movs	r0, #143	; 0x8f
 800259c:	f7fe fa0a 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80025a0:	20c6      	movs	r0, #198	; 0xc6
 80025a2:	f7fe f9e3 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fa04 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025ac:	20e2      	movs	r0, #226	; 0xe2
 80025ae:	f7fe fa01 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025b2:	20e2      	movs	r0, #226	; 0xe2
 80025b4:	f7fe f9fe 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025b8:	20e2      	movs	r0, #226	; 0xe2
 80025ba:	f7fe f9fb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80025be:	20bf      	movs	r0, #191	; 0xbf
 80025c0:	f7fe f9d4 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80025c4:	20aa      	movs	r0, #170	; 0xaa
 80025c6:	f7fe f9f5 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80025ca:	20b0      	movs	r0, #176	; 0xb0
 80025cc:	f7fe f9ce 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80025d0:	200d      	movs	r0, #13
 80025d2:	f7fe f9ef 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe f9ec 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80025dc:	200d      	movs	r0, #13
 80025de:	f7fe f9e9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe f9e6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80025e8:	2011      	movs	r0, #17
 80025ea:	f7fe f9e3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe f9e0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80025f4:	2019      	movs	r0, #25
 80025f6:	f7fe f9dd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe f9da 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002600:	2021      	movs	r0, #33	; 0x21
 8002602:	f7fe f9d7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe f9d4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800260c:	202d      	movs	r0, #45	; 0x2d
 800260e:	f7fe f9d1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe f9ce 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002618:	203d      	movs	r0, #61	; 0x3d
 800261a:	f7fe f9cb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe f9c8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002624:	205d      	movs	r0, #93	; 0x5d
 8002626:	f7fe f9c5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe f9c2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002630:	205d      	movs	r0, #93	; 0x5d
 8002632:	f7fe f9bf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe f9bc 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800263c:	20b1      	movs	r0, #177	; 0xb1
 800263e:	f7fe f995 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002642:	2080      	movs	r0, #128	; 0x80
 8002644:	f7fe f9b6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe f9b3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800264e:	208b      	movs	r0, #139	; 0x8b
 8002650:	f7fe f9b0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe f9ad 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800265a:	2096      	movs	r0, #150	; 0x96
 800265c:	f7fe f9aa 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe f9a7 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002666:	20b2      	movs	r0, #178	; 0xb2
 8002668:	f7fe f980 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe f9a1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe f99e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002678:	2002      	movs	r0, #2
 800267a:	f7fe f99b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe f998 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002684:	2003      	movs	r0, #3
 8002686:	f7fe f995 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe f992 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002690:	20b3      	movs	r0, #179	; 0xb3
 8002692:	f7fe f96b 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe f98c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe f989 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe f986 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe f983 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe f980 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe f97d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe f97a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe f977 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7fe f974 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe f971 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe f96e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe f96b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe f968 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe f965 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe f962 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe f95f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe f95c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe f959 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe f956 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe f953 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe f950 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe f94d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe f94a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe f947 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002726:	20b4      	movs	r0, #180	; 0xb4
 8002728:	f7fe f920 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800272c:	208b      	movs	r0, #139	; 0x8b
 800272e:	f7fe f941 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe f93e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002738:	2096      	movs	r0, #150	; 0x96
 800273a:	f7fe f93b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe f938 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002744:	20a1      	movs	r0, #161	; 0xa1
 8002746:	f7fe f935 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe f932 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002750:	20b5      	movs	r0, #181	; 0xb5
 8002752:	f7fe f90b 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002756:	2002      	movs	r0, #2
 8002758:	f7fe f92c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe f929 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002762:	2003      	movs	r0, #3
 8002764:	f7fe f926 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f923 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800276e:	2004      	movs	r0, #4
 8002770:	f7fe f920 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f91d 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800277a:	20b6      	movs	r0, #182	; 0xb6
 800277c:	f7fe f8f6 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe f917 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe f914 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800278c:	20b7      	movs	r0, #183	; 0xb7
 800278e:	f7fe f8ed 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe f90e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe f90b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800279e:	203f      	movs	r0, #63	; 0x3f
 80027a0:	f7fe f908 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe f905 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80027aa:	205e      	movs	r0, #94	; 0x5e
 80027ac:	f7fe f902 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe f8ff 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80027b6:	2064      	movs	r0, #100	; 0x64
 80027b8:	f7fe f8fc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe f8f9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80027c2:	208c      	movs	r0, #140	; 0x8c
 80027c4:	f7fe f8f6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe f8f3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80027ce:	20ac      	movs	r0, #172	; 0xac
 80027d0:	f7fe f8f0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe f8ed 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80027da:	20dc      	movs	r0, #220	; 0xdc
 80027dc:	f7fe f8ea 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe f8e7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80027e6:	2070      	movs	r0, #112	; 0x70
 80027e8:	f7fe f8e4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe f8e1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80027f2:	2090      	movs	r0, #144	; 0x90
 80027f4:	f7fe f8de 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe f8db 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80027fe:	20eb      	movs	r0, #235	; 0xeb
 8002800:	f7fe f8d8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe f8d5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800280a:	20dc      	movs	r0, #220	; 0xdc
 800280c:	f7fe f8d2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe f8cf 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002816:	20b8      	movs	r0, #184	; 0xb8
 8002818:	f7fe f8a8 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe f8c9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f8c6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe f8c3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f8c0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe f8bd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f8ba 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe f8b7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f8b4 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800284c:	20ba      	movs	r0, #186	; 0xba
 800284e:	f7fe f88d 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002852:	2024      	movs	r0, #36	; 0x24
 8002854:	f7fe f8ae 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe f8ab 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe f8a8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe f8a5 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800286a:	20c1      	movs	r0, #193	; 0xc1
 800286c:	f7fe f87e 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002870:	2020      	movs	r0, #32
 8002872:	f7fe f89f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe f89c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800287c:	2054      	movs	r0, #84	; 0x54
 800287e:	f7fe f899 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe f896 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002888:	20ff      	movs	r0, #255	; 0xff
 800288a:	f7fe f893 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe f890 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002894:	20c2      	movs	r0, #194	; 0xc2
 8002896:	f7fe f869 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800289a:	200a      	movs	r0, #10
 800289c:	f7fe f88a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe f887 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80028a6:	2004      	movs	r0, #4
 80028a8:	f7fe f884 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe f881 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80028b2:	20c3      	movs	r0, #195	; 0xc3
 80028b4:	f7fe f85a 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80028b8:	203c      	movs	r0, #60	; 0x3c
 80028ba:	f7fe f87b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe f878 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80028c4:	203a      	movs	r0, #58	; 0x3a
 80028c6:	f7fe f875 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe f872 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80028d0:	2039      	movs	r0, #57	; 0x39
 80028d2:	f7fe f86f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe f86c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80028dc:	2037      	movs	r0, #55	; 0x37
 80028de:	f7fe f869 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe f866 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80028e8:	203c      	movs	r0, #60	; 0x3c
 80028ea:	f7fe f863 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe f860 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80028f4:	2036      	movs	r0, #54	; 0x36
 80028f6:	f7fe f85d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe f85a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002900:	2032      	movs	r0, #50	; 0x32
 8002902:	f7fe f857 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe f854 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800290c:	202f      	movs	r0, #47	; 0x2f
 800290e:	f7fe f851 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe f84e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002918:	202c      	movs	r0, #44	; 0x2c
 800291a:	f7fe f84b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe f848 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002924:	2029      	movs	r0, #41	; 0x29
 8002926:	f7fe f845 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe f842 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002930:	2026      	movs	r0, #38	; 0x26
 8002932:	f7fe f83f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe f83c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800293c:	2024      	movs	r0, #36	; 0x24
 800293e:	f7fe f839 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe f836 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002948:	2024      	movs	r0, #36	; 0x24
 800294a:	f7fe f833 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe f830 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002954:	2023      	movs	r0, #35	; 0x23
 8002956:	f7fe f82d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe f82a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002960:	203c      	movs	r0, #60	; 0x3c
 8002962:	f7fe f827 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe f824 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800296c:	2036      	movs	r0, #54	; 0x36
 800296e:	f7fe f821 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe f81e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002978:	2032      	movs	r0, #50	; 0x32
 800297a:	f7fe f81b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe f818 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002984:	202f      	movs	r0, #47	; 0x2f
 8002986:	f7fe f815 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe f812 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002990:	202c      	movs	r0, #44	; 0x2c
 8002992:	f7fe f80f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe f80c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800299c:	2029      	movs	r0, #41	; 0x29
 800299e:	f7fe f809 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fe f806 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80029a8:	2026      	movs	r0, #38	; 0x26
 80029aa:	f7fe f803 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7fe f800 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029b4:	2024      	movs	r0, #36	; 0x24
 80029b6:	f7fd fffd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7fd fffa 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029c0:	2024      	movs	r0, #36	; 0x24
 80029c2:	f7fd fff7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fd fff4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80029cc:	2023      	movs	r0, #35	; 0x23
 80029ce:	f7fd fff1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fd ffee 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80029d8:	20c4      	movs	r0, #196	; 0xc4
 80029da:	f7fd ffc7 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80029de:	2062      	movs	r0, #98	; 0x62
 80029e0:	f7fd ffe8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fd ffe5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80029ea:	2005      	movs	r0, #5
 80029ec:	f7fd ffe2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fd ffdf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80029f6:	2084      	movs	r0, #132	; 0x84
 80029f8:	f7fd ffdc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fd ffd9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002a02:	20f0      	movs	r0, #240	; 0xf0
 8002a04:	f7fd ffd6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fd ffd3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a0e:	2018      	movs	r0, #24
 8002a10:	f7fd ffd0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fd ffcd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002a1a:	20a4      	movs	r0, #164	; 0xa4
 8002a1c:	f7fd ffca 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fd ffc7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a26:	2018      	movs	r0, #24
 8002a28:	f7fd ffc4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fd ffc1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002a32:	2050      	movs	r0, #80	; 0x50
 8002a34:	f7fd ffbe 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fd ffbb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002a3e:	200c      	movs	r0, #12
 8002a40:	f7fd ffb8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fd ffb5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a4a:	2017      	movs	r0, #23
 8002a4c:	f7fd ffb2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fd ffaf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002a56:	2095      	movs	r0, #149	; 0x95
 8002a58:	f7fd ffac 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fd ffa9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a62:	20f3      	movs	r0, #243	; 0xf3
 8002a64:	f7fd ffa6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fd ffa3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002a6e:	20e6      	movs	r0, #230	; 0xe6
 8002a70:	f7fd ffa0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fd ff9d 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002a7a:	20c5      	movs	r0, #197	; 0xc5
 8002a7c:	f7fd ff76 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002a80:	2032      	movs	r0, #50	; 0x32
 8002a82:	f7fd ff97 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fd ff94 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002a8c:	2044      	movs	r0, #68	; 0x44
 8002a8e:	f7fd ff91 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fd ff8e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002a98:	2065      	movs	r0, #101	; 0x65
 8002a9a:	f7fd ff8b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fd ff88 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002aa4:	2076      	movs	r0, #118	; 0x76
 8002aa6:	f7fd ff85 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fd ff82 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ab0:	2088      	movs	r0, #136	; 0x88
 8002ab2:	f7fd ff7f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fd ff7c 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002abc:	20c6      	movs	r0, #198	; 0xc6
 8002abe:	f7fd ff55 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002ac2:	2020      	movs	r0, #32
 8002ac4:	f7fd ff76 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd ff73 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002ace:	2017      	movs	r0, #23
 8002ad0:	f7fd ff70 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fd ff6d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7fd ff6a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fd ff67 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002ae6:	20c7      	movs	r0, #199	; 0xc7
 8002ae8:	f7fd ff40 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fd ff61 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fd ff5e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fd ff5b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fd ff58 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002b04:	20c8      	movs	r0, #200	; 0xc8
 8002b06:	f7fd ff31 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fd ff52 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd ff4f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fd ff4c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd ff49 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002b22:	20c9      	movs	r0, #201	; 0xc9
 8002b24:	f7fd ff22 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fd ff43 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fd ff40 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fd ff3d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fd ff3a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fd ff37 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fd ff34 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fd ff31 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7fd ff2e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fd ff2b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fd ff28 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fd ff25 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7fd ff22 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fd ff1f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fd ff1c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fd ff19 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fd ff16 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002b88:	20e0      	movs	r0, #224	; 0xe0
 8002b8a:	f7fd feef 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002b8e:	2016      	movs	r0, #22
 8002b90:	f7fd ff10 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fd ff0d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002b9a:	201c      	movs	r0, #28
 8002b9c:	f7fd ff0a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fd ff07 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002ba6:	2021      	movs	r0, #33	; 0x21
 8002ba8:	f7fd ff04 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fd ff01 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002bb2:	2036      	movs	r0, #54	; 0x36
 8002bb4:	f7fd fefe 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fd fefb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002bbe:	2046      	movs	r0, #70	; 0x46
 8002bc0:	f7fd fef8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fd fef5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002bca:	2052      	movs	r0, #82	; 0x52
 8002bcc:	f7fd fef2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fd feef 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002bd6:	2064      	movs	r0, #100	; 0x64
 8002bd8:	f7fd feec 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fd fee9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002be2:	207a      	movs	r0, #122	; 0x7a
 8002be4:	f7fd fee6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fd fee3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002bee:	208b      	movs	r0, #139	; 0x8b
 8002bf0:	f7fd fee0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fd fedd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002bfa:	2099      	movs	r0, #153	; 0x99
 8002bfc:	f7fd feda 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fd fed7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c06:	20a8      	movs	r0, #168	; 0xa8
 8002c08:	f7fd fed4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fd fed1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c12:	20b9      	movs	r0, #185	; 0xb9
 8002c14:	f7fd fece 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fd fecb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c1e:	20c4      	movs	r0, #196	; 0xc4
 8002c20:	f7fd fec8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fd fec5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c2a:	20ca      	movs	r0, #202	; 0xca
 8002c2c:	f7fd fec2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fd febf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c36:	20d2      	movs	r0, #210	; 0xd2
 8002c38:	f7fd febc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fd feb9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002c42:	20d9      	movs	r0, #217	; 0xd9
 8002c44:	f7fd feb6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7fd feb3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c4e:	20e0      	movs	r0, #224	; 0xe0
 8002c50:	f7fd feb0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fd fead 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c5a:	20f3      	movs	r0, #243	; 0xf3
 8002c5c:	f7fd feaa 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fd fea7 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002c66:	20e1      	movs	r0, #225	; 0xe1
 8002c68:	f7fd fe80 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002c6c:	2016      	movs	r0, #22
 8002c6e:	f7fd fea1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fd fe9e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002c78:	201c      	movs	r0, #28
 8002c7a:	f7fd fe9b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fd fe98 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002c84:	2022      	movs	r0, #34	; 0x22
 8002c86:	f7fd fe95 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fd fe92 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002c90:	2036      	movs	r0, #54	; 0x36
 8002c92:	f7fd fe8f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fd fe8c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002c9c:	2045      	movs	r0, #69	; 0x45
 8002c9e:	f7fd fe89 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fd fe86 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002ca8:	2052      	movs	r0, #82	; 0x52
 8002caa:	f7fd fe83 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fd fe80 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002cb4:	2064      	movs	r0, #100	; 0x64
 8002cb6:	f7fd fe7d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fd fe7a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002cc0:	207a      	movs	r0, #122	; 0x7a
 8002cc2:	f7fd fe77 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7fd fe74 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002ccc:	208b      	movs	r0, #139	; 0x8b
 8002cce:	f7fd fe71 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fd fe6e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cd8:	2099      	movs	r0, #153	; 0x99
 8002cda:	f7fd fe6b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7fd fe68 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002ce4:	20a8      	movs	r0, #168	; 0xa8
 8002ce6:	f7fd fe65 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7fd fe62 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002cf0:	20b9      	movs	r0, #185	; 0xb9
 8002cf2:	f7fd fe5f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fd fe5c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002cfc:	20c4      	movs	r0, #196	; 0xc4
 8002cfe:	f7fd fe59 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fd fe56 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002d08:	20ca      	movs	r0, #202	; 0xca
 8002d0a:	f7fd fe53 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fd fe50 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002d14:	20d2      	movs	r0, #210	; 0xd2
 8002d16:	f7fd fe4d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fd fe4a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002d20:	20d8      	movs	r0, #216	; 0xd8
 8002d22:	f7fd fe47 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fd fe44 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002d2c:	20e0      	movs	r0, #224	; 0xe0
 8002d2e:	f7fd fe41 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7fd fe3e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d38:	20f3      	movs	r0, #243	; 0xf3
 8002d3a:	f7fd fe3b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fd fe38 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002d44:	20e2      	movs	r0, #226	; 0xe2
 8002d46:	f7fd fe11 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d4a:	2005      	movs	r0, #5
 8002d4c:	f7fd fe32 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fd fe2f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002d56:	200b      	movs	r0, #11
 8002d58:	f7fd fe2c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fd fe29 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002d62:	201b      	movs	r0, #27
 8002d64:	f7fd fe26 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fd fe23 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d6e:	2034      	movs	r0, #52	; 0x34
 8002d70:	f7fd fe20 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fd fe1d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d7a:	2044      	movs	r0, #68	; 0x44
 8002d7c:	f7fd fe1a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fd fe17 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002d86:	204f      	movs	r0, #79	; 0x4f
 8002d88:	f7fd fe14 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fd fe11 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002d92:	2061      	movs	r0, #97	; 0x61
 8002d94:	f7fd fe0e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fd fe0b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002d9e:	2079      	movs	r0, #121	; 0x79
 8002da0:	f7fd fe08 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fd fe05 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002daa:	2088      	movs	r0, #136	; 0x88
 8002dac:	f7fd fe02 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fd fdff 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002db6:	2097      	movs	r0, #151	; 0x97
 8002db8:	f7fd fdfc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fd fdf9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002dc2:	20a6      	movs	r0, #166	; 0xa6
 8002dc4:	f7fd fdf6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fd fdf3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002dce:	20b7      	movs	r0, #183	; 0xb7
 8002dd0:	f7fd fdf0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7fd fded 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002dda:	20c2      	movs	r0, #194	; 0xc2
 8002ddc:	f7fd fdea 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fd fde7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002de6:	20c7      	movs	r0, #199	; 0xc7
 8002de8:	f7fd fde4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fd fde1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002df2:	20d1      	movs	r0, #209	; 0xd1
 8002df4:	f7fd fdde 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fd fddb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002dfe:	20d6      	movs	r0, #214	; 0xd6
 8002e00:	f7fd fdd8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fd fdd5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e0a:	20dd      	movs	r0, #221	; 0xdd
 8002e0c:	f7fd fdd2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fd fdcf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e16:	20f3      	movs	r0, #243	; 0xf3
 8002e18:	f7fd fdcc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd fdc9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002e22:	20e3      	movs	r0, #227	; 0xe3
 8002e24:	f7fd fda2 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002e28:	2005      	movs	r0, #5
 8002e2a:	f7fd fdc3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fd fdc0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002e34:	200a      	movs	r0, #10
 8002e36:	f7fd fdbd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fd fdba 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e40:	201c      	movs	r0, #28
 8002e42:	f7fd fdb7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fd fdb4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002e4c:	2033      	movs	r0, #51	; 0x33
 8002e4e:	f7fd fdb1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fd fdae 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e58:	2044      	movs	r0, #68	; 0x44
 8002e5a:	f7fd fdab 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fd fda8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e64:	2050      	movs	r0, #80	; 0x50
 8002e66:	f7fd fda5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fd fda2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002e70:	2062      	movs	r0, #98	; 0x62
 8002e72:	f7fd fd9f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fd fd9c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002e7c:	2078      	movs	r0, #120	; 0x78
 8002e7e:	f7fd fd99 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fd fd96 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e88:	2088      	movs	r0, #136	; 0x88
 8002e8a:	f7fd fd93 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fd fd90 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002e94:	2097      	movs	r0, #151	; 0x97
 8002e96:	f7fd fd8d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fd fd8a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002ea0:	20a6      	movs	r0, #166	; 0xa6
 8002ea2:	f7fd fd87 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7fd fd84 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002eac:	20b7      	movs	r0, #183	; 0xb7
 8002eae:	f7fd fd81 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fd fd7e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002eb8:	20c2      	movs	r0, #194	; 0xc2
 8002eba:	f7fd fd7b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fd fd78 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002ec4:	20c7      	movs	r0, #199	; 0xc7
 8002ec6:	f7fd fd75 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7fd fd72 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002ed0:	20d1      	movs	r0, #209	; 0xd1
 8002ed2:	f7fd fd6f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd fd6c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002edc:	20d5      	movs	r0, #213	; 0xd5
 8002ede:	f7fd fd69 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fd fd66 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002ee8:	20dd      	movs	r0, #221	; 0xdd
 8002eea:	f7fd fd63 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd fd60 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ef4:	20f3      	movs	r0, #243	; 0xf3
 8002ef6:	f7fd fd5d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7fd fd5a 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002f00:	20e4      	movs	r0, #228	; 0xe4
 8002f02:	f7fd fd33 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002f06:	2001      	movs	r0, #1
 8002f08:	f7fd fd54 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd fd51 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7fd fd4e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fd fd4b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f7fd fd48 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fd fd45 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002f2a:	202a      	movs	r0, #42	; 0x2a
 8002f2c:	f7fd fd42 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fd fd3f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f36:	203c      	movs	r0, #60	; 0x3c
 8002f38:	f7fd fd3c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fd fd39 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f42:	204b      	movs	r0, #75	; 0x4b
 8002f44:	f7fd fd36 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fd fd33 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f4e:	205d      	movs	r0, #93	; 0x5d
 8002f50:	f7fd fd30 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd fd2d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f5a:	2074      	movs	r0, #116	; 0x74
 8002f5c:	f7fd fd2a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fd fd27 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f66:	2084      	movs	r0, #132	; 0x84
 8002f68:	f7fd fd24 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fd fd21 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f72:	2093      	movs	r0, #147	; 0x93
 8002f74:	f7fd fd1e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fd fd1b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f7e:	20a2      	movs	r0, #162	; 0xa2
 8002f80:	f7fd fd18 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7fd fd15 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002f8a:	20b3      	movs	r0, #179	; 0xb3
 8002f8c:	f7fd fd12 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fd fd0f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002f96:	20be      	movs	r0, #190	; 0xbe
 8002f98:	f7fd fd0c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fd fd09 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002fa2:	20c4      	movs	r0, #196	; 0xc4
 8002fa4:	f7fd fd06 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7fd fd03 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002fae:	20cd      	movs	r0, #205	; 0xcd
 8002fb0:	f7fd fd00 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fd fcfd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002fba:	20d3      	movs	r0, #211	; 0xd3
 8002fbc:	f7fd fcfa 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fd fcf7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002fc6:	20dd      	movs	r0, #221	; 0xdd
 8002fc8:	f7fd fcf4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fd fcf1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fd2:	20f3      	movs	r0, #243	; 0xf3
 8002fd4:	f7fd fcee 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fd fceb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002fde:	20e5      	movs	r0, #229	; 0xe5
 8002fe0:	f7fd fcc4 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fd fce5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fd fce2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fd fcdf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fd fcdc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002ffc:	2002      	movs	r0, #2
 8002ffe:	f7fd fcd9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fd fcd6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003008:	2029      	movs	r0, #41	; 0x29
 800300a:	f7fd fcd3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fd fcd0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003014:	203c      	movs	r0, #60	; 0x3c
 8003016:	f7fd fccd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fd fcca 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003020:	204b      	movs	r0, #75	; 0x4b
 8003022:	f7fd fcc7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003026:	2000      	movs	r0, #0
 8003028:	f7fd fcc4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800302c:	205d      	movs	r0, #93	; 0x5d
 800302e:	f7fd fcc1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003032:	2000      	movs	r0, #0
 8003034:	f7fd fcbe 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003038:	2074      	movs	r0, #116	; 0x74
 800303a:	f7fd fcbb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303e:	2000      	movs	r0, #0
 8003040:	f7fd fcb8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003044:	2084      	movs	r0, #132	; 0x84
 8003046:	f7fd fcb5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304a:	2000      	movs	r0, #0
 800304c:	f7fd fcb2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003050:	2093      	movs	r0, #147	; 0x93
 8003052:	f7fd fcaf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003056:	2000      	movs	r0, #0
 8003058:	f7fd fcac 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800305c:	20a2      	movs	r0, #162	; 0xa2
 800305e:	f7fd fca9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7fd fca6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003068:	20b3      	movs	r0, #179	; 0xb3
 800306a:	f7fd fca3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306e:	2000      	movs	r0, #0
 8003070:	f7fd fca0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003074:	20be      	movs	r0, #190	; 0xbe
 8003076:	f7fd fc9d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307a:	2000      	movs	r0, #0
 800307c:	f7fd fc9a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003080:	20c4      	movs	r0, #196	; 0xc4
 8003082:	f7fd fc97 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003086:	2000      	movs	r0, #0
 8003088:	f7fd fc94 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800308c:	20cd      	movs	r0, #205	; 0xcd
 800308e:	f7fd fc91 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003092:	2000      	movs	r0, #0
 8003094:	f7fd fc8e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003098:	20d3      	movs	r0, #211	; 0xd3
 800309a:	f7fd fc8b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309e:	2000      	movs	r0, #0
 80030a0:	f7fd fc88 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80030a4:	20dc      	movs	r0, #220	; 0xdc
 80030a6:	f7fd fc85 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fd fc82 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030b0:	20f3      	movs	r0, #243	; 0xf3
 80030b2:	f7fd fc7f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7fd fc7c 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80030bc:	20e6      	movs	r0, #230	; 0xe6
 80030be:	f7fd fc55 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80030c2:	2011      	movs	r0, #17
 80030c4:	f7fd fc76 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7fd fc73 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80030ce:	2034      	movs	r0, #52	; 0x34
 80030d0:	f7fd fc70 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7fd fc6d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80030da:	2056      	movs	r0, #86	; 0x56
 80030dc:	f7fd fc6a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7fd fc67 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80030e6:	2076      	movs	r0, #118	; 0x76
 80030e8:	f7fd fc64 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fd fc61 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80030f2:	2077      	movs	r0, #119	; 0x77
 80030f4:	f7fd fc5e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f8:	2000      	movs	r0, #0
 80030fa:	f7fd fc5b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80030fe:	2066      	movs	r0, #102	; 0x66
 8003100:	f7fd fc58 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003104:	2000      	movs	r0, #0
 8003106:	f7fd fc55 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800310a:	2088      	movs	r0, #136	; 0x88
 800310c:	f7fd fc52 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003110:	2000      	movs	r0, #0
 8003112:	f7fd fc4f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003116:	2099      	movs	r0, #153	; 0x99
 8003118:	f7fd fc4c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311c:	2000      	movs	r0, #0
 800311e:	f7fd fc49 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003122:	20bb      	movs	r0, #187	; 0xbb
 8003124:	f7fd fc46 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003128:	2000      	movs	r0, #0
 800312a:	f7fd fc43 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800312e:	2099      	movs	r0, #153	; 0x99
 8003130:	f7fd fc40 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003134:	2000      	movs	r0, #0
 8003136:	f7fd fc3d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800313a:	2066      	movs	r0, #102	; 0x66
 800313c:	f7fd fc3a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003140:	2000      	movs	r0, #0
 8003142:	f7fd fc37 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003146:	2055      	movs	r0, #85	; 0x55
 8003148:	f7fd fc34 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314c:	2000      	movs	r0, #0
 800314e:	f7fd fc31 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003152:	2055      	movs	r0, #85	; 0x55
 8003154:	f7fd fc2e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003158:	2000      	movs	r0, #0
 800315a:	f7fd fc2b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800315e:	2045      	movs	r0, #69	; 0x45
 8003160:	f7fd fc28 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003164:	2000      	movs	r0, #0
 8003166:	f7fd fc25 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800316a:	2043      	movs	r0, #67	; 0x43
 800316c:	f7fd fc22 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003170:	2000      	movs	r0, #0
 8003172:	f7fd fc1f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003176:	2044      	movs	r0, #68	; 0x44
 8003178:	f7fd fc1c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317c:	2000      	movs	r0, #0
 800317e:	f7fd fc19 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003182:	20e7      	movs	r0, #231	; 0xe7
 8003184:	f7fd fbf2 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003188:	2032      	movs	r0, #50	; 0x32
 800318a:	f7fd fc13 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318e:	2000      	movs	r0, #0
 8003190:	f7fd fc10 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003194:	2055      	movs	r0, #85	; 0x55
 8003196:	f7fd fc0d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319a:	2000      	movs	r0, #0
 800319c:	f7fd fc0a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80031a0:	2076      	movs	r0, #118	; 0x76
 80031a2:	f7fd fc07 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fd fc04 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031ac:	2066      	movs	r0, #102	; 0x66
 80031ae:	f7fd fc01 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f7fd fbfe 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031b8:	2067      	movs	r0, #103	; 0x67
 80031ba:	f7fd fbfb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031be:	2000      	movs	r0, #0
 80031c0:	f7fd fbf8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031c4:	2067      	movs	r0, #103	; 0x67
 80031c6:	f7fd fbf5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7fd fbf2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031d0:	2087      	movs	r0, #135	; 0x87
 80031d2:	f7fd fbef 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f7fd fbec 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031dc:	2099      	movs	r0, #153	; 0x99
 80031de:	f7fd fbe9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7fd fbe6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80031e8:	20bb      	movs	r0, #187	; 0xbb
 80031ea:	f7fd fbe3 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7fd fbe0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031f4:	2099      	movs	r0, #153	; 0x99
 80031f6:	f7fd fbdd 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f7fd fbda 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003200:	2077      	movs	r0, #119	; 0x77
 8003202:	f7fd fbd7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003206:	2000      	movs	r0, #0
 8003208:	f7fd fbd4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800320c:	2044      	movs	r0, #68	; 0x44
 800320e:	f7fd fbd1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003212:	2000      	movs	r0, #0
 8003214:	f7fd fbce 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003218:	2056      	movs	r0, #86	; 0x56
 800321a:	f7fd fbcb 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321e:	2000      	movs	r0, #0
 8003220:	f7fd fbc8 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003224:	2023      	movs	r0, #35	; 0x23
 8003226:	f7fd fbc5 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322a:	2000      	movs	r0, #0
 800322c:	f7fd fbc2 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003230:	2033      	movs	r0, #51	; 0x33
 8003232:	f7fd fbbf 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003236:	2000      	movs	r0, #0
 8003238:	f7fd fbbc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800323c:	2045      	movs	r0, #69	; 0x45
 800323e:	f7fd fbb9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003242:	2000      	movs	r0, #0
 8003244:	f7fd fbb6 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003248:	20e8      	movs	r0, #232	; 0xe8
 800324a:	f7fd fb8f 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800324e:	2000      	movs	r0, #0
 8003250:	f7fd fbb0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fbad 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800325a:	2099      	movs	r0, #153	; 0x99
 800325c:	f7fd fbaa 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fba7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003266:	2087      	movs	r0, #135	; 0x87
 8003268:	f7fd fba4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326c:	2000      	movs	r0, #0
 800326e:	f7fd fba1 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003272:	2088      	movs	r0, #136	; 0x88
 8003274:	f7fd fb9e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd fb9b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800327e:	2077      	movs	r0, #119	; 0x77
 8003280:	f7fd fb98 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fd fb95 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800328a:	2066      	movs	r0, #102	; 0x66
 800328c:	f7fd fb92 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003290:	2000      	movs	r0, #0
 8003292:	f7fd fb8f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003296:	2088      	movs	r0, #136	; 0x88
 8003298:	f7fd fb8c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329c:	2000      	movs	r0, #0
 800329e:	f7fd fb89 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80032a2:	20aa      	movs	r0, #170	; 0xaa
 80032a4:	f7fd fb86 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7fd fb83 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032ae:	20bb      	movs	r0, #187	; 0xbb
 80032b0:	f7fd fb80 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7fd fb7d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032ba:	2099      	movs	r0, #153	; 0x99
 80032bc:	f7fd fb7a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7fd fb77 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032c6:	2066      	movs	r0, #102	; 0x66
 80032c8:	f7fd fb74 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fd fb71 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032d2:	2055      	movs	r0, #85	; 0x55
 80032d4:	f7fd fb6e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fd fb6b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032de:	2055      	movs	r0, #85	; 0x55
 80032e0:	f7fd fb68 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7fd fb65 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80032ea:	2044      	movs	r0, #68	; 0x44
 80032ec:	f7fd fb62 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd fb5f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80032f6:	2044      	movs	r0, #68	; 0x44
 80032f8:	f7fd fb5c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd fb59 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003302:	2055      	movs	r0, #85	; 0x55
 8003304:	f7fd fb56 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003308:	2000      	movs	r0, #0
 800330a:	f7fd fb53 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800330e:	20e9      	movs	r0, #233	; 0xe9
 8003310:	f7fd fb2c 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003314:	20aa      	movs	r0, #170	; 0xaa
 8003316:	f7fd fb4d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331a:	2000      	movs	r0, #0
 800331c:	f7fd fb4a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003320:	2000      	movs	r0, #0
 8003322:	f7fd fb47 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd fb44 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800332c:	2000      	movs	r0, #0
 800332e:	f7fd fb1d 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003332:	20aa      	movs	r0, #170	; 0xaa
 8003334:	f7fd fb3e 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003338:	20cf      	movs	r0, #207	; 0xcf
 800333a:	f7fd fb17 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800333e:	2000      	movs	r0, #0
 8003340:	f7fd fb38 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003344:	2000      	movs	r0, #0
 8003346:	f7fd fb35 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800334a:	2000      	movs	r0, #0
 800334c:	f7fd fb32 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003350:	2000      	movs	r0, #0
 8003352:	f7fd fb2f 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003356:	2000      	movs	r0, #0
 8003358:	f7fd fb2c 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fd fb29 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003362:	2000      	movs	r0, #0
 8003364:	f7fd fb26 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003368:	2000      	movs	r0, #0
 800336a:	f7fd fb23 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336e:	2000      	movs	r0, #0
 8003370:	f7fd fb20 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003374:	2000      	movs	r0, #0
 8003376:	f7fd fb1d 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800337a:	2000      	movs	r0, #0
 800337c:	f7fd fb1a 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003380:	2000      	movs	r0, #0
 8003382:	f7fd fb17 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003386:	2000      	movs	r0, #0
 8003388:	f7fd fb14 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338c:	2000      	movs	r0, #0
 800338e:	f7fd fb11 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003392:	2000      	movs	r0, #0
 8003394:	f7fd fb0e 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003398:	2000      	movs	r0, #0
 800339a:	f7fd fb0b 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339e:	2000      	movs	r0, #0
 80033a0:	f7fd fb08 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80033a4:	20f0      	movs	r0, #240	; 0xf0
 80033a6:	f7fd fae1 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7fd fb02 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80033b0:	2050      	movs	r0, #80	; 0x50
 80033b2:	f7fd faff 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fd fafc 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033bc:	2000      	movs	r0, #0
 80033be:	f7fd faf9 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fd faf6 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80033c8:	20f3      	movs	r0, #243	; 0xf3
 80033ca:	f7fd facf 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd faf0 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80033d4:	20f9      	movs	r0, #249	; 0xf9
 80033d6:	f7fd fac9 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80033da:	2006      	movs	r0, #6
 80033dc:	f7fd faea 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80033e0:	2010      	movs	r0, #16
 80033e2:	f7fd fae7 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80033e6:	2029      	movs	r0, #41	; 0x29
 80033e8:	f7fd fae4 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fd fae1 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80033f2:	203a      	movs	r0, #58	; 0x3a
 80033f4:	f7fd faba 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80033f8:	2055      	movs	r0, #85	; 0x55
 80033fa:	f7fd fadb 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80033fe:	2011      	movs	r0, #17
 8003400:	f7fd fab4 	bl	800096c <LCD_WR_REG>
		HAL_Delay(100);
 8003404:	2064      	movs	r0, #100	; 0x64
 8003406:	f003 f887 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0x29);
 800340a:	2029      	movs	r0, #41	; 0x29
 800340c:	f7fd faae 	bl	800096c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003410:	2035      	movs	r0, #53	; 0x35
 8003412:	f7fd faab 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003416:	2000      	movs	r0, #0
 8003418:	f7fd facc 	bl	80009b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800341c:	2051      	movs	r0, #81	; 0x51
 800341e:	f7fd faa5 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003422:	20ff      	movs	r0, #255	; 0xff
 8003424:	f7fd fac6 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003428:	2053      	movs	r0, #83	; 0x53
 800342a:	f7fd fa9f 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800342e:	202c      	movs	r0, #44	; 0x2c
 8003430:	f7fd fac0 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003434:	2055      	movs	r0, #85	; 0x55
 8003436:	f7fd fa99 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800343a:	2082      	movs	r0, #130	; 0x82
 800343c:	f7fd faba 	bl	80009b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003440:	202c      	movs	r0, #44	; 0x2c
 8003442:	f7fd fa93 	bl	800096c <LCD_WR_REG>
 8003446:	f002 bca1 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <LCD_Init+0x1504>)
 800344c:	889b      	ldrh	r3, [r3, #4]
 800344e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003452:	4293      	cmp	r3, r2
 8003454:	f040 8782 	bne.w	800435c <LCD_Init+0x2404>
 8003458:	e002      	b.n	8003460 <LCD_Init+0x1508>
 800345a:	bf00      	nop
 800345c:	20000030 	.word	0x20000030
		LCD_WriteReg(0xF000, 0x55);
 8003460:	2155      	movs	r1, #85	; 0x55
 8003462:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003466:	f7fd fb0d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800346a:	21aa      	movs	r1, #170	; 0xaa
 800346c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003470:	f7fd fb08 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003474:	2152      	movs	r1, #82	; 0x52
 8003476:	f24f 0002 	movw	r0, #61442	; 0xf002
 800347a:	f7fd fb03 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800347e:	2108      	movs	r1, #8
 8003480:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003484:	f7fd fafe 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003488:	2101      	movs	r1, #1
 800348a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800348e:	f7fd faf9 	bl	8000a84 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003492:	210d      	movs	r1, #13
 8003494:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003498:	f7fd faf4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800349c:	210d      	movs	r1, #13
 800349e:	f24b 0001 	movw	r0, #45057	; 0xb001
 80034a2:	f7fd faef 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80034a6:	210d      	movs	r1, #13
 80034a8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80034ac:	f7fd faea 	bl	8000a84 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80034b0:	2134      	movs	r1, #52	; 0x34
 80034b2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80034b6:	f7fd fae5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80034ba:	2134      	movs	r1, #52	; 0x34
 80034bc:	f24b 6001 	movw	r0, #46593	; 0xb601
 80034c0:	f7fd fae0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80034c4:	2134      	movs	r1, #52	; 0x34
 80034c6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80034ca:	f7fd fadb 	bl	8000a84 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80034ce:	210d      	movs	r1, #13
 80034d0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80034d4:	f7fd fad6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80034d8:	210d      	movs	r1, #13
 80034da:	f24b 1001 	movw	r0, #45313	; 0xb101
 80034de:	f7fd fad1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80034e2:	210d      	movs	r1, #13
 80034e4:	f24b 1002 	movw	r0, #45314	; 0xb102
 80034e8:	f7fd facc 	bl	8000a84 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80034ec:	2134      	movs	r1, #52	; 0x34
 80034ee:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80034f2:	f7fd fac7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80034f6:	2134      	movs	r1, #52	; 0x34
 80034f8:	f24b 7001 	movw	r0, #46849	; 0xb701
 80034fc:	f7fd fac2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003500:	2134      	movs	r1, #52	; 0x34
 8003502:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003506:	f7fd fabd 	bl	8000a84 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800350a:	2100      	movs	r1, #0
 800350c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003510:	f7fd fab8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003514:	2100      	movs	r1, #0
 8003516:	f24b 2001 	movw	r0, #45569	; 0xb201
 800351a:	f7fd fab3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800351e:	2100      	movs	r1, #0
 8003520:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003524:	f7fd faae 	bl	8000a84 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003528:	2124      	movs	r1, #36	; 0x24
 800352a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800352e:	f7fd faa9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003532:	2124      	movs	r1, #36	; 0x24
 8003534:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003538:	f7fd faa4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800353c:	2124      	movs	r1, #36	; 0x24
 800353e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003542:	f7fd fa9f 	bl	8000a84 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003546:	2101      	movs	r1, #1
 8003548:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800354c:	f7fd fa9a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003550:	210f      	movs	r1, #15
 8003552:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003556:	f7fd fa95 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800355a:	210f      	movs	r1, #15
 800355c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003560:	f7fd fa90 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003564:	210f      	movs	r1, #15
 8003566:	f24b 3002 	movw	r0, #45826	; 0xb302
 800356a:	f7fd fa8b 	bl	8000a84 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800356e:	2134      	movs	r1, #52	; 0x34
 8003570:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003574:	f7fd fa86 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003578:	2134      	movs	r1, #52	; 0x34
 800357a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800357e:	f7fd fa81 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003582:	2134      	movs	r1, #52	; 0x34
 8003584:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003588:	f7fd fa7c 	bl	8000a84 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800358c:	2108      	movs	r1, #8
 800358e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003592:	f7fd fa77 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003596:	2108      	movs	r1, #8
 8003598:	f24b 5001 	movw	r0, #46337	; 0xb501
 800359c:	f7fd fa72 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80035a0:	2108      	movs	r1, #8
 80035a2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80035a6:	f7fd fa6d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80035aa:	2103      	movs	r1, #3
 80035ac:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80035b0:	f7fd fa68 	bl	8000a84 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80035b4:	2124      	movs	r1, #36	; 0x24
 80035b6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80035ba:	f7fd fa63 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80035be:	2124      	movs	r1, #36	; 0x24
 80035c0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80035c4:	f7fd fa5e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80035c8:	2124      	movs	r1, #36	; 0x24
 80035ca:	f64b 2002 	movw	r0, #47618	; 0xba02
 80035ce:	f7fd fa59 	bl	8000a84 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80035d2:	2100      	movs	r1, #0
 80035d4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80035d8:	f7fd fa54 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80035dc:	2178      	movs	r1, #120	; 0x78
 80035de:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80035e2:	f7fd fa4f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80035e6:	2100      	movs	r1, #0
 80035e8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80035ec:	f7fd fa4a 	bl	8000a84 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80035f0:	2100      	movs	r1, #0
 80035f2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80035f6:	f7fd fa45 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80035fa:	2178      	movs	r1, #120	; 0x78
 80035fc:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003600:	f7fd fa40 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003604:	2100      	movs	r1, #0
 8003606:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800360a:	f7fd fa3b 	bl	8000a84 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800360e:	2100      	movs	r1, #0
 8003610:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003614:	f7fd fa36 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003618:	2164      	movs	r1, #100	; 0x64
 800361a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800361e:	f7fd fa31 	bl	8000a84 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003622:	2100      	movs	r1, #0
 8003624:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003628:	f7fd fa2c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800362c:	2133      	movs	r1, #51	; 0x33
 800362e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003632:	f7fd fa27 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003636:	2100      	movs	r1, #0
 8003638:	f24d 1002 	movw	r0, #53506	; 0xd102
 800363c:	f7fd fa22 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003640:	2134      	movs	r1, #52	; 0x34
 8003642:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003646:	f7fd fa1d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800364a:	2100      	movs	r1, #0
 800364c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003650:	f7fd fa18 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003654:	213a      	movs	r1, #58	; 0x3a
 8003656:	f24d 1005 	movw	r0, #53509	; 0xd105
 800365a:	f7fd fa13 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800365e:	2100      	movs	r1, #0
 8003660:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003664:	f7fd fa0e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003668:	214a      	movs	r1, #74	; 0x4a
 800366a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800366e:	f7fd fa09 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003672:	2100      	movs	r1, #0
 8003674:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003678:	f7fd fa04 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800367c:	215c      	movs	r1, #92	; 0x5c
 800367e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003682:	f7fd f9ff 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003686:	2100      	movs	r1, #0
 8003688:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800368c:	f7fd f9fa 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003690:	2181      	movs	r1, #129	; 0x81
 8003692:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003696:	f7fd f9f5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800369a:	2100      	movs	r1, #0
 800369c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80036a0:	f7fd f9f0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80036a4:	21a6      	movs	r1, #166	; 0xa6
 80036a6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80036aa:	f7fd f9eb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80036ae:	2100      	movs	r1, #0
 80036b0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80036b4:	f7fd f9e6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80036b8:	21e5      	movs	r1, #229	; 0xe5
 80036ba:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80036be:	f7fd f9e1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80036c2:	2101      	movs	r1, #1
 80036c4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80036c8:	f7fd f9dc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80036cc:	2113      	movs	r1, #19
 80036ce:	f24d 1011 	movw	r0, #53521	; 0xd111
 80036d2:	f7fd f9d7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80036d6:	2101      	movs	r1, #1
 80036d8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80036dc:	f7fd f9d2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80036e0:	2154      	movs	r1, #84	; 0x54
 80036e2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80036e6:	f7fd f9cd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80036ea:	2101      	movs	r1, #1
 80036ec:	f24d 1014 	movw	r0, #53524	; 0xd114
 80036f0:	f7fd f9c8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80036f4:	2182      	movs	r1, #130	; 0x82
 80036f6:	f24d 1015 	movw	r0, #53525	; 0xd115
 80036fa:	f7fd f9c3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80036fe:	2101      	movs	r1, #1
 8003700:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003704:	f7fd f9be 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003708:	21ca      	movs	r1, #202	; 0xca
 800370a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800370e:	f7fd f9b9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003712:	2102      	movs	r1, #2
 8003714:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003718:	f7fd f9b4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800371c:	2100      	movs	r1, #0
 800371e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003722:	f7fd f9af 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003726:	2102      	movs	r1, #2
 8003728:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800372c:	f7fd f9aa 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003730:	2101      	movs	r1, #1
 8003732:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003736:	f7fd f9a5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800373a:	2102      	movs	r1, #2
 800373c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003740:	f7fd f9a0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003744:	2134      	movs	r1, #52	; 0x34
 8003746:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800374a:	f7fd f99b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800374e:	2102      	movs	r1, #2
 8003750:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003754:	f7fd f996 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003758:	2167      	movs	r1, #103	; 0x67
 800375a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800375e:	f7fd f991 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003762:	2102      	movs	r1, #2
 8003764:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003768:	f7fd f98c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800376c:	2184      	movs	r1, #132	; 0x84
 800376e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003772:	f7fd f987 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003776:	2102      	movs	r1, #2
 8003778:	f24d 1022 	movw	r0, #53538	; 0xd122
 800377c:	f7fd f982 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003780:	21a4      	movs	r1, #164	; 0xa4
 8003782:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003786:	f7fd f97d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800378a:	2102      	movs	r1, #2
 800378c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003790:	f7fd f978 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003794:	21b7      	movs	r1, #183	; 0xb7
 8003796:	f24d 1025 	movw	r0, #53541	; 0xd125
 800379a:	f7fd f973 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800379e:	2102      	movs	r1, #2
 80037a0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80037a4:	f7fd f96e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80037a8:	21cf      	movs	r1, #207	; 0xcf
 80037aa:	f24d 1027 	movw	r0, #53543	; 0xd127
 80037ae:	f7fd f969 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80037b2:	2102      	movs	r1, #2
 80037b4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80037b8:	f7fd f964 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80037bc:	21de      	movs	r1, #222	; 0xde
 80037be:	f24d 1029 	movw	r0, #53545	; 0xd129
 80037c2:	f7fd f95f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80037c6:	2102      	movs	r1, #2
 80037c8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80037cc:	f7fd f95a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80037d0:	21f2      	movs	r1, #242	; 0xf2
 80037d2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80037d6:	f7fd f955 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80037da:	2102      	movs	r1, #2
 80037dc:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80037e0:	f7fd f950 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80037e4:	21fe      	movs	r1, #254	; 0xfe
 80037e6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80037ea:	f7fd f94b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80037ee:	2103      	movs	r1, #3
 80037f0:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80037f4:	f7fd f946 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80037f8:	2110      	movs	r1, #16
 80037fa:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80037fe:	f7fd f941 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003802:	2103      	movs	r1, #3
 8003804:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003808:	f7fd f93c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800380c:	2133      	movs	r1, #51	; 0x33
 800380e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003812:	f7fd f937 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003816:	2103      	movs	r1, #3
 8003818:	f24d 1032 	movw	r0, #53554	; 0xd132
 800381c:	f7fd f932 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003820:	216d      	movs	r1, #109	; 0x6d
 8003822:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003826:	f7fd f92d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800382a:	2100      	movs	r1, #0
 800382c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003830:	f7fd f928 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003834:	2133      	movs	r1, #51	; 0x33
 8003836:	f24d 2001 	movw	r0, #53761	; 0xd201
 800383a:	f7fd f923 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800383e:	2100      	movs	r1, #0
 8003840:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003844:	f7fd f91e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003848:	2134      	movs	r1, #52	; 0x34
 800384a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800384e:	f7fd f919 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003852:	2100      	movs	r1, #0
 8003854:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003858:	f7fd f914 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800385c:	213a      	movs	r1, #58	; 0x3a
 800385e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003862:	f7fd f90f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003866:	2100      	movs	r1, #0
 8003868:	f24d 2006 	movw	r0, #53766	; 0xd206
 800386c:	f7fd f90a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003870:	214a      	movs	r1, #74	; 0x4a
 8003872:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003876:	f7fd f905 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800387a:	2100      	movs	r1, #0
 800387c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003880:	f7fd f900 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003884:	215c      	movs	r1, #92	; 0x5c
 8003886:	f24d 2009 	movw	r0, #53769	; 0xd209
 800388a:	f7fd f8fb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800388e:	2100      	movs	r1, #0
 8003890:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003894:	f7fd f8f6 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003898:	2181      	movs	r1, #129	; 0x81
 800389a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800389e:	f7fd f8f1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80038a2:	2100      	movs	r1, #0
 80038a4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80038a8:	f7fd f8ec 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80038ac:	21a6      	movs	r1, #166	; 0xa6
 80038ae:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80038b2:	f7fd f8e7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80038b6:	2100      	movs	r1, #0
 80038b8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80038bc:	f7fd f8e2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80038c0:	21e5      	movs	r1, #229	; 0xe5
 80038c2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80038c6:	f7fd f8dd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80038ca:	2101      	movs	r1, #1
 80038cc:	f24d 2010 	movw	r0, #53776	; 0xd210
 80038d0:	f7fd f8d8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80038d4:	2113      	movs	r1, #19
 80038d6:	f24d 2011 	movw	r0, #53777	; 0xd211
 80038da:	f7fd f8d3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80038de:	2101      	movs	r1, #1
 80038e0:	f24d 2012 	movw	r0, #53778	; 0xd212
 80038e4:	f7fd f8ce 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80038e8:	2154      	movs	r1, #84	; 0x54
 80038ea:	f24d 2013 	movw	r0, #53779	; 0xd213
 80038ee:	f7fd f8c9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80038f2:	2101      	movs	r1, #1
 80038f4:	f24d 2014 	movw	r0, #53780	; 0xd214
 80038f8:	f7fd f8c4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80038fc:	2182      	movs	r1, #130	; 0x82
 80038fe:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003902:	f7fd f8bf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003906:	2101      	movs	r1, #1
 8003908:	f24d 2016 	movw	r0, #53782	; 0xd216
 800390c:	f7fd f8ba 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003910:	21ca      	movs	r1, #202	; 0xca
 8003912:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003916:	f7fd f8b5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800391a:	2102      	movs	r1, #2
 800391c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003920:	f7fd f8b0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003924:	2100      	movs	r1, #0
 8003926:	f24d 2019 	movw	r0, #53785	; 0xd219
 800392a:	f7fd f8ab 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800392e:	2102      	movs	r1, #2
 8003930:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003934:	f7fd f8a6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003938:	2101      	movs	r1, #1
 800393a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800393e:	f7fd f8a1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003942:	2102      	movs	r1, #2
 8003944:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003948:	f7fd f89c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800394c:	2134      	movs	r1, #52	; 0x34
 800394e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003952:	f7fd f897 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003956:	2102      	movs	r1, #2
 8003958:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800395c:	f7fd f892 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003960:	2167      	movs	r1, #103	; 0x67
 8003962:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003966:	f7fd f88d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800396a:	2102      	movs	r1, #2
 800396c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003970:	f7fd f888 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003974:	2184      	movs	r1, #132	; 0x84
 8003976:	f24d 2021 	movw	r0, #53793	; 0xd221
 800397a:	f7fd f883 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800397e:	2102      	movs	r1, #2
 8003980:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003984:	f7fd f87e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003988:	21a4      	movs	r1, #164	; 0xa4
 800398a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800398e:	f7fd f879 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003992:	2102      	movs	r1, #2
 8003994:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003998:	f7fd f874 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800399c:	21b7      	movs	r1, #183	; 0xb7
 800399e:	f24d 2025 	movw	r0, #53797	; 0xd225
 80039a2:	f7fd f86f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80039a6:	2102      	movs	r1, #2
 80039a8:	f24d 2026 	movw	r0, #53798	; 0xd226
 80039ac:	f7fd f86a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80039b0:	21cf      	movs	r1, #207	; 0xcf
 80039b2:	f24d 2027 	movw	r0, #53799	; 0xd227
 80039b6:	f7fd f865 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f24d 2028 	movw	r0, #53800	; 0xd228
 80039c0:	f7fd f860 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80039c4:	21de      	movs	r1, #222	; 0xde
 80039c6:	f24d 2029 	movw	r0, #53801	; 0xd229
 80039ca:	f7fd f85b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80039ce:	2102      	movs	r1, #2
 80039d0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80039d4:	f7fd f856 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80039d8:	21f2      	movs	r1, #242	; 0xf2
 80039da:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80039de:	f7fd f851 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80039e2:	2102      	movs	r1, #2
 80039e4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80039e8:	f7fd f84c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80039ec:	21fe      	movs	r1, #254	; 0xfe
 80039ee:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80039f2:	f7fd f847 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80039f6:	2103      	movs	r1, #3
 80039f8:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80039fc:	f7fd f842 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003a00:	2110      	movs	r1, #16
 8003a02:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003a06:	f7fd f83d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003a0a:	2103      	movs	r1, #3
 8003a0c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003a10:	f7fd f838 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003a14:	2133      	movs	r1, #51	; 0x33
 8003a16:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003a1a:	f7fd f833 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003a1e:	2103      	movs	r1, #3
 8003a20:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003a24:	f7fd f82e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003a28:	216d      	movs	r1, #109	; 0x6d
 8003a2a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003a2e:	f7fd f829 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003a32:	2100      	movs	r1, #0
 8003a34:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003a38:	f7fd f824 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003a3c:	2133      	movs	r1, #51	; 0x33
 8003a3e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003a42:	f7fd f81f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003a46:	2100      	movs	r1, #0
 8003a48:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003a4c:	f7fd f81a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003a50:	2134      	movs	r1, #52	; 0x34
 8003a52:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003a56:	f7fd f815 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003a60:	f7fd f810 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003a64:	213a      	movs	r1, #58	; 0x3a
 8003a66:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003a6a:	f7fd f80b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003a74:	f7fd f806 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003a78:	214a      	movs	r1, #74	; 0x4a
 8003a7a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003a7e:	f7fd f801 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003a82:	2100      	movs	r1, #0
 8003a84:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003a88:	f7fc fffc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003a8c:	215c      	movs	r1, #92	; 0x5c
 8003a8e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003a92:	f7fc fff7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003a9c:	f7fc fff2 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003aa0:	2181      	movs	r1, #129	; 0x81
 8003aa2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003aa6:	f7fc ffed 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003ab0:	f7fc ffe8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003ab4:	21a6      	movs	r1, #166	; 0xa6
 8003ab6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003aba:	f7fc ffe3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003ac4:	f7fc ffde 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003ac8:	21e5      	movs	r1, #229	; 0xe5
 8003aca:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003ace:	f7fc ffd9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003ad8:	f7fc ffd4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003adc:	2113      	movs	r1, #19
 8003ade:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003ae2:	f7fc ffcf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003aec:	f7fc ffca 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003af0:	2154      	movs	r1, #84	; 0x54
 8003af2:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003af6:	f7fc ffc5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003afa:	2101      	movs	r1, #1
 8003afc:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003b00:	f7fc ffc0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003b04:	2182      	movs	r1, #130	; 0x82
 8003b06:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003b0a:	f7fc ffbb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003b14:	f7fc ffb6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003b18:	21ca      	movs	r1, #202	; 0xca
 8003b1a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003b1e:	f7fc ffb1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003b22:	2102      	movs	r1, #2
 8003b24:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003b28:	f7fc ffac 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003b32:	f7fc ffa7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003b36:	2102      	movs	r1, #2
 8003b38:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003b3c:	f7fc ffa2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003b40:	2101      	movs	r1, #1
 8003b42:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003b46:	f7fc ff9d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003b50:	f7fc ff98 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003b54:	2134      	movs	r1, #52	; 0x34
 8003b56:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003b5a:	f7fc ff93 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003b64:	f7fc ff8e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003b68:	2167      	movs	r1, #103	; 0x67
 8003b6a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003b6e:	f7fc ff89 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003b72:	2102      	movs	r1, #2
 8003b74:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003b78:	f7fc ff84 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003b7c:	2184      	movs	r1, #132	; 0x84
 8003b7e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003b82:	f7fc ff7f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003b8c:	f7fc ff7a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003b90:	21a4      	movs	r1, #164	; 0xa4
 8003b92:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003b96:	f7fc ff75 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003ba0:	f7fc ff70 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003ba4:	21b7      	movs	r1, #183	; 0xb7
 8003ba6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003baa:	f7fc ff6b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003bb4:	f7fc ff66 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003bb8:	21cf      	movs	r1, #207	; 0xcf
 8003bba:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003bbe:	f7fc ff61 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003bc8:	f7fc ff5c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003bcc:	21de      	movs	r1, #222	; 0xde
 8003bce:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003bd2:	f7fc ff57 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003bdc:	f7fc ff52 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003be0:	21f2      	movs	r1, #242	; 0xf2
 8003be2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003be6:	f7fc ff4d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003bea:	2102      	movs	r1, #2
 8003bec:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003bf0:	f7fc ff48 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003bf4:	21fe      	movs	r1, #254	; 0xfe
 8003bf6:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003bfa:	f7fc ff43 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003bfe:	2103      	movs	r1, #3
 8003c00:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003c04:	f7fc ff3e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003c08:	2110      	movs	r1, #16
 8003c0a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003c0e:	f7fc ff39 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003c12:	2103      	movs	r1, #3
 8003c14:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003c18:	f7fc ff34 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003c1c:	2133      	movs	r1, #51	; 0x33
 8003c1e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003c22:	f7fc ff2f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003c26:	2103      	movs	r1, #3
 8003c28:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003c2c:	f7fc ff2a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003c30:	216d      	movs	r1, #109	; 0x6d
 8003c32:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003c36:	f7fc ff25 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003c40:	f7fc ff20 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003c44:	2133      	movs	r1, #51	; 0x33
 8003c46:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003c4a:	f7fc ff1b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003c54:	f7fc ff16 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003c58:	2134      	movs	r1, #52	; 0x34
 8003c5a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003c5e:	f7fc ff11 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003c62:	2100      	movs	r1, #0
 8003c64:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003c68:	f7fc ff0c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003c6c:	213a      	movs	r1, #58	; 0x3a
 8003c6e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003c72:	f7fc ff07 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003c76:	2100      	movs	r1, #0
 8003c78:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003c7c:	f7fc ff02 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003c80:	214a      	movs	r1, #74	; 0x4a
 8003c82:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003c86:	f7fc fefd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003c90:	f7fc fef8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003c94:	215c      	movs	r1, #92	; 0x5c
 8003c96:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003c9a:	f7fc fef3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003ca4:	f7fc feee 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003ca8:	2181      	movs	r1, #129	; 0x81
 8003caa:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003cae:	f7fc fee9 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003cb8:	f7fc fee4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003cbc:	21a6      	movs	r1, #166	; 0xa6
 8003cbe:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003cc2:	f7fc fedf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003ccc:	f7fc feda 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003cd0:	21e5      	movs	r1, #229	; 0xe5
 8003cd2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003cd6:	f7fc fed5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003ce0:	f7fc fed0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003ce4:	2113      	movs	r1, #19
 8003ce6:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003cea:	f7fc fecb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003cf4:	f7fc fec6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003cf8:	2154      	movs	r1, #84	; 0x54
 8003cfa:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003cfe:	f7fc fec1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003d02:	2101      	movs	r1, #1
 8003d04:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003d08:	f7fc febc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003d0c:	2182      	movs	r1, #130	; 0x82
 8003d0e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003d12:	f7fc feb7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003d16:	2101      	movs	r1, #1
 8003d18:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003d1c:	f7fc feb2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003d20:	21ca      	movs	r1, #202	; 0xca
 8003d22:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003d26:	f7fc fead 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003d30:	f7fc fea8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003d34:	2100      	movs	r1, #0
 8003d36:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003d3a:	f7fc fea3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003d3e:	2102      	movs	r1, #2
 8003d40:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003d44:	f7fc fe9e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003d48:	2101      	movs	r1, #1
 8003d4a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003d4e:	f7fc fe99 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003d52:	2102      	movs	r1, #2
 8003d54:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003d58:	f7fc fe94 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003d5c:	2134      	movs	r1, #52	; 0x34
 8003d5e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003d62:	f7fc fe8f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003d66:	2102      	movs	r1, #2
 8003d68:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003d6c:	f7fc fe8a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003d70:	2167      	movs	r1, #103	; 0x67
 8003d72:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003d76:	f7fc fe85 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003d80:	f7fc fe80 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003d84:	2184      	movs	r1, #132	; 0x84
 8003d86:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003d8a:	f7fc fe7b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003d8e:	2102      	movs	r1, #2
 8003d90:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003d94:	f7fc fe76 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003d98:	21a4      	movs	r1, #164	; 0xa4
 8003d9a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003d9e:	f7fc fe71 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003da2:	2102      	movs	r1, #2
 8003da4:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003da8:	f7fc fe6c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003dac:	21b7      	movs	r1, #183	; 0xb7
 8003dae:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003db2:	f7fc fe67 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003db6:	2102      	movs	r1, #2
 8003db8:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003dbc:	f7fc fe62 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003dc0:	21cf      	movs	r1, #207	; 0xcf
 8003dc2:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003dc6:	f7fc fe5d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003dca:	2102      	movs	r1, #2
 8003dcc:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003dd0:	f7fc fe58 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003dd4:	21de      	movs	r1, #222	; 0xde
 8003dd6:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003dda:	f7fc fe53 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003dde:	2102      	movs	r1, #2
 8003de0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003de4:	f7fc fe4e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003de8:	21f2      	movs	r1, #242	; 0xf2
 8003dea:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003dee:	f7fc fe49 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003df2:	2102      	movs	r1, #2
 8003df4:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003df8:	f7fc fe44 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003dfc:	21fe      	movs	r1, #254	; 0xfe
 8003dfe:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003e02:	f7fc fe3f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003e06:	2103      	movs	r1, #3
 8003e08:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003e0c:	f7fc fe3a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003e10:	2110      	movs	r1, #16
 8003e12:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003e16:	f7fc fe35 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003e20:	f7fc fe30 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003e24:	2133      	movs	r1, #51	; 0x33
 8003e26:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003e2a:	f7fc fe2b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003e2e:	2103      	movs	r1, #3
 8003e30:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003e34:	f7fc fe26 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003e38:	216d      	movs	r1, #109	; 0x6d
 8003e3a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003e3e:	f7fc fe21 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003e42:	2100      	movs	r1, #0
 8003e44:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003e48:	f7fc fe1c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003e4c:	2133      	movs	r1, #51	; 0x33
 8003e4e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003e52:	f7fc fe17 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003e56:	2100      	movs	r1, #0
 8003e58:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003e5c:	f7fc fe12 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003e60:	2134      	movs	r1, #52	; 0x34
 8003e62:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003e66:	f7fc fe0d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003e70:	f7fc fe08 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003e74:	213a      	movs	r1, #58	; 0x3a
 8003e76:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003e7a:	f7fc fe03 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003e84:	f7fc fdfe 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003e88:	214a      	movs	r1, #74	; 0x4a
 8003e8a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003e8e:	f7fc fdf9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003e92:	2100      	movs	r1, #0
 8003e94:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003e98:	f7fc fdf4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003e9c:	215c      	movs	r1, #92	; 0x5c
 8003e9e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003ea2:	f7fc fdef 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003eac:	f7fc fdea 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003eb0:	2181      	movs	r1, #129	; 0x81
 8003eb2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003eb6:	f7fc fde5 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003ec0:	f7fc fde0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003ec4:	21a6      	movs	r1, #166	; 0xa6
 8003ec6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003eca:	f7fc fddb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003ed4:	f7fc fdd6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003ed8:	21e5      	movs	r1, #229	; 0xe5
 8003eda:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003ede:	f7fc fdd1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003ee8:	f7fc fdcc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003eec:	2113      	movs	r1, #19
 8003eee:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003ef2:	f7fc fdc7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003efc:	f7fc fdc2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003f00:	2154      	movs	r1, #84	; 0x54
 8003f02:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003f06:	f7fc fdbd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003f10:	f7fc fdb8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003f14:	2182      	movs	r1, #130	; 0x82
 8003f16:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003f1a:	f7fc fdb3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003f1e:	2101      	movs	r1, #1
 8003f20:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003f24:	f7fc fdae 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003f28:	21ca      	movs	r1, #202	; 0xca
 8003f2a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003f2e:	f7fc fda9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003f32:	2102      	movs	r1, #2
 8003f34:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003f38:	f7fc fda4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003f42:	f7fc fd9f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003f46:	2102      	movs	r1, #2
 8003f48:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003f4c:	f7fc fd9a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003f50:	2101      	movs	r1, #1
 8003f52:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003f56:	f7fc fd95 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003f60:	f7fc fd90 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003f64:	2134      	movs	r1, #52	; 0x34
 8003f66:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003f6a:	f7fc fd8b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003f6e:	2102      	movs	r1, #2
 8003f70:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003f74:	f7fc fd86 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003f78:	2167      	movs	r1, #103	; 0x67
 8003f7a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003f7e:	f7fc fd81 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003f82:	2102      	movs	r1, #2
 8003f84:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003f88:	f7fc fd7c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003f8c:	2184      	movs	r1, #132	; 0x84
 8003f8e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003f92:	f7fc fd77 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003f96:	2102      	movs	r1, #2
 8003f98:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003f9c:	f7fc fd72 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003fa0:	21a4      	movs	r1, #164	; 0xa4
 8003fa2:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003fa6:	f7fc fd6d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003faa:	2102      	movs	r1, #2
 8003fac:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003fb0:	f7fc fd68 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003fb4:	21b7      	movs	r1, #183	; 0xb7
 8003fb6:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003fba:	f7fc fd63 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003fc4:	f7fc fd5e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003fc8:	21cf      	movs	r1, #207	; 0xcf
 8003fca:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003fce:	f7fc fd59 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003fd8:	f7fc fd54 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003fdc:	21de      	movs	r1, #222	; 0xde
 8003fde:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003fe2:	f7fc fd4f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003fec:	f7fc fd4a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003ff0:	21f2      	movs	r1, #242	; 0xf2
 8003ff2:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003ff6:	f7fc fd45 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004000:	f7fc fd40 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004004:	21fe      	movs	r1, #254	; 0xfe
 8004006:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800400a:	f7fc fd3b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800400e:	2103      	movs	r1, #3
 8004010:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004014:	f7fc fd36 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004018:	2110      	movs	r1, #16
 800401a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800401e:	f7fc fd31 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004022:	2103      	movs	r1, #3
 8004024:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004028:	f7fc fd2c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800402c:	2133      	movs	r1, #51	; 0x33
 800402e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004032:	f7fc fd27 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004036:	2103      	movs	r1, #3
 8004038:	f24d 5032 	movw	r0, #54578	; 0xd532
 800403c:	f7fc fd22 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004040:	216d      	movs	r1, #109	; 0x6d
 8004042:	f24d 5033 	movw	r0, #54579	; 0xd533
 8004046:	f7fc fd1d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800404a:	2100      	movs	r1, #0
 800404c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004050:	f7fc fd18 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8004054:	2133      	movs	r1, #51	; 0x33
 8004056:	f24d 6001 	movw	r0, #54785	; 0xd601
 800405a:	f7fc fd13 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800405e:	2100      	movs	r1, #0
 8004060:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004064:	f7fc fd0e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004068:	2134      	movs	r1, #52	; 0x34
 800406a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800406e:	f7fc fd09 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004072:	2100      	movs	r1, #0
 8004074:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004078:	f7fc fd04 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800407c:	213a      	movs	r1, #58	; 0x3a
 800407e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004082:	f7fc fcff 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8004086:	2100      	movs	r1, #0
 8004088:	f24d 6006 	movw	r0, #54790	; 0xd606
 800408c:	f7fc fcfa 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004090:	214a      	movs	r1, #74	; 0x4a
 8004092:	f24d 6007 	movw	r0, #54791	; 0xd607
 8004096:	f7fc fcf5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 800409a:	2100      	movs	r1, #0
 800409c:	f24d 6008 	movw	r0, #54792	; 0xd608
 80040a0:	f7fc fcf0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80040a4:	215c      	movs	r1, #92	; 0x5c
 80040a6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80040aa:	f7fc fceb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80040ae:	2100      	movs	r1, #0
 80040b0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80040b4:	f7fc fce6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80040b8:	2181      	movs	r1, #129	; 0x81
 80040ba:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80040be:	f7fc fce1 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80040c2:	2100      	movs	r1, #0
 80040c4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80040c8:	f7fc fcdc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80040cc:	21a6      	movs	r1, #166	; 0xa6
 80040ce:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80040d2:	f7fc fcd7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80040d6:	2100      	movs	r1, #0
 80040d8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80040dc:	f7fc fcd2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80040e0:	21e5      	movs	r1, #229	; 0xe5
 80040e2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80040e6:	f7fc fccd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80040ea:	2101      	movs	r1, #1
 80040ec:	f24d 6010 	movw	r0, #54800	; 0xd610
 80040f0:	f7fc fcc8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80040f4:	2113      	movs	r1, #19
 80040f6:	f24d 6011 	movw	r0, #54801	; 0xd611
 80040fa:	f7fc fcc3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80040fe:	2101      	movs	r1, #1
 8004100:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004104:	f7fc fcbe 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004108:	2154      	movs	r1, #84	; 0x54
 800410a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800410e:	f7fc fcb9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004112:	2101      	movs	r1, #1
 8004114:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004118:	f7fc fcb4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800411c:	2182      	movs	r1, #130	; 0x82
 800411e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004122:	f7fc fcaf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004126:	2101      	movs	r1, #1
 8004128:	f24d 6016 	movw	r0, #54806	; 0xd616
 800412c:	f7fc fcaa 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004130:	21ca      	movs	r1, #202	; 0xca
 8004132:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004136:	f7fc fca5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800413a:	2102      	movs	r1, #2
 800413c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004140:	f7fc fca0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004144:	2100      	movs	r1, #0
 8004146:	f24d 6019 	movw	r0, #54809	; 0xd619
 800414a:	f7fc fc9b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800414e:	2102      	movs	r1, #2
 8004150:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004154:	f7fc fc96 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004158:	2101      	movs	r1, #1
 800415a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800415e:	f7fc fc91 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004162:	2102      	movs	r1, #2
 8004164:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004168:	f7fc fc8c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800416c:	2134      	movs	r1, #52	; 0x34
 800416e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004172:	f7fc fc87 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004176:	2102      	movs	r1, #2
 8004178:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800417c:	f7fc fc82 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004180:	2167      	movs	r1, #103	; 0x67
 8004182:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004186:	f7fc fc7d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800418a:	2102      	movs	r1, #2
 800418c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004190:	f7fc fc78 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8004194:	2184      	movs	r1, #132	; 0x84
 8004196:	f24d 6021 	movw	r0, #54817	; 0xd621
 800419a:	f7fc fc73 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 800419e:	2102      	movs	r1, #2
 80041a0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80041a4:	f7fc fc6e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80041a8:	21a4      	movs	r1, #164	; 0xa4
 80041aa:	f24d 6023 	movw	r0, #54819	; 0xd623
 80041ae:	f7fc fc69 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80041b2:	2102      	movs	r1, #2
 80041b4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80041b8:	f7fc fc64 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80041bc:	21b7      	movs	r1, #183	; 0xb7
 80041be:	f24d 6025 	movw	r0, #54821	; 0xd625
 80041c2:	f7fc fc5f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80041c6:	2102      	movs	r1, #2
 80041c8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80041cc:	f7fc fc5a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80041d0:	21cf      	movs	r1, #207	; 0xcf
 80041d2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80041d6:	f7fc fc55 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80041da:	2102      	movs	r1, #2
 80041dc:	f24d 6028 	movw	r0, #54824	; 0xd628
 80041e0:	f7fc fc50 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80041e4:	21de      	movs	r1, #222	; 0xde
 80041e6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80041ea:	f7fc fc4b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80041ee:	2102      	movs	r1, #2
 80041f0:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80041f4:	f7fc fc46 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80041f8:	21f2      	movs	r1, #242	; 0xf2
 80041fa:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80041fe:	f7fc fc41 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004202:	2102      	movs	r1, #2
 8004204:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004208:	f7fc fc3c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800420c:	21fe      	movs	r1, #254	; 0xfe
 800420e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004212:	f7fc fc37 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004216:	2103      	movs	r1, #3
 8004218:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800421c:	f7fc fc32 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004220:	2110      	movs	r1, #16
 8004222:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004226:	f7fc fc2d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800422a:	2103      	movs	r1, #3
 800422c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004230:	f7fc fc28 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004234:	2133      	movs	r1, #51	; 0x33
 8004236:	f24d 6031 	movw	r0, #54833	; 0xd631
 800423a:	f7fc fc23 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800423e:	2103      	movs	r1, #3
 8004240:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004244:	f7fc fc1e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004248:	216d      	movs	r1, #109	; 0x6d
 800424a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800424e:	f7fc fc19 	bl	8000a84 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004252:	2155      	movs	r1, #85	; 0x55
 8004254:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004258:	f7fc fc14 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800425c:	21aa      	movs	r1, #170	; 0xaa
 800425e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004262:	f7fc fc0f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004266:	2152      	movs	r1, #82	; 0x52
 8004268:	f24f 0002 	movw	r0, #61442	; 0xf002
 800426c:	f7fc fc0a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004270:	2108      	movs	r1, #8
 8004272:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004276:	f7fc fc05 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800427a:	2100      	movs	r1, #0
 800427c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004280:	f7fc fc00 	bl	8000a84 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004284:	21cc      	movs	r1, #204	; 0xcc
 8004286:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800428a:	f7fc fbfb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800428e:	2100      	movs	r1, #0
 8004290:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004294:	f7fc fbf6 	bl	8000a84 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004298:	2105      	movs	r1, #5
 800429a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800429e:	f7fc fbf1 	bl	8000a84 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80042a2:	2170      	movs	r1, #112	; 0x70
 80042a4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80042a8:	f7fc fbec 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80042ac:	2170      	movs	r1, #112	; 0x70
 80042ae:	f24b 7001 	movw	r0, #46849	; 0xb701
 80042b2:	f7fc fbe7 	bl	8000a84 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80042b6:	2101      	movs	r1, #1
 80042b8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80042bc:	f7fc fbe2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80042c0:	2103      	movs	r1, #3
 80042c2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80042c6:	f7fc fbdd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80042ca:	2103      	movs	r1, #3
 80042cc:	f64b 0002 	movw	r0, #47106	; 0xb802
 80042d0:	f7fc fbd8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80042d4:	2103      	movs	r1, #3
 80042d6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80042da:	f7fc fbd3 	bl	8000a84 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80042de:	2102      	movs	r1, #2
 80042e0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80042e4:	f7fc fbce 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80042e8:	2100      	movs	r1, #0
 80042ea:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80042ee:	f7fc fbc9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80042f2:	2100      	movs	r1, #0
 80042f4:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80042f8:	f7fc fbc4 	bl	8000a84 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80042fc:	21d0      	movs	r1, #208	; 0xd0
 80042fe:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004302:	f7fc fbbf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004306:	2102      	movs	r1, #2
 8004308:	f64c 1001 	movw	r0, #51457	; 0xc901
 800430c:	f7fc fbba 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004310:	2150      	movs	r1, #80	; 0x50
 8004312:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004316:	f7fc fbb5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800431a:	2150      	movs	r1, #80	; 0x50
 800431c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004320:	f7fc fbb0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004324:	2150      	movs	r1, #80	; 0x50
 8004326:	f64c 1004 	movw	r0, #51460	; 0xc904
 800432a:	f7fc fbab 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800432e:	2100      	movs	r1, #0
 8004330:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004334:	f7fc fba6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004338:	2155      	movs	r1, #85	; 0x55
 800433a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800433e:	f7fc fba1 	bl	8000a84 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004342:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004346:	f7fc fb11 	bl	800096c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800434a:	2001      	movs	r0, #1
 800434c:	f002 f8e4 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004350:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004354:	f7fc fb0a 	bl	800096c <LCD_WR_REG>
 8004358:	f001 bd18 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800435c:	4bec      	ldr	r3, [pc, #944]	; (8004710 <LCD_Init+0x27b8>)
 800435e:	889b      	ldrh	r3, [r3, #4]
 8004360:	f249 3225 	movw	r2, #37669	; 0x9325
 8004364:	4293      	cmp	r3, r2
 8004366:	f040 80d7 	bne.w	8004518 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800436a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800436e:	20e5      	movs	r0, #229	; 0xe5
 8004370:	f7fc fb88 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004378:	2001      	movs	r0, #1
 800437a:	f7fc fb83 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800437e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004382:	2002      	movs	r0, #2
 8004384:	f7fc fb7e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004388:	f241 0130 	movw	r1, #4144	; 0x1030
 800438c:	2003      	movs	r0, #3
 800438e:	f7fc fb79 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004392:	2100      	movs	r1, #0
 8004394:	2004      	movs	r0, #4
 8004396:	f7fc fb75 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800439a:	f240 2102 	movw	r1, #514	; 0x202
 800439e:	2008      	movs	r0, #8
 80043a0:	f7fc fb70 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80043a4:	2100      	movs	r1, #0
 80043a6:	2009      	movs	r0, #9
 80043a8:	f7fc fb6c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80043ac:	2100      	movs	r1, #0
 80043ae:	200a      	movs	r0, #10
 80043b0:	f7fc fb68 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80043b4:	2100      	movs	r1, #0
 80043b6:	200c      	movs	r0, #12
 80043b8:	f7fc fb64 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80043bc:	2100      	movs	r1, #0
 80043be:	200d      	movs	r0, #13
 80043c0:	f7fc fb60 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80043c4:	2100      	movs	r1, #0
 80043c6:	200f      	movs	r0, #15
 80043c8:	f7fc fb5c 	bl	8000a84 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80043cc:	2100      	movs	r1, #0
 80043ce:	2010      	movs	r0, #16
 80043d0:	f7fc fb58 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80043d4:	2107      	movs	r1, #7
 80043d6:	2011      	movs	r0, #17
 80043d8:	f7fc fb54 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80043dc:	2100      	movs	r1, #0
 80043de:	2012      	movs	r0, #18
 80043e0:	f7fc fb50 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80043e4:	2100      	movs	r1, #0
 80043e6:	2013      	movs	r0, #19
 80043e8:	f7fc fb4c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80043ec:	2100      	movs	r1, #0
 80043ee:	2007      	movs	r0, #7
 80043f0:	f7fc fb48 	bl	8000a84 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80043f4:	f241 6190 	movw	r1, #5776	; 0x1690
 80043f8:	2010      	movs	r0, #16
 80043fa:	f7fc fb43 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80043fe:	f240 2127 	movw	r1, #551	; 0x227
 8004402:	2011      	movs	r0, #17
 8004404:	f7fc fb3e 	bl	8000a84 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004408:	219d      	movs	r1, #157	; 0x9d
 800440a:	2012      	movs	r0, #18
 800440c:	f7fc fb3a 	bl	8000a84 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004410:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004414:	2013      	movs	r0, #19
 8004416:	f7fc fb35 	bl	8000a84 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800441a:	2125      	movs	r1, #37	; 0x25
 800441c:	2029      	movs	r0, #41	; 0x29
 800441e:	f7fc fb31 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004422:	210d      	movs	r1, #13
 8004424:	202b      	movs	r0, #43	; 0x2b
 8004426:	f7fc fb2d 	bl	8000a84 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800442a:	2107      	movs	r1, #7
 800442c:	2030      	movs	r0, #48	; 0x30
 800442e:	f7fc fb29 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004432:	f240 3103 	movw	r1, #771	; 0x303
 8004436:	2031      	movs	r0, #49	; 0x31
 8004438:	f7fc fb24 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800443c:	2103      	movs	r1, #3
 800443e:	2032      	movs	r0, #50	; 0x32
 8004440:	f7fc fb20 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004444:	f240 2106 	movw	r1, #518	; 0x206
 8004448:	2035      	movs	r0, #53	; 0x35
 800444a:	f7fc fb1b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800444e:	2108      	movs	r1, #8
 8004450:	2036      	movs	r0, #54	; 0x36
 8004452:	f7fc fb17 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004456:	f240 4106 	movw	r1, #1030	; 0x406
 800445a:	2037      	movs	r0, #55	; 0x37
 800445c:	f7fc fb12 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004460:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004464:	2038      	movs	r0, #56	; 0x38
 8004466:	f7fc fb0d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800446a:	2107      	movs	r1, #7
 800446c:	2039      	movs	r0, #57	; 0x39
 800446e:	f7fc fb09 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004472:	f240 6102 	movw	r1, #1538	; 0x602
 8004476:	203c      	movs	r0, #60	; 0x3c
 8004478:	f7fc fb04 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800447c:	2108      	movs	r1, #8
 800447e:	203d      	movs	r0, #61	; 0x3d
 8004480:	f7fc fb00 	bl	8000a84 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004484:	2100      	movs	r1, #0
 8004486:	2050      	movs	r0, #80	; 0x50
 8004488:	f7fc fafc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800448c:	21ef      	movs	r1, #239	; 0xef
 800448e:	2051      	movs	r0, #81	; 0x51
 8004490:	f7fc faf8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004494:	2100      	movs	r1, #0
 8004496:	2052      	movs	r0, #82	; 0x52
 8004498:	f7fc faf4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800449c:	f240 113f 	movw	r1, #319	; 0x13f
 80044a0:	2053      	movs	r0, #83	; 0x53
 80044a2:	f7fc faef 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80044a6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80044aa:	2060      	movs	r0, #96	; 0x60
 80044ac:	f7fc faea 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80044b0:	2101      	movs	r1, #1
 80044b2:	2061      	movs	r0, #97	; 0x61
 80044b4:	f7fc fae6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80044b8:	2100      	movs	r1, #0
 80044ba:	206a      	movs	r0, #106	; 0x6a
 80044bc:	f7fc fae2 	bl	8000a84 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80044c0:	2100      	movs	r1, #0
 80044c2:	2080      	movs	r0, #128	; 0x80
 80044c4:	f7fc fade 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80044c8:	2100      	movs	r1, #0
 80044ca:	2081      	movs	r0, #129	; 0x81
 80044cc:	f7fc fada 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80044d0:	2100      	movs	r1, #0
 80044d2:	2082      	movs	r0, #130	; 0x82
 80044d4:	f7fc fad6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80044d8:	2100      	movs	r1, #0
 80044da:	2083      	movs	r0, #131	; 0x83
 80044dc:	f7fc fad2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80044e0:	2100      	movs	r1, #0
 80044e2:	2084      	movs	r0, #132	; 0x84
 80044e4:	f7fc face 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2085      	movs	r0, #133	; 0x85
 80044ec:	f7fc faca 	bl	8000a84 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80044f0:	2110      	movs	r1, #16
 80044f2:	2090      	movs	r0, #144	; 0x90
 80044f4:	f7fc fac6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80044f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044fc:	2092      	movs	r0, #146	; 0x92
 80044fe:	f7fc fac1 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004502:	f240 1133 	movw	r1, #307	; 0x133
 8004506:	2007      	movs	r0, #7
 8004508:	f7fc fabc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800450c:	2122      	movs	r1, #34	; 0x22
 800450e:	2000      	movs	r0, #0
 8004510:	f7fc fab8 	bl	8000a84 <LCD_WriteReg>
 8004514:	f001 bc3a 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004518:	4b7d      	ldr	r3, [pc, #500]	; (8004710 <LCD_Init+0x27b8>)
 800451a:	889b      	ldrh	r3, [r3, #4]
 800451c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004520:	4293      	cmp	r3, r2
 8004522:	f040 80f7 	bne.w	8004714 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004526:	f241 018f 	movw	r1, #4239	; 0x108f
 800452a:	20ec      	movs	r0, #236	; 0xec
 800452c:	f7fc faaa 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004530:	f241 2134 	movw	r1, #4660	; 0x1234
 8004534:	20ef      	movs	r0, #239	; 0xef
 8004536:	f7fc faa5 	bl	8000a84 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800453a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800453e:	2001      	movs	r0, #1
 8004540:	f7fc faa0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004544:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004548:	2002      	movs	r0, #2
 800454a:	f7fc fa9b 	bl	8000a84 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800454e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004552:	2003      	movs	r0, #3
 8004554:	f7fc fa96 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004558:	2100      	movs	r1, #0
 800455a:	2004      	movs	r0, #4
 800455c:	f7fc fa92 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004560:	f240 2102 	movw	r1, #514	; 0x202
 8004564:	2008      	movs	r0, #8
 8004566:	f7fc fa8d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800456a:	2100      	movs	r1, #0
 800456c:	2009      	movs	r0, #9
 800456e:	f7fc fa89 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004572:	2100      	movs	r1, #0
 8004574:	200a      	movs	r0, #10
 8004576:	f7fc fa85 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800457a:	2101      	movs	r1, #1
 800457c:	200c      	movs	r0, #12
 800457e:	f7fc fa81 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004582:	2100      	movs	r1, #0
 8004584:	200d      	movs	r0, #13
 8004586:	f7fc fa7d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800458a:	2100      	movs	r1, #0
 800458c:	200f      	movs	r0, #15
 800458e:	f7fc fa79 	bl	8000a84 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004592:	2100      	movs	r1, #0
 8004594:	2010      	movs	r0, #16
 8004596:	f7fc fa75 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800459a:	2107      	movs	r1, #7
 800459c:	2011      	movs	r0, #17
 800459e:	f7fc fa71 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80045a2:	2100      	movs	r1, #0
 80045a4:	2012      	movs	r0, #18
 80045a6:	f7fc fa6d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80045aa:	2100      	movs	r1, #0
 80045ac:	2013      	movs	r0, #19
 80045ae:	f7fc fa69 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80045b2:	2101      	movs	r1, #1
 80045b4:	2007      	movs	r0, #7
 80045b6:	f7fc fa65 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 80045ba:	2032      	movs	r0, #50	; 0x32
 80045bc:	f001 ffac 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80045c0:	f241 4190 	movw	r1, #5264	; 0x1490
 80045c4:	2010      	movs	r0, #16
 80045c6:	f7fc fa5d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80045ca:	f240 2127 	movw	r1, #551	; 0x227
 80045ce:	2011      	movs	r0, #17
 80045d0:	f7fc fa58 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 80045d4:	2032      	movs	r0, #50	; 0x32
 80045d6:	f001 ff9f 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80045da:	218a      	movs	r1, #138	; 0x8a
 80045dc:	2012      	movs	r0, #18
 80045de:	f7fc fa51 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 80045e2:	2032      	movs	r0, #50	; 0x32
 80045e4:	f001 ff98 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80045e8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80045ec:	2013      	movs	r0, #19
 80045ee:	f7fc fa49 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80045f2:	2106      	movs	r1, #6
 80045f4:	2029      	movs	r0, #41	; 0x29
 80045f6:	f7fc fa45 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80045fa:	210d      	movs	r1, #13
 80045fc:	202b      	movs	r0, #43	; 0x2b
 80045fe:	f7fc fa41 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004602:	2032      	movs	r0, #50	; 0x32
 8004604:	f001 ff88 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004608:	2100      	movs	r1, #0
 800460a:	2020      	movs	r0, #32
 800460c:	f7fc fa3a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004610:	2100      	movs	r1, #0
 8004612:	2021      	movs	r0, #33	; 0x21
 8004614:	f7fc fa36 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004618:	2032      	movs	r0, #50	; 0x32
 800461a:	f001 ff7d 	bl	8006518 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800461e:	2100      	movs	r1, #0
 8004620:	2030      	movs	r0, #48	; 0x30
 8004622:	f7fc fa2f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004626:	f240 6104 	movw	r1, #1540	; 0x604
 800462a:	2031      	movs	r0, #49	; 0x31
 800462c:	f7fc fa2a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004630:	f240 3105 	movw	r1, #773	; 0x305
 8004634:	2032      	movs	r0, #50	; 0x32
 8004636:	f7fc fa25 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800463a:	2100      	movs	r1, #0
 800463c:	2035      	movs	r0, #53	; 0x35
 800463e:	f7fc fa21 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004642:	f640 4109 	movw	r1, #3081	; 0xc09
 8004646:	2036      	movs	r0, #54	; 0x36
 8004648:	f7fc fa1c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800464c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004650:	2037      	movs	r0, #55	; 0x37
 8004652:	f7fc fa17 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004656:	f240 3101 	movw	r1, #769	; 0x301
 800465a:	2038      	movs	r0, #56	; 0x38
 800465c:	f7fc fa12 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004660:	f240 7107 	movw	r1, #1799	; 0x707
 8004664:	2039      	movs	r0, #57	; 0x39
 8004666:	f7fc fa0d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800466a:	2100      	movs	r1, #0
 800466c:	203c      	movs	r0, #60	; 0x3c
 800466e:	f7fc fa09 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004672:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004676:	203d      	movs	r0, #61	; 0x3d
 8004678:	f7fc fa04 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 800467c:	2032      	movs	r0, #50	; 0x32
 800467e:	f001 ff4b 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004682:	2100      	movs	r1, #0
 8004684:	2050      	movs	r0, #80	; 0x50
 8004686:	f7fc f9fd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800468a:	21ef      	movs	r1, #239	; 0xef
 800468c:	2051      	movs	r0, #81	; 0x51
 800468e:	f7fc f9f9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004692:	2100      	movs	r1, #0
 8004694:	2052      	movs	r0, #82	; 0x52
 8004696:	f7fc f9f5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800469a:	f240 113f 	movw	r1, #319	; 0x13f
 800469e:	2053      	movs	r0, #83	; 0x53
 80046a0:	f7fc f9f0 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80046a4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046a8:	2060      	movs	r0, #96	; 0x60
 80046aa:	f7fc f9eb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046ae:	2101      	movs	r1, #1
 80046b0:	2061      	movs	r0, #97	; 0x61
 80046b2:	f7fc f9e7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80046b6:	2100      	movs	r1, #0
 80046b8:	206a      	movs	r0, #106	; 0x6a
 80046ba:	f7fc f9e3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80046be:	2100      	movs	r1, #0
 80046c0:	2080      	movs	r0, #128	; 0x80
 80046c2:	f7fc f9df 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046c6:	2100      	movs	r1, #0
 80046c8:	2081      	movs	r0, #129	; 0x81
 80046ca:	f7fc f9db 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046ce:	2100      	movs	r1, #0
 80046d0:	2082      	movs	r0, #130	; 0x82
 80046d2:	f7fc f9d7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046d6:	2100      	movs	r1, #0
 80046d8:	2083      	movs	r0, #131	; 0x83
 80046da:	f7fc f9d3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80046de:	2100      	movs	r1, #0
 80046e0:	2084      	movs	r0, #132	; 0x84
 80046e2:	f7fc f9cf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80046e6:	2100      	movs	r1, #0
 80046e8:	2085      	movs	r0, #133	; 0x85
 80046ea:	f7fc f9cb 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80046ee:	2110      	movs	r1, #16
 80046f0:	2090      	movs	r0, #144	; 0x90
 80046f2:	f7fc f9c7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80046f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046fa:	2092      	movs	r0, #146	; 0x92
 80046fc:	f7fc f9c2 	bl	8000a84 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004700:	f240 1133 	movw	r1, #307	; 0x133
 8004704:	2007      	movs	r0, #7
 8004706:	f7fc f9bd 	bl	8000a84 <LCD_WriteReg>
 800470a:	f001 bb3f 	b.w	8005d8c <LCD_Init+0x3e34>
 800470e:	bf00      	nop
 8004710:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x9320) //测试OK.
 8004714:	4bce      	ldr	r3, [pc, #824]	; (8004a50 <LCD_Init+0x2af8>)
 8004716:	889b      	ldrh	r3, [r3, #4]
 8004718:	f249 3220 	movw	r2, #37664	; 0x9320
 800471c:	4293      	cmp	r3, r2
 800471e:	f040 80ad 	bne.w	800487c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004722:	2100      	movs	r1, #0
 8004724:	2000      	movs	r0, #0
 8004726:	f7fc f9ad 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800472a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800472e:	2001      	movs	r0, #1
 8004730:	f7fc f9a8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004734:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004738:	2002      	movs	r0, #2
 800473a:	f7fc f9a3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800473e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004742:	2003      	movs	r0, #3
 8004744:	f7fc f99e 	bl	8000a84 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004748:	2100      	movs	r1, #0
 800474a:	2004      	movs	r0, #4
 800474c:	f7fc f99a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004750:	f240 2102 	movw	r1, #514	; 0x202
 8004754:	2008      	movs	r0, #8
 8004756:	f7fc f995 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800475a:	2100      	movs	r1, #0
 800475c:	2009      	movs	r0, #9
 800475e:	f7fc f991 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004762:	2100      	movs	r1, #0
 8004764:	200a      	movs	r0, #10
 8004766:	f7fc f98d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800476a:	2101      	movs	r1, #1
 800476c:	200c      	movs	r0, #12
 800476e:	f7fc f989 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004772:	2100      	movs	r1, #0
 8004774:	200d      	movs	r0, #13
 8004776:	f7fc f985 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800477a:	2100      	movs	r1, #0
 800477c:	200f      	movs	r0, #15
 800477e:	f7fc f981 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004782:	2032      	movs	r0, #50	; 0x32
 8004784:	f001 fec8 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004788:	f240 1101 	movw	r1, #257	; 0x101
 800478c:	2007      	movs	r0, #7
 800478e:	f7fc f979 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004792:	2032      	movs	r0, #50	; 0x32
 8004794:	f001 fec0 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004798:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800479c:	2010      	movs	r0, #16
 800479e:	f7fc f971 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80047a2:	2107      	movs	r1, #7
 80047a4:	2011      	movs	r0, #17
 80047a6:	f7fc f96d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80047aa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047ae:	2012      	movs	r0, #18
 80047b0:	f7fc f968 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80047b4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80047b8:	2013      	movs	r0, #19
 80047ba:	f7fc f963 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80047be:	2100      	movs	r1, #0
 80047c0:	2029      	movs	r0, #41	; 0x29
 80047c2:	f7fc f95f 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80047c6:	f244 0110 	movw	r1, #16400	; 0x4010
 80047ca:	202b      	movs	r0, #43	; 0x2b
 80047cc:	f7fc f95a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80047d0:	2100      	movs	r1, #0
 80047d2:	2050      	movs	r0, #80	; 0x50
 80047d4:	f7fc f956 	bl	8000a84 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80047d8:	21ef      	movs	r1, #239	; 0xef
 80047da:	2051      	movs	r0, #81	; 0x51
 80047dc:	f7fc f952 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80047e0:	2100      	movs	r1, #0
 80047e2:	2052      	movs	r0, #82	; 0x52
 80047e4:	f7fc f94e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80047e8:	f240 113f 	movw	r1, #319	; 0x13f
 80047ec:	2053      	movs	r0, #83	; 0x53
 80047ee:	f7fc f949 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80047f2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80047f6:	2060      	movs	r0, #96	; 0x60
 80047f8:	f7fc f944 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80047fc:	2101      	movs	r1, #1
 80047fe:	2061      	movs	r0, #97	; 0x61
 8004800:	f7fc f940 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004804:	2100      	movs	r1, #0
 8004806:	206a      	movs	r0, #106	; 0x6a
 8004808:	f7fc f93c 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800480c:	2100      	movs	r1, #0
 800480e:	2080      	movs	r0, #128	; 0x80
 8004810:	f7fc f938 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004814:	2100      	movs	r1, #0
 8004816:	2081      	movs	r0, #129	; 0x81
 8004818:	f7fc f934 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800481c:	2100      	movs	r1, #0
 800481e:	2082      	movs	r0, #130	; 0x82
 8004820:	f7fc f930 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004824:	2100      	movs	r1, #0
 8004826:	2083      	movs	r0, #131	; 0x83
 8004828:	f7fc f92c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800482c:	2100      	movs	r1, #0
 800482e:	2084      	movs	r0, #132	; 0x84
 8004830:	f7fc f928 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004834:	2100      	movs	r1, #0
 8004836:	2085      	movs	r0, #133	; 0x85
 8004838:	f7fc f924 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800483c:	2110      	movs	r1, #16
 800483e:	2090      	movs	r0, #144	; 0x90
 8004840:	f7fc f920 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004844:	2100      	movs	r1, #0
 8004846:	2092      	movs	r0, #146	; 0x92
 8004848:	f7fc f91c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800484c:	2101      	movs	r1, #1
 800484e:	2093      	movs	r0, #147	; 0x93
 8004850:	f7fc f918 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004854:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004858:	2095      	movs	r0, #149	; 0x95
 800485a:	f7fc f913 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800485e:	2100      	movs	r1, #0
 8004860:	2097      	movs	r0, #151	; 0x97
 8004862:	f7fc f90f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004866:	2100      	movs	r1, #0
 8004868:	2098      	movs	r0, #152	; 0x98
 800486a:	f7fc f90b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800486e:	f240 1173 	movw	r1, #371	; 0x173
 8004872:	2007      	movs	r0, #7
 8004874:	f7fc f906 	bl	8000a84 <LCD_WriteReg>
 8004878:	f001 ba88 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800487c:	4b74      	ldr	r3, [pc, #464]	; (8004a50 <LCD_Init+0x2af8>)
 800487e:	889b      	ldrh	r3, [r3, #4]
 8004880:	f249 3231 	movw	r2, #37681	; 0x9331
 8004884:	4293      	cmp	r3, r2
 8004886:	f040 80e5 	bne.w	8004a54 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800488a:	f241 0114 	movw	r1, #4116	; 0x1014
 800488e:	20e7      	movs	r0, #231	; 0xe7
 8004890:	f7fc f8f8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004898:	2001      	movs	r0, #1
 800489a:	f7fc f8f3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800489e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048a2:	2002      	movs	r0, #2
 80048a4:	f7fc f8ee 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80048a8:	f241 0138 	movw	r1, #4152	; 0x1038
 80048ac:	2003      	movs	r0, #3
 80048ae:	f7fc f8e9 	bl	8000a84 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80048b2:	f240 2102 	movw	r1, #514	; 0x202
 80048b6:	2008      	movs	r0, #8
 80048b8:	f7fc f8e4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80048bc:	2100      	movs	r1, #0
 80048be:	2009      	movs	r0, #9
 80048c0:	f7fc f8e0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80048c4:	2100      	movs	r1, #0
 80048c6:	200a      	movs	r0, #10
 80048c8:	f7fc f8dc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80048cc:	2100      	movs	r1, #0
 80048ce:	200c      	movs	r0, #12
 80048d0:	f7fc f8d8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80048d4:	2100      	movs	r1, #0
 80048d6:	200d      	movs	r0, #13
 80048d8:	f7fc f8d4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80048dc:	2100      	movs	r1, #0
 80048de:	200f      	movs	r0, #15
 80048e0:	f7fc f8d0 	bl	8000a84 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80048e4:	2100      	movs	r1, #0
 80048e6:	2010      	movs	r0, #16
 80048e8:	f7fc f8cc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80048ec:	2107      	movs	r1, #7
 80048ee:	2011      	movs	r0, #17
 80048f0:	f7fc f8c8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80048f4:	2100      	movs	r1, #0
 80048f6:	2012      	movs	r0, #18
 80048f8:	f7fc f8c4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80048fc:	2100      	movs	r1, #0
 80048fe:	2013      	movs	r0, #19
 8004900:	f7fc f8c0 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004904:	20c8      	movs	r0, #200	; 0xc8
 8004906:	f001 fe07 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800490a:	f241 6190 	movw	r1, #5776	; 0x1690
 800490e:	2010      	movs	r0, #16
 8004910:	f7fc f8b8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004914:	f240 2127 	movw	r1, #551	; 0x227
 8004918:	2011      	movs	r0, #17
 800491a:	f7fc f8b3 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800491e:	2032      	movs	r0, #50	; 0x32
 8004920:	f001 fdfa 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004924:	210c      	movs	r1, #12
 8004926:	2012      	movs	r0, #18
 8004928:	f7fc f8ac 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800492c:	2032      	movs	r0, #50	; 0x32
 800492e:	f001 fdf3 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004936:	2013      	movs	r0, #19
 8004938:	f7fc f8a4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800493c:	2111      	movs	r1, #17
 800493e:	2029      	movs	r0, #41	; 0x29
 8004940:	f7fc f8a0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004944:	210b      	movs	r1, #11
 8004946:	202b      	movs	r0, #43	; 0x2b
 8004948:	f7fc f89c 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800494c:	2032      	movs	r0, #50	; 0x32
 800494e:	f001 fde3 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004952:	2100      	movs	r1, #0
 8004954:	2020      	movs	r0, #32
 8004956:	f7fc f895 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800495a:	f240 113f 	movw	r1, #319	; 0x13f
 800495e:	2021      	movs	r0, #33	; 0x21
 8004960:	f7fc f890 	bl	8000a84 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004964:	2100      	movs	r1, #0
 8004966:	2030      	movs	r0, #48	; 0x30
 8004968:	f7fc f88c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800496c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004970:	2031      	movs	r0, #49	; 0x31
 8004972:	f7fc f887 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004976:	2100      	movs	r1, #0
 8004978:	2032      	movs	r0, #50	; 0x32
 800497a:	f7fc f883 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800497e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004982:	2035      	movs	r0, #53	; 0x35
 8004984:	f7fc f87e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004988:	f241 610a 	movw	r1, #5642	; 0x160a
 800498c:	2036      	movs	r0, #54	; 0x36
 800498e:	f7fc f879 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004992:	f240 7107 	movw	r1, #1799	; 0x707
 8004996:	2037      	movs	r0, #55	; 0x37
 8004998:	f7fc f874 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800499c:	f44f 7183 	mov.w	r1, #262	; 0x106
 80049a0:	2038      	movs	r0, #56	; 0x38
 80049a2:	f7fc f86f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80049a6:	f240 7107 	movw	r1, #1799	; 0x707
 80049aa:	2039      	movs	r0, #57	; 0x39
 80049ac:	f7fc f86a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80049b0:	f240 4102 	movw	r1, #1026	; 0x402
 80049b4:	203c      	movs	r0, #60	; 0x3c
 80049b6:	f7fc f865 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80049ba:	f640 410f 	movw	r1, #3087	; 0xc0f
 80049be:	203d      	movs	r0, #61	; 0x3d
 80049c0:	f7fc f860 	bl	8000a84 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80049c4:	2100      	movs	r1, #0
 80049c6:	2050      	movs	r0, #80	; 0x50
 80049c8:	f7fc f85c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80049cc:	21ef      	movs	r1, #239	; 0xef
 80049ce:	2051      	movs	r0, #81	; 0x51
 80049d0:	f7fc f858 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80049d4:	2100      	movs	r1, #0
 80049d6:	2052      	movs	r0, #82	; 0x52
 80049d8:	f7fc f854 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80049dc:	f240 113f 	movw	r1, #319	; 0x13f
 80049e0:	2053      	movs	r0, #83	; 0x53
 80049e2:	f7fc f84f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80049e6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80049ea:	2060      	movs	r0, #96	; 0x60
 80049ec:	f7fc f84a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80049f0:	2101      	movs	r1, #1
 80049f2:	2061      	movs	r0, #97	; 0x61
 80049f4:	f7fc f846 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80049f8:	2100      	movs	r1, #0
 80049fa:	206a      	movs	r0, #106	; 0x6a
 80049fc:	f7fc f842 	bl	8000a84 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004a00:	2100      	movs	r1, #0
 8004a02:	2080      	movs	r0, #128	; 0x80
 8004a04:	f7fc f83e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2081      	movs	r0, #129	; 0x81
 8004a0c:	f7fc f83a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a10:	2100      	movs	r1, #0
 8004a12:	2082      	movs	r0, #130	; 0x82
 8004a14:	f7fc f836 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2083      	movs	r0, #131	; 0x83
 8004a1c:	f7fc f832 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a20:	2100      	movs	r1, #0
 8004a22:	2084      	movs	r0, #132	; 0x84
 8004a24:	f7fc f82e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2085      	movs	r0, #133	; 0x85
 8004a2c:	f7fc f82a 	bl	8000a84 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004a30:	2110      	movs	r1, #16
 8004a32:	2090      	movs	r0, #144	; 0x90
 8004a34:	f7fc f826 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a38:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a3c:	2092      	movs	r0, #146	; 0x92
 8004a3e:	f7fc f821 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004a42:	f240 1133 	movw	r1, #307	; 0x133
 8004a46:	2007      	movs	r0, #7
 8004a48:	f7fc f81c 	bl	8000a84 <LCD_WriteReg>
 8004a4c:	f001 b99e 	b.w	8005d8c <LCD_Init+0x3e34>
 8004a50:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5408) {
 8004a54:	4be2      	ldr	r3, [pc, #904]	; (8004de0 <LCD_Init+0x2e88>)
 8004a56:	889b      	ldrh	r3, [r3, #4]
 8004a58:	f245 4208 	movw	r2, #21512	; 0x5408
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	f040 80a3 	bne.w	8004ba8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a66:	2001      	movs	r0, #1
 8004a68:	f7fc f80c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004a6c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a70:	2002      	movs	r0, #2
 8004a72:	f7fc f807 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004a76:	f241 0130 	movw	r1, #4144	; 0x1030
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f7fc f802 	bl	8000a84 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004a80:	2100      	movs	r1, #0
 8004a82:	2004      	movs	r0, #4
 8004a84:	f7fb fffe 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004a88:	f240 2107 	movw	r1, #519	; 0x207
 8004a8c:	2008      	movs	r0, #8
 8004a8e:	f7fb fff9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004a92:	2100      	movs	r1, #0
 8004a94:	2009      	movs	r0, #9
 8004a96:	f7fb fff5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	200a      	movs	r0, #10
 8004a9e:	f7fb fff1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	200c      	movs	r0, #12
 8004aa6:	f7fb ffed 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004aaa:	2100      	movs	r1, #0
 8004aac:	200d      	movs	r0, #13
 8004aae:	f7fb ffe9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	200f      	movs	r0, #15
 8004ab6:	f7fb ffe5 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004aba:	2014      	movs	r0, #20
 8004abc:	f001 fd2c 	bl	8006518 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004ac0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004ac4:	2010      	movs	r0, #16
 8004ac6:	f7fb ffdd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004aca:	2101      	movs	r1, #1
 8004acc:	2011      	movs	r0, #17
 8004ace:	f7fb ffd9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	2017      	movs	r0, #23
 8004ad6:	f7fb ffd5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004ada:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004ade:	2012      	movs	r0, #18
 8004ae0:	f7fb ffd0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ae8:	2013      	movs	r0, #19
 8004aea:	f7fb ffcb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004aee:	2109      	movs	r1, #9
 8004af0:	2029      	movs	r0, #41	; 0x29
 8004af2:	f7fb ffc7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004af6:	2109      	movs	r1, #9
 8004af8:	202a      	movs	r0, #42	; 0x2a
 8004afa:	f7fb ffc3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004afe:	2100      	movs	r1, #0
 8004b00:	20a4      	movs	r0, #164	; 0xa4
 8004b02:	f7fb ffbf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004b06:	2100      	movs	r1, #0
 8004b08:	2050      	movs	r0, #80	; 0x50
 8004b0a:	f7fb ffbb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004b0e:	21ef      	movs	r1, #239	; 0xef
 8004b10:	2051      	movs	r0, #81	; 0x51
 8004b12:	f7fb ffb7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004b16:	2100      	movs	r1, #0
 8004b18:	2052      	movs	r0, #82	; 0x52
 8004b1a:	f7fb ffb3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004b1e:	f240 113f 	movw	r1, #319	; 0x13f
 8004b22:	2053      	movs	r0, #83	; 0x53
 8004b24:	f7fb ffae 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004b28:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b2c:	2060      	movs	r0, #96	; 0x60
 8004b2e:	f7fb ffa9 	bl	8000a84 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004b32:	2101      	movs	r1, #1
 8004b34:	2061      	movs	r0, #97	; 0x61
 8004b36:	f7fb ffa5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	206a      	movs	r0, #106	; 0x6a
 8004b3e:	f7fb ffa1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004b42:	2100      	movs	r1, #0
 8004b44:	2080      	movs	r0, #128	; 0x80
 8004b46:	f7fb ff9d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2081      	movs	r0, #129	; 0x81
 8004b4e:	f7fb ff99 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004b52:	2100      	movs	r1, #0
 8004b54:	2082      	movs	r0, #130	; 0x82
 8004b56:	f7fb ff95 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	2083      	movs	r0, #131	; 0x83
 8004b5e:	f7fb ff91 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004b62:	2100      	movs	r1, #0
 8004b64:	2084      	movs	r0, #132	; 0x84
 8004b66:	f7fb ff8d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	2085      	movs	r0, #133	; 0x85
 8004b6e:	f7fb ff89 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004b72:	2113      	movs	r1, #19
 8004b74:	2090      	movs	r0, #144	; 0x90
 8004b76:	f7fb ff85 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	2092      	movs	r0, #146	; 0x92
 8004b7e:	f7fb ff81 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004b82:	2103      	movs	r1, #3
 8004b84:	2093      	movs	r0, #147	; 0x93
 8004b86:	f7fb ff7d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004b8a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004b8e:	2095      	movs	r0, #149	; 0x95
 8004b90:	f7fb ff78 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004b94:	f240 1173 	movw	r1, #371	; 0x173
 8004b98:	2007      	movs	r0, #7
 8004b9a:	f7fb ff73 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004b9e:	2032      	movs	r0, #50	; 0x32
 8004ba0:	f001 fcba 	bl	8006518 <HAL_Delay>
 8004ba4:	f001 b8f2 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004ba8:	4b8d      	ldr	r3, [pc, #564]	; (8004de0 <LCD_Init+0x2e88>)
 8004baa:	889b      	ldrh	r3, [r3, #4]
 8004bac:	f241 5205 	movw	r2, #5381	; 0x1505
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f040 8117 	bne.w	8004de4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2007      	movs	r0, #7
 8004bba:	f7fb ff63 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004bbe:	2032      	movs	r0, #50	; 0x32
 8004bc0:	f001 fcaa 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004bc4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004bc8:	2012      	movs	r0, #18
 8004bca:	f7fb ff5b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004bce:	2101      	movs	r1, #1
 8004bd0:	20a4      	movs	r0, #164	; 0xa4
 8004bd2:	f7fb ff57 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004bd6:	210f      	movs	r1, #15
 8004bd8:	2008      	movs	r0, #8
 8004bda:	f7fb ff53 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004bde:	2108      	movs	r1, #8
 8004be0:	200a      	movs	r0, #10
 8004be2:	f7fb ff4f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004be6:	2108      	movs	r1, #8
 8004be8:	200d      	movs	r0, #13
 8004bea:	f7fb ff4b 	bl	8000a84 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004bee:	f240 7107 	movw	r1, #1799	; 0x707
 8004bf2:	2030      	movs	r0, #48	; 0x30
 8004bf4:	f7fb ff46 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004bf8:	2107      	movs	r1, #7
 8004bfa:	2031      	movs	r0, #49	; 0x31
 8004bfc:	f7fb ff42 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004c00:	f240 6103 	movw	r1, #1539	; 0x603
 8004c04:	2032      	movs	r0, #50	; 0x32
 8004c06:	f7fb ff3d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004c0a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c0e:	2033      	movs	r0, #51	; 0x33
 8004c10:	f7fb ff38 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004c14:	f240 2102 	movw	r1, #514	; 0x202
 8004c18:	2034      	movs	r0, #52	; 0x34
 8004c1a:	f7fb ff33 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004c1e:	2102      	movs	r1, #2
 8004c20:	2035      	movs	r0, #53	; 0x35
 8004c22:	f7fb ff2f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004c26:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004c2a:	2036      	movs	r0, #54	; 0x36
 8004c2c:	f7fb ff2a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004c30:	f240 7107 	movw	r1, #1799	; 0x707
 8004c34:	2037      	movs	r0, #55	; 0x37
 8004c36:	f7fb ff25 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	2038      	movs	r0, #56	; 0x38
 8004c3e:	f7fb ff21 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004c42:	2100      	movs	r1, #0
 8004c44:	2039      	movs	r0, #57	; 0x39
 8004c46:	f7fb ff1d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004c4a:	f240 7107 	movw	r1, #1799	; 0x707
 8004c4e:	203a      	movs	r0, #58	; 0x3a
 8004c50:	f7fb ff18 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004c54:	2100      	movs	r1, #0
 8004c56:	203b      	movs	r0, #59	; 0x3b
 8004c58:	f7fb ff14 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004c5c:	2107      	movs	r1, #7
 8004c5e:	203c      	movs	r0, #60	; 0x3c
 8004c60:	f7fb ff10 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004c64:	2100      	movs	r1, #0
 8004c66:	203d      	movs	r0, #61	; 0x3d
 8004c68:	f7fb ff0c 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004c6c:	2032      	movs	r0, #50	; 0x32
 8004c6e:	f001 fc53 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004c72:	2101      	movs	r1, #1
 8004c74:	2007      	movs	r0, #7
 8004c76:	f7fb ff05 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	2017      	movs	r0, #23
 8004c7e:	f7fb ff01 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(50);
 8004c82:	2032      	movs	r0, #50	; 0x32
 8004c84:	f001 fc48 	bl	8006518 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004c88:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004c8c:	2010      	movs	r0, #16
 8004c8e:	f7fb fef9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004c92:	f240 2117 	movw	r1, #535	; 0x217
 8004c96:	2011      	movs	r0, #17
 8004c98:	f7fb fef4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004c9c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004ca0:	2012      	movs	r0, #18
 8004ca2:	f7fb feef 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004ca6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004caa:	2013      	movs	r0, #19
 8004cac:	f7fb feea 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	202a      	movs	r0, #42	; 0x2a
 8004cb4:	f7fb fee6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004cb8:	210a      	movs	r1, #10
 8004cba:	2029      	movs	r0, #41	; 0x29
 8004cbc:	f7fb fee2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004cc0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004cc4:	2012      	movs	r0, #18
 8004cc6:	f7fb fedd 	bl	8000a84 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004cca:	2100      	movs	r1, #0
 8004ccc:	2050      	movs	r0, #80	; 0x50
 8004cce:	f7fb fed9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004cd2:	21ef      	movs	r1, #239	; 0xef
 8004cd4:	2051      	movs	r0, #81	; 0x51
 8004cd6:	f7fb fed5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004cda:	2100      	movs	r1, #0
 8004cdc:	2052      	movs	r0, #82	; 0x52
 8004cde:	f7fb fed1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004ce2:	f240 113f 	movw	r1, #319	; 0x13f
 8004ce6:	2053      	movs	r0, #83	; 0x53
 8004ce8:	f7fb fecc 	bl	8000a84 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004cec:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004cf0:	2060      	movs	r0, #96	; 0x60
 8004cf2:	f7fb fec7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	2061      	movs	r0, #97	; 0x61
 8004cfa:	f7fb fec3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	206a      	movs	r0, #106	; 0x6a
 8004d02:	f7fb febf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004d06:	2100      	movs	r1, #0
 8004d08:	2080      	movs	r0, #128	; 0x80
 8004d0a:	f7fb febb 	bl	8000a84 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2081      	movs	r0, #129	; 0x81
 8004d12:	f7fb feb7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d16:	2100      	movs	r1, #0
 8004d18:	2082      	movs	r0, #130	; 0x82
 8004d1a:	f7fb feb3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2083      	movs	r0, #131	; 0x83
 8004d22:	f7fb feaf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	2084      	movs	r0, #132	; 0x84
 8004d2a:	f7fb feab 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2085      	movs	r0, #133	; 0x85
 8004d32:	f7fb fea7 	bl	8000a84 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004d36:	2113      	movs	r1, #19
 8004d38:	2090      	movs	r0, #144	; 0x90
 8004d3a:	f7fb fea3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d3e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d42:	2092      	movs	r0, #146	; 0x92
 8004d44:	f7fb fe9e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004d48:	2105      	movs	r1, #5
 8004d4a:	2093      	movs	r0, #147	; 0x93
 8004d4c:	f7fb fe9a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004d50:	2100      	movs	r1, #0
 8004d52:	2095      	movs	r0, #149	; 0x95
 8004d54:	f7fb fe96 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	2097      	movs	r0, #151	; 0x97
 8004d5c:	f7fb fe92 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004d60:	2100      	movs	r1, #0
 8004d62:	2098      	movs	r0, #152	; 0x98
 8004d64:	f7fb fe8e 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f7fb fe89 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004d72:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d76:	2002      	movs	r0, #2
 8004d78:	f7fb fe84 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004d7c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004d80:	2003      	movs	r0, #3
 8004d82:	f7fb fe7f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004d86:	2100      	movs	r1, #0
 8004d88:	2004      	movs	r0, #4
 8004d8a:	f7fb fe7b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	200c      	movs	r0, #12
 8004d92:	f7fb fe77 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004d96:	2100      	movs	r1, #0
 8004d98:	200f      	movs	r0, #15
 8004d9a:	f7fb fe73 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2020      	movs	r0, #32
 8004da2:	f7fb fe6f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004da6:	2100      	movs	r1, #0
 8004da8:	2021      	movs	r0, #33	; 0x21
 8004daa:	f7fb fe6b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004dae:	2121      	movs	r1, #33	; 0x21
 8004db0:	2007      	movs	r0, #7
 8004db2:	f7fb fe67 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004db6:	2014      	movs	r0, #20
 8004db8:	f001 fbae 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004dbc:	2161      	movs	r1, #97	; 0x61
 8004dbe:	2007      	movs	r0, #7
 8004dc0:	f7fb fe60 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004dc4:	2014      	movs	r0, #20
 8004dc6:	f001 fba7 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004dca:	f240 1173 	movw	r1, #371	; 0x173
 8004dce:	2007      	movs	r0, #7
 8004dd0:	f7fb fe58 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004dd4:	2014      	movs	r0, #20
 8004dd6:	f001 fb9f 	bl	8006518 <HAL_Delay>
 8004dda:	f000 bfd7 	b.w	8005d8c <LCD_Init+0x3e34>
 8004dde:	bf00      	nop
 8004de0:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0xB505) {
 8004de4:	4bf0      	ldr	r3, [pc, #960]	; (80051a8 <LCD_Init+0x3250>)
 8004de6:	889b      	ldrh	r3, [r3, #4]
 8004de8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004dec:	4293      	cmp	r3, r2
 8004dee:	f040 8103 	bne.w	8004ff8 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004df2:	2100      	movs	r1, #0
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7fb fe45 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f7fb fe41 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e02:	2100      	movs	r1, #0
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7fb fe3d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f7fb fe39 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004e12:	2101      	movs	r1, #1
 8004e14:	20a4      	movs	r0, #164	; 0xa4
 8004e16:	f7fb fe35 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004e1a:	2014      	movs	r0, #20
 8004e1c:	f001 fb7c 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004e20:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e24:	2060      	movs	r0, #96	; 0x60
 8004e26:	f7fb fe2d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e2a:	f240 2102 	movw	r1, #514	; 0x202
 8004e2e:	2008      	movs	r0, #8
 8004e30:	f7fb fe28 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004e34:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004e38:	2030      	movs	r0, #48	; 0x30
 8004e3a:	f7fb fe23 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004e3e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004e42:	2031      	movs	r0, #49	; 0x31
 8004e44:	f7fb fe1e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004e48:	f240 6104 	movw	r1, #1540	; 0x604
 8004e4c:	2032      	movs	r0, #50	; 0x32
 8004e4e:	f7fb fe19 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004e52:	f640 6116 	movw	r1, #3606	; 0xe16
 8004e56:	2033      	movs	r0, #51	; 0x33
 8004e58:	f7fb fe14 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004e5c:	f242 2111 	movw	r1, #8721	; 0x2211
 8004e60:	2034      	movs	r0, #52	; 0x34
 8004e62:	f7fb fe0f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004e66:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004e6a:	2035      	movs	r0, #53	; 0x35
 8004e6c:	f7fb fe0a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004e70:	f248 5107 	movw	r1, #34055	; 0x8507
 8004e74:	2036      	movs	r0, #54	; 0x36
 8004e76:	f7fb fe05 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004e7a:	f241 4107 	movw	r1, #5127	; 0x1407
 8004e7e:	2037      	movs	r0, #55	; 0x37
 8004e80:	f7fb fe00 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004e84:	f241 4103 	movw	r1, #5123	; 0x1403
 8004e88:	2038      	movs	r0, #56	; 0x38
 8004e8a:	f7fb fdfb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004e8e:	2120      	movs	r1, #32
 8004e90:	2039      	movs	r0, #57	; 0x39
 8004e92:	f7fb fdf7 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004e96:	211a      	movs	r1, #26
 8004e98:	2090      	movs	r0, #144	; 0x90
 8004e9a:	f7fb fdf3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	2010      	movs	r0, #16
 8004ea2:	f7fb fdef 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004ea6:	2107      	movs	r1, #7
 8004ea8:	2011      	movs	r0, #17
 8004eaa:	f7fb fdeb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2012      	movs	r0, #18
 8004eb2:	f7fb fde7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2013      	movs	r0, #19
 8004eba:	f7fb fde3 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004ebe:	2014      	movs	r0, #20
 8004ec0:	f001 fb2a 	bl	8006518 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004ec4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004ec8:	2010      	movs	r0, #16
 8004eca:	f7fb fddb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004ece:	f240 1137 	movw	r1, #311	; 0x137
 8004ed2:	2011      	movs	r0, #17
 8004ed4:	f7fb fdd6 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004ed8:	2014      	movs	r0, #20
 8004eda:	f001 fb1d 	bl	8006518 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004ede:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004ee2:	2012      	movs	r0, #18
 8004ee4:	f7fb fdce 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004ee8:	2014      	movs	r0, #20
 8004eea:	f001 fb15 	bl	8006518 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004eee:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004ef2:	2013      	movs	r0, #19
 8004ef4:	f7fb fdc6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	202a      	movs	r0, #42	; 0x2a
 8004efc:	f7fb fdc2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004f00:	2148      	movs	r1, #72	; 0x48
 8004f02:	2029      	movs	r0, #41	; 0x29
 8004f04:	f7fb fdbe 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004f08:	2014      	movs	r0, #20
 8004f0a:	f001 fb05 	bl	8006518 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f12:	2001      	movs	r0, #1
 8004f14:	f7fb fdb6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f18:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f1c:	2002      	movs	r0, #2
 8004f1e:	f7fb fdb1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f22:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f26:	2003      	movs	r0, #3
 8004f28:	f7fb fdac 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004f2c:	f240 2102 	movw	r1, #514	; 0x202
 8004f30:	2008      	movs	r0, #8
 8004f32:	f7fb fda7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	200a      	movs	r0, #10
 8004f3a:	f7fb fda3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	200c      	movs	r0, #12
 8004f42:	f7fb fd9f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	200d      	movs	r0, #13
 8004f4a:	f7fb fd9b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004f4e:	2130      	movs	r1, #48	; 0x30
 8004f50:	200e      	movs	r0, #14
 8004f52:	f7fb fd97 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	2050      	movs	r0, #80	; 0x50
 8004f5a:	f7fb fd93 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004f5e:	21ef      	movs	r1, #239	; 0xef
 8004f60:	2051      	movs	r0, #81	; 0x51
 8004f62:	f7fb fd8f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	2052      	movs	r0, #82	; 0x52
 8004f6a:	f7fb fd8b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004f6e:	f240 113f 	movw	r1, #319	; 0x13f
 8004f72:	2053      	movs	r0, #83	; 0x53
 8004f74:	f7fb fd86 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004f78:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f7c:	2060      	movs	r0, #96	; 0x60
 8004f7e:	f7fb fd81 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f82:	2101      	movs	r1, #1
 8004f84:	2061      	movs	r0, #97	; 0x61
 8004f86:	f7fb fd7d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	206a      	movs	r0, #106	; 0x6a
 8004f8e:	f7fb fd79 	bl	8000a84 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004f92:	2111      	movs	r1, #17
 8004f94:	2090      	movs	r0, #144	; 0x90
 8004f96:	f7fb fd75 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004f9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f9e:	2092      	movs	r0, #146	; 0x92
 8004fa0:	f7fb fd70 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004fa4:	f240 4102 	movw	r1, #1026	; 0x402
 8004fa8:	2093      	movs	r0, #147	; 0x93
 8004faa:	f7fb fd6b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004fae:	2102      	movs	r1, #2
 8004fb0:	2094      	movs	r0, #148	; 0x94
 8004fb2:	f7fb fd67 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004fb6:	2014      	movs	r0, #20
 8004fb8:	f001 faae 	bl	8006518 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	2007      	movs	r0, #7
 8004fc0:	f7fb fd60 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8004fc4:	2014      	movs	r0, #20
 8004fc6:	f001 faa7 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004fca:	2161      	movs	r1, #97	; 0x61
 8004fcc:	2007      	movs	r0, #7
 8004fce:	f7fb fd59 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004fd2:	f240 1173 	movw	r1, #371	; 0x173
 8004fd6:	2007      	movs	r0, #7
 8004fd8:	f7fb fd54 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2020      	movs	r0, #32
 8004fe0:	f7fb fd50 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2021      	movs	r0, #33	; 0x21
 8004fe8:	f7fb fd4c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004fec:	2122      	movs	r1, #34	; 0x22
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f7fb fd48 	bl	8000a84 <LCD_WriteReg>
 8004ff4:	f000 beca 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004ff8:	4b6b      	ldr	r3, [pc, #428]	; (80051a8 <LCD_Init+0x3250>)
 8004ffa:	889b      	ldrh	r3, [r3, #4]
 8004ffc:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005000:	4293      	cmp	r3, r2
 8005002:	f040 80d3 	bne.w	80051ac <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005006:	2100      	movs	r1, #0
 8005008:	2000      	movs	r0, #0
 800500a:	f7fb fd3b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800500e:	2100      	movs	r1, #0
 8005010:	2000      	movs	r0, #0
 8005012:	f7fb fd37 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8005016:	2014      	movs	r0, #20
 8005018:	f001 fa7e 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800501c:	2100      	movs	r1, #0
 800501e:	2000      	movs	r0, #0
 8005020:	f7fb fd30 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005024:	2100      	movs	r1, #0
 8005026:	2000      	movs	r0, #0
 8005028:	f7fb fd2c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800502c:	2100      	movs	r1, #0
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb fd28 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005034:	2100      	movs	r1, #0
 8005036:	2000      	movs	r0, #0
 8005038:	f7fb fd24 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800503c:	2101      	movs	r1, #1
 800503e:	20a4      	movs	r0, #164	; 0xa4
 8005040:	f7fb fd20 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8005044:	2014      	movs	r0, #20
 8005046:	f001 fa67 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800504a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800504e:	2060      	movs	r0, #96	; 0x60
 8005050:	f7fb fd18 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8005054:	f640 0106 	movw	r1, #2054	; 0x806
 8005058:	2008      	movs	r0, #8
 800505a:	f7fb fd13 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800505e:	f240 7103 	movw	r1, #1795	; 0x703
 8005062:	2030      	movs	r0, #48	; 0x30
 8005064:	f7fb fd0e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005068:	2101      	movs	r1, #1
 800506a:	2031      	movs	r0, #49	; 0x31
 800506c:	f7fb fd0a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005070:	2104      	movs	r1, #4
 8005072:	2032      	movs	r0, #50	; 0x32
 8005074:	f7fb fd06 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005078:	f44f 7181 	mov.w	r1, #258	; 0x102
 800507c:	2033      	movs	r0, #51	; 0x33
 800507e:	f7fb fd01 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8005082:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005086:	2034      	movs	r0, #52	; 0x34
 8005088:	f7fb fcfc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 800508c:	f240 1103 	movw	r1, #259	; 0x103
 8005090:	2035      	movs	r0, #53	; 0x35
 8005092:	f7fb fcf7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8005096:	211f      	movs	r1, #31
 8005098:	2036      	movs	r0, #54	; 0x36
 800509a:	f7fb fcf3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 800509e:	f240 7103 	movw	r1, #1795	; 0x703
 80050a2:	2037      	movs	r0, #55	; 0x37
 80050a4:	f7fb fcee 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80050a8:	2101      	movs	r1, #1
 80050aa:	2038      	movs	r0, #56	; 0x38
 80050ac:	f7fb fcea 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80050b0:	2104      	movs	r1, #4
 80050b2:	2039      	movs	r0, #57	; 0x39
 80050b4:	f7fb fce6 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80050b8:	2115      	movs	r1, #21
 80050ba:	2090      	movs	r0, #144	; 0x90
 80050bc:	f7fb fce2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80050c0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80050c4:	2010      	movs	r0, #16
 80050c6:	f7fb fcdd 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80050ca:	f240 2147 	movw	r1, #583	; 0x247
 80050ce:	2011      	movs	r0, #17
 80050d0:	f7fb fcd8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80050d4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80050d8:	2012      	movs	r0, #18
 80050da:	f7fb fcd3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80050de:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80050e2:	2013      	movs	r0, #19
 80050e4:	f7fb fcce 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(120);
 80050e8:	2078      	movs	r0, #120	; 0x78
 80050ea:	f001 fa15 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80050ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050f2:	2001      	movs	r0, #1
 80050f4:	f7fb fcc6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80050f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050fc:	2002      	movs	r0, #2
 80050fe:	f7fb fcc1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005102:	f241 0130 	movw	r1, #4144	; 0x1030
 8005106:	2003      	movs	r0, #3
 8005108:	f7fb fcbc 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800510c:	2108      	movs	r1, #8
 800510e:	200a      	movs	r0, #10
 8005110:	f7fb fcb8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005114:	2100      	movs	r1, #0
 8005116:	200c      	movs	r0, #12
 8005118:	f7fb fcb4 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800511c:	2120      	movs	r1, #32
 800511e:	200e      	movs	r0, #14
 8005120:	f7fb fcb0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005124:	2100      	movs	r1, #0
 8005126:	200f      	movs	r0, #15
 8005128:	f7fb fcac 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800512c:	2100      	movs	r1, #0
 800512e:	2020      	movs	r0, #32
 8005130:	f7fb fca8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005134:	2100      	movs	r1, #0
 8005136:	2021      	movs	r0, #33	; 0x21
 8005138:	f7fb fca4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800513c:	213d      	movs	r1, #61	; 0x3d
 800513e:	202a      	movs	r0, #42	; 0x2a
 8005140:	f7fb fca0 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(20);
 8005144:	2014      	movs	r0, #20
 8005146:	f001 f9e7 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800514a:	212d      	movs	r1, #45	; 0x2d
 800514c:	2029      	movs	r0, #41	; 0x29
 800514e:	f7fb fc99 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005152:	2100      	movs	r1, #0
 8005154:	2050      	movs	r0, #80	; 0x50
 8005156:	f7fb fc95 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800515a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800515e:	2051      	movs	r0, #81	; 0x51
 8005160:	f7fb fc90 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005164:	2100      	movs	r1, #0
 8005166:	2052      	movs	r0, #82	; 0x52
 8005168:	f7fb fc8c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800516c:	f240 113f 	movw	r1, #319	; 0x13f
 8005170:	2053      	movs	r0, #83	; 0x53
 8005172:	f7fb fc87 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	2061      	movs	r0, #97	; 0x61
 800517a:	f7fb fc83 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800517e:	2100      	movs	r1, #0
 8005180:	206a      	movs	r0, #106	; 0x6a
 8005182:	f7fb fc7f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005186:	f44f 7140 	mov.w	r1, #768	; 0x300
 800518a:	2092      	movs	r0, #146	; 0x92
 800518c:	f7fb fc7a 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005190:	2105      	movs	r1, #5
 8005192:	2093      	movs	r0, #147	; 0x93
 8005194:	f7fb fc76 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800519c:	2007      	movs	r0, #7
 800519e:	f7fb fc71 	bl	8000a84 <LCD_WriteReg>
 80051a2:	f000 bdf3 	b.w	8005d8c <LCD_Init+0x3e34>
 80051a6:	bf00      	nop
 80051a8:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80051ac:	4bc2      	ldr	r3, [pc, #776]	; (80054b8 <LCD_Init+0x3560>)
 80051ae:	889b      	ldrh	r3, [r3, #4]
 80051b0:	f648 1289 	movw	r2, #35209	; 0x8989
 80051b4:	4293      	cmp	r3, r2
 80051b6:	f040 80bc 	bne.w	8005332 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80051ba:	2101      	movs	r1, #1
 80051bc:	2000      	movs	r0, #0
 80051be:	f7fb fc61 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80051c2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80051c6:	2003      	movs	r0, #3
 80051c8:	f7fb fc5c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80051cc:	2100      	movs	r1, #0
 80051ce:	200c      	movs	r0, #12
 80051d0:	f7fb fc58 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80051d4:	f640 010c 	movw	r1, #2060	; 0x80c
 80051d8:	200d      	movs	r0, #13
 80051da:	f7fb fc53 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80051de:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80051e2:	200e      	movs	r0, #14
 80051e4:	f7fb fc4e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80051e8:	21b0      	movs	r1, #176	; 0xb0
 80051ea:	201e      	movs	r0, #30
 80051ec:	f7fb fc4a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80051f0:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80051f4:	2001      	movs	r0, #1
 80051f6:	f7fb fc45 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80051fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051fe:	2002      	movs	r0, #2
 8005200:	f7fb fc40 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005204:	2100      	movs	r1, #0
 8005206:	2010      	movs	r0, #16
 8005208:	f7fb fc3c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800520c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005210:	2011      	movs	r0, #17
 8005212:	f7fb fc37 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005216:	2100      	movs	r1, #0
 8005218:	2005      	movs	r0, #5
 800521a:	f7fb fc33 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800521e:	2100      	movs	r1, #0
 8005220:	2006      	movs	r0, #6
 8005222:	f7fb fc2f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005226:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800522a:	2016      	movs	r0, #22
 800522c:	f7fb fc2a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005230:	2103      	movs	r1, #3
 8005232:	2017      	movs	r0, #23
 8005234:	f7fb fc26 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005238:	f240 2133 	movw	r1, #563	; 0x233
 800523c:	2007      	movs	r0, #7
 800523e:	f7fb fc21 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005242:	2100      	movs	r1, #0
 8005244:	200b      	movs	r0, #11
 8005246:	f7fb fc1d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800524a:	2100      	movs	r1, #0
 800524c:	200f      	movs	r0, #15
 800524e:	f7fb fc19 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005252:	2100      	movs	r1, #0
 8005254:	2041      	movs	r0, #65	; 0x41
 8005256:	f7fb fc15 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800525a:	2100      	movs	r1, #0
 800525c:	2042      	movs	r0, #66	; 0x42
 800525e:	f7fb fc11 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005262:	2100      	movs	r1, #0
 8005264:	2048      	movs	r0, #72	; 0x48
 8005266:	f7fb fc0d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800526a:	f240 113f 	movw	r1, #319	; 0x13f
 800526e:	2049      	movs	r0, #73	; 0x49
 8005270:	f7fb fc08 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005274:	2100      	movs	r1, #0
 8005276:	204a      	movs	r0, #74	; 0x4a
 8005278:	f7fb fc04 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800527c:	2100      	movs	r1, #0
 800527e:	204b      	movs	r0, #75	; 0x4b
 8005280:	f7fb fc00 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005284:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005288:	2044      	movs	r0, #68	; 0x44
 800528a:	f7fb fbfb 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800528e:	2100      	movs	r1, #0
 8005290:	2045      	movs	r0, #69	; 0x45
 8005292:	f7fb fbf7 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8005296:	f240 113f 	movw	r1, #319	; 0x13f
 800529a:	2046      	movs	r0, #70	; 0x46
 800529c:	f7fb fbf2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80052a0:	f240 7107 	movw	r1, #1799	; 0x707
 80052a4:	2030      	movs	r0, #48	; 0x30
 80052a6:	f7fb fbed 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80052aa:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052ae:	2031      	movs	r0, #49	; 0x31
 80052b0:	f7fb fbe8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80052b4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052b8:	2032      	movs	r0, #50	; 0x32
 80052ba:	f7fb fbe3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80052be:	f240 5102 	movw	r1, #1282	; 0x502
 80052c2:	2033      	movs	r0, #51	; 0x33
 80052c4:	f7fb fbde 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80052c8:	f240 5107 	movw	r1, #1287	; 0x507
 80052cc:	2034      	movs	r0, #52	; 0x34
 80052ce:	f7fb fbd9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80052d2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052d6:	2035      	movs	r0, #53	; 0x35
 80052d8:	f7fb fbd4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80052dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052e0:	2036      	movs	r0, #54	; 0x36
 80052e2:	f7fb fbcf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80052e6:	f240 5102 	movw	r1, #1282	; 0x502
 80052ea:	2037      	movs	r0, #55	; 0x37
 80052ec:	f7fb fbca 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80052f0:	f240 3102 	movw	r1, #770	; 0x302
 80052f4:	203a      	movs	r0, #58	; 0x3a
 80052f6:	f7fb fbc5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80052fa:	f240 3102 	movw	r1, #770	; 0x302
 80052fe:	203b      	movs	r0, #59	; 0x3b
 8005300:	f7fb fbc0 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005304:	2100      	movs	r1, #0
 8005306:	2023      	movs	r0, #35	; 0x23
 8005308:	f7fb fbbc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800530c:	2100      	movs	r1, #0
 800530e:	2024      	movs	r0, #36	; 0x24
 8005310:	f7fb fbb8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005318:	2025      	movs	r0, #37	; 0x25
 800531a:	f7fb fbb3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800531e:	2100      	movs	r1, #0
 8005320:	204f      	movs	r0, #79	; 0x4f
 8005322:	f7fb fbaf 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005326:	2100      	movs	r1, #0
 8005328:	204e      	movs	r0, #78	; 0x4e
 800532a:	f7fb fbab 	bl	8000a84 <LCD_WriteReg>
 800532e:	f000 bd2d 	b.w	8005d8c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005332:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <LCD_Init+0x3560>)
 8005334:	889b      	ldrh	r3, [r3, #4]
 8005336:	f244 5231 	movw	r2, #17713	; 0x4531
 800533a:	4293      	cmp	r3, r2
 800533c:	f040 80be 	bne.w	80054bc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005340:	2101      	movs	r1, #1
 8005342:	2000      	movs	r0, #0
 8005344:	f7fb fb9e 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(10);
 8005348:	200a      	movs	r0, #10
 800534a:	f001 f8e5 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800534e:	f241 6128 	movw	r1, #5672	; 0x1628
 8005352:	2010      	movs	r0, #16
 8005354:	f7fb fb96 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005358:	210e      	movs	r1, #14
 800535a:	2012      	movs	r0, #18
 800535c:	f7fb fb92 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005360:	f640 2139 	movw	r1, #2617	; 0xa39
 8005364:	2013      	movs	r0, #19
 8005366:	f7fb fb8d 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(10);
 800536a:	200a      	movs	r0, #10
 800536c:	f001 f8d4 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	2011      	movs	r0, #17
 8005374:	f7fb fb86 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005378:	2150      	movs	r1, #80	; 0x50
 800537a:	2015      	movs	r0, #21
 800537c:	f7fb fb82 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(10);
 8005380:	200a      	movs	r0, #10
 8005382:	f001 f8c9 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005386:	211e      	movs	r1, #30
 8005388:	2012      	movs	r0, #18
 800538a:	f7fb fb7b 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(10);
 800538e:	200a      	movs	r0, #10
 8005390:	f001 f8c2 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8005394:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005398:	2010      	movs	r0, #16
 800539a:	f7fb fb73 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800539e:	f642 2139 	movw	r1, #10809	; 0x2a39
 80053a2:	2013      	movs	r0, #19
 80053a4:	f7fb fb6e 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(10);
 80053a8:	200a      	movs	r0, #10
 80053aa:	f001 f8b5 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80053ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053b2:	2001      	movs	r0, #1
 80053b4:	f7fb fb66 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80053b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053bc:	2002      	movs	r0, #2
 80053be:	f7fb fb61 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80053c2:	f241 0138 	movw	r1, #4152	; 0x1038
 80053c6:	2003      	movs	r0, #3
 80053c8:	f7fb fb5c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80053cc:	f240 2102 	movw	r1, #514	; 0x202
 80053d0:	2008      	movs	r0, #8
 80053d2:	f7fb fb57 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80053d6:	2108      	movs	r1, #8
 80053d8:	200a      	movs	r0, #10
 80053da:	f7fb fb53 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80053de:	2100      	movs	r1, #0
 80053e0:	2030      	movs	r0, #48	; 0x30
 80053e2:	f7fb fb4f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80053e6:	f240 4102 	movw	r1, #1026	; 0x402
 80053ea:	2031      	movs	r0, #49	; 0x31
 80053ec:	f7fb fb4a 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80053f0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80053f4:	2032      	movs	r0, #50	; 0x32
 80053f6:	f7fb fb45 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80053fa:	f240 5103 	movw	r1, #1283	; 0x503
 80053fe:	2033      	movs	r0, #51	; 0x33
 8005400:	f7fb fb40 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005404:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005408:	2034      	movs	r0, #52	; 0x34
 800540a:	f7fb fb3b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800540e:	f240 3101 	movw	r1, #769	; 0x301
 8005412:	2035      	movs	r0, #53	; 0x35
 8005414:	f7fb fb36 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005418:	f240 7107 	movw	r1, #1799	; 0x707
 800541c:	2036      	movs	r0, #54	; 0x36
 800541e:	f7fb fb31 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005422:	f240 3105 	movw	r1, #773	; 0x305
 8005426:	2037      	movs	r0, #55	; 0x37
 8005428:	f7fb fb2c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800542c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005430:	2038      	movs	r0, #56	; 0x38
 8005432:	f7fb fb27 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005436:	f640 710b 	movw	r1, #3851	; 0xf0b
 800543a:	2039      	movs	r0, #57	; 0x39
 800543c:	f7fb fb22 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005440:	2102      	movs	r1, #2
 8005442:	2041      	movs	r0, #65	; 0x41
 8005444:	f7fb fb1e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005448:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800544c:	2060      	movs	r0, #96	; 0x60
 800544e:	f7fb fb19 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005452:	2101      	movs	r1, #1
 8005454:	2061      	movs	r0, #97	; 0x61
 8005456:	f7fb fb15 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800545a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800545e:	2090      	movs	r0, #144	; 0x90
 8005460:	f7fb fb10 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005464:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005468:	2092      	movs	r0, #146	; 0x92
 800546a:	f7fb fb0b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800546e:	2104      	movs	r1, #4
 8005470:	2093      	movs	r0, #147	; 0x93
 8005472:	f7fb fb07 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800547a:	20a0      	movs	r0, #160	; 0xa0
 800547c:	f7fb fb02 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005480:	2101      	movs	r1, #1
 8005482:	2007      	movs	r0, #7
 8005484:	f7fb fafe 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005488:	2121      	movs	r1, #33	; 0x21
 800548a:	2007      	movs	r0, #7
 800548c:	f7fb fafa 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005490:	2123      	movs	r1, #35	; 0x23
 8005492:	2007      	movs	r0, #7
 8005494:	f7fb faf6 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005498:	2133      	movs	r1, #51	; 0x33
 800549a:	2007      	movs	r0, #7
 800549c:	f7fb faf2 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80054a0:	f240 1133 	movw	r1, #307	; 0x133
 80054a4:	2007      	movs	r0, #7
 80054a6:	f7fb faed 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80054aa:	2100      	movs	r1, #0
 80054ac:	20a0      	movs	r0, #160	; 0xa0
 80054ae:	f7fb fae9 	bl	8000a84 <LCD_WriteReg>
 80054b2:	f000 bc6b 	b.w	8005d8c <LCD_Init+0x3e34>
 80054b6:	bf00      	nop
 80054b8:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x4535) {
 80054bc:	4b5b      	ldr	r3, [pc, #364]	; (800562c <LCD_Init+0x36d4>)
 80054be:	889b      	ldrh	r3, [r3, #4]
 80054c0:	f244 5235 	movw	r2, #17717	; 0x4535
 80054c4:	4293      	cmp	r3, r2
 80054c6:	f040 80b3 	bne.w	8005630 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80054ca:	2130      	movs	r1, #48	; 0x30
 80054cc:	2015      	movs	r0, #21
 80054ce:	f7fb fad9 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80054d2:	2110      	movs	r1, #16
 80054d4:	209a      	movs	r0, #154	; 0x9a
 80054d6:	f7fb fad5 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80054da:	2120      	movs	r1, #32
 80054dc:	2011      	movs	r0, #17
 80054de:	f7fb fad1 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80054e2:	f243 4128 	movw	r1, #13352	; 0x3428
 80054e6:	2010      	movs	r0, #16
 80054e8:	f7fb facc 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80054ec:	2102      	movs	r1, #2
 80054ee:	2012      	movs	r0, #18
 80054f0:	f7fb fac8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80054f4:	f241 0138 	movw	r1, #4152	; 0x1038
 80054f8:	2013      	movs	r0, #19
 80054fa:	f7fb fac3 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(40);
 80054fe:	2028      	movs	r0, #40	; 0x28
 8005500:	f001 f80a 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005504:	2112      	movs	r1, #18
 8005506:	2012      	movs	r0, #18
 8005508:	f7fb fabc 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(40);
 800550c:	2028      	movs	r0, #40	; 0x28
 800550e:	f001 f803 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005512:	f243 4120 	movw	r1, #13344	; 0x3420
 8005516:	2010      	movs	r0, #16
 8005518:	f7fb fab4 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800551c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005520:	2013      	movs	r0, #19
 8005522:	f7fb faaf 	bl	8000a84 <LCD_WriteReg>
		HAL_Delay(70);
 8005526:	2046      	movs	r0, #70	; 0x46
 8005528:	f000 fff6 	bl	8006518 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800552c:	2100      	movs	r1, #0
 800552e:	2030      	movs	r0, #48	; 0x30
 8005530:	f7fb faa8 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005534:	f240 4102 	movw	r1, #1026	; 0x402
 8005538:	2031      	movs	r0, #49	; 0x31
 800553a:	f7fb faa3 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800553e:	f240 3107 	movw	r1, #775	; 0x307
 8005542:	2032      	movs	r0, #50	; 0x32
 8005544:	f7fb fa9e 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005548:	f44f 7141 	mov.w	r1, #772	; 0x304
 800554c:	2033      	movs	r0, #51	; 0x33
 800554e:	f7fb fa99 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005552:	2104      	movs	r1, #4
 8005554:	2034      	movs	r0, #52	; 0x34
 8005556:	f7fb fa95 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800555a:	f240 4101 	movw	r1, #1025	; 0x401
 800555e:	2035      	movs	r0, #53	; 0x35
 8005560:	f7fb fa90 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005564:	f240 7107 	movw	r1, #1799	; 0x707
 8005568:	2036      	movs	r0, #54	; 0x36
 800556a:	f7fb fa8b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800556e:	f240 3105 	movw	r1, #773	; 0x305
 8005572:	2037      	movs	r0, #55	; 0x37
 8005574:	f7fb fa86 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005578:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800557c:	2038      	movs	r0, #56	; 0x38
 800557e:	f7fb fa81 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005582:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005586:	2039      	movs	r0, #57	; 0x39
 8005588:	f7fb fa7c 	bl	8000a84 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800558c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005590:	2001      	movs	r0, #1
 8005592:	f7fb fa77 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005596:	f44f 7140 	mov.w	r1, #768	; 0x300
 800559a:	2002      	movs	r0, #2
 800559c:	f7fb fa72 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80055a0:	f241 0130 	movw	r1, #4144	; 0x1030
 80055a4:	2003      	movs	r0, #3
 80055a6:	f7fb fa6d 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80055aa:	f640 0108 	movw	r1, #2056	; 0x808
 80055ae:	2008      	movs	r0, #8
 80055b0:	f7fb fa68 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80055b4:	2108      	movs	r1, #8
 80055b6:	200a      	movs	r0, #10
 80055b8:	f7fb fa64 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80055bc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055c0:	2060      	movs	r0, #96	; 0x60
 80055c2:	f7fb fa5f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80055c6:	2101      	movs	r1, #1
 80055c8:	2061      	movs	r0, #97	; 0x61
 80055ca:	f7fb fa5b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80055ce:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80055d2:	2090      	movs	r0, #144	; 0x90
 80055d4:	f7fb fa56 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80055d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055dc:	2092      	movs	r0, #146	; 0x92
 80055de:	f7fb fa51 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80055e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055e6:	2093      	movs	r0, #147	; 0x93
 80055e8:	f7fb fa4c 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80055ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80055f0:	20a0      	movs	r0, #160	; 0xa0
 80055f2:	f7fb fa47 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80055f6:	2110      	movs	r1, #16
 80055f8:	20a3      	movs	r0, #163	; 0xa3
 80055fa:	f7fb fa43 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80055fe:	2101      	movs	r1, #1
 8005600:	2007      	movs	r0, #7
 8005602:	f7fb fa3f 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005606:	2121      	movs	r1, #33	; 0x21
 8005608:	2007      	movs	r0, #7
 800560a:	f7fb fa3b 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800560e:	2123      	movs	r1, #35	; 0x23
 8005610:	2007      	movs	r0, #7
 8005612:	f7fb fa37 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005616:	2133      	movs	r1, #51	; 0x33
 8005618:	2007      	movs	r0, #7
 800561a:	f7fb fa33 	bl	8000a84 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800561e:	f240 1133 	movw	r1, #307	; 0x133
 8005622:	2007      	movs	r0, #7
 8005624:	f7fb fa2e 	bl	8000a84 <LCD_WriteReg>
 8005628:	e3b0      	b.n	8005d8c <LCD_Init+0x3e34>
 800562a:	bf00      	nop
 800562c:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0X1963) {
 8005630:	4ba8      	ldr	r3, [pc, #672]	; (80058d4 <LCD_Init+0x397c>)
 8005632:	889b      	ldrh	r3, [r3, #4]
 8005634:	f641 1263 	movw	r2, #6499	; 0x1963
 8005638:	4293      	cmp	r3, r2
 800563a:	f040 83a7 	bne.w	8005d8c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800563e:	20e2      	movs	r0, #226	; 0xe2
 8005640:	f7fb f994 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005644:	4ba4      	ldr	r3, [pc, #656]	; (80058d8 <LCD_Init+0x3980>)
 8005646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564a:	611a      	str	r2, [r3, #16]
 800564c:	4ba2      	ldr	r3, [pc, #648]	; (80058d8 <LCD_Init+0x3980>)
 800564e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005652:	615a      	str	r2, [r3, #20]
 8005654:	4ba1      	ldr	r3, [pc, #644]	; (80058dc <LCD_Init+0x3984>)
 8005656:	221d      	movs	r2, #29
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	4b9f      	ldr	r3, [pc, #636]	; (80058d8 <LCD_Init+0x3980>)
 800565c:	2280      	movs	r2, #128	; 0x80
 800565e:	615a      	str	r2, [r3, #20]
 8005660:	4b9d      	ldr	r3, [pc, #628]	; (80058d8 <LCD_Init+0x3980>)
 8005662:	2280      	movs	r2, #128	; 0x80
 8005664:	611a      	str	r2, [r3, #16]
 8005666:	4b9c      	ldr	r3, [pc, #624]	; (80058d8 <LCD_Init+0x3980>)
 8005668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800566e:	4b9a      	ldr	r3, [pc, #616]	; (80058d8 <LCD_Init+0x3980>)
 8005670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	4b98      	ldr	r3, [pc, #608]	; (80058d8 <LCD_Init+0x3980>)
 8005678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567c:	615a      	str	r2, [r3, #20]
 800567e:	4b97      	ldr	r3, [pc, #604]	; (80058dc <LCD_Init+0x3984>)
 8005680:	2202      	movs	r2, #2
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	4b94      	ldr	r3, [pc, #592]	; (80058d8 <LCD_Init+0x3980>)
 8005686:	2280      	movs	r2, #128	; 0x80
 8005688:	615a      	str	r2, [r3, #20]
 800568a:	4b93      	ldr	r3, [pc, #588]	; (80058d8 <LCD_Init+0x3980>)
 800568c:	2280      	movs	r2, #128	; 0x80
 800568e:	611a      	str	r2, [r3, #16]
 8005690:	4b91      	ldr	r3, [pc, #580]	; (80058d8 <LCD_Init+0x3980>)
 8005692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005696:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005698:	4b8f      	ldr	r3, [pc, #572]	; (80058d8 <LCD_Init+0x3980>)
 800569a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569e:	611a      	str	r2, [r3, #16]
 80056a0:	4b8d      	ldr	r3, [pc, #564]	; (80058d8 <LCD_Init+0x3980>)
 80056a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a6:	615a      	str	r2, [r3, #20]
 80056a8:	4b8c      	ldr	r3, [pc, #560]	; (80058dc <LCD_Init+0x3984>)
 80056aa:	2204      	movs	r2, #4
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	4b8a      	ldr	r3, [pc, #552]	; (80058d8 <LCD_Init+0x3980>)
 80056b0:	2280      	movs	r2, #128	; 0x80
 80056b2:	615a      	str	r2, [r3, #20]
 80056b4:	4b88      	ldr	r3, [pc, #544]	; (80058d8 <LCD_Init+0x3980>)
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	611a      	str	r2, [r3, #16]
 80056ba:	4b87      	ldr	r3, [pc, #540]	; (80058d8 <LCD_Init+0x3980>)
 80056bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f000 ff28 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80056c8:	20e0      	movs	r0, #224	; 0xe0
 80056ca:	f7fb f94f 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80056ce:	4b82      	ldr	r3, [pc, #520]	; (80058d8 <LCD_Init+0x3980>)
 80056d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d4:	611a      	str	r2, [r3, #16]
 80056d6:	4b80      	ldr	r3, [pc, #512]	; (80058d8 <LCD_Init+0x3980>)
 80056d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056dc:	615a      	str	r2, [r3, #20]
 80056de:	4b7f      	ldr	r3, [pc, #508]	; (80058dc <LCD_Init+0x3984>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	60da      	str	r2, [r3, #12]
 80056e4:	4b7c      	ldr	r3, [pc, #496]	; (80058d8 <LCD_Init+0x3980>)
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	615a      	str	r2, [r3, #20]
 80056ea:	4b7b      	ldr	r3, [pc, #492]	; (80058d8 <LCD_Init+0x3980>)
 80056ec:	2280      	movs	r2, #128	; 0x80
 80056ee:	611a      	str	r2, [r3, #16]
 80056f0:	4b79      	ldr	r3, [pc, #484]	; (80058d8 <LCD_Init+0x3980>)
 80056f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f6:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80056f8:	200a      	movs	r0, #10
 80056fa:	f000 ff0d 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80056fe:	20e0      	movs	r0, #224	; 0xe0
 8005700:	f7fb f934 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005704:	4b74      	ldr	r3, [pc, #464]	; (80058d8 <LCD_Init+0x3980>)
 8005706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	4b72      	ldr	r3, [pc, #456]	; (80058d8 <LCD_Init+0x3980>)
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	615a      	str	r2, [r3, #20]
 8005714:	4b71      	ldr	r3, [pc, #452]	; (80058dc <LCD_Init+0x3984>)
 8005716:	2203      	movs	r2, #3
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	4b6f      	ldr	r3, [pc, #444]	; (80058d8 <LCD_Init+0x3980>)
 800571c:	2280      	movs	r2, #128	; 0x80
 800571e:	615a      	str	r2, [r3, #20]
 8005720:	4b6d      	ldr	r3, [pc, #436]	; (80058d8 <LCD_Init+0x3980>)
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	4b6c      	ldr	r3, [pc, #432]	; (80058d8 <LCD_Init+0x3980>)
 8005728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800572e:	200c      	movs	r0, #12
 8005730:	f000 fef2 	bl	8006518 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005734:	2001      	movs	r0, #1
 8005736:	f7fb f919 	bl	800096c <LCD_WR_REG>
		HAL_Delay(10);
 800573a:	200a      	movs	r0, #10
 800573c:	f000 feec 	bl	8006518 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005740:	20e6      	movs	r0, #230	; 0xe6
 8005742:	f7fb f913 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005746:	4b64      	ldr	r3, [pc, #400]	; (80058d8 <LCD_Init+0x3980>)
 8005748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574c:	611a      	str	r2, [r3, #16]
 800574e:	4b62      	ldr	r3, [pc, #392]	; (80058d8 <LCD_Init+0x3980>)
 8005750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005754:	615a      	str	r2, [r3, #20]
 8005756:	4b61      	ldr	r3, [pc, #388]	; (80058dc <LCD_Init+0x3984>)
 8005758:	222f      	movs	r2, #47	; 0x2f
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	4b5e      	ldr	r3, [pc, #376]	; (80058d8 <LCD_Init+0x3980>)
 800575e:	2280      	movs	r2, #128	; 0x80
 8005760:	615a      	str	r2, [r3, #20]
 8005762:	4b5d      	ldr	r3, [pc, #372]	; (80058d8 <LCD_Init+0x3980>)
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	611a      	str	r2, [r3, #16]
 8005768:	4b5b      	ldr	r3, [pc, #364]	; (80058d8 <LCD_Init+0x3980>)
 800576a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005770:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <LCD_Init+0x3980>)
 8005772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	4b57      	ldr	r3, [pc, #348]	; (80058d8 <LCD_Init+0x3980>)
 800577a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577e:	615a      	str	r2, [r3, #20]
 8005780:	4b56      	ldr	r3, [pc, #344]	; (80058dc <LCD_Init+0x3984>)
 8005782:	22ff      	movs	r2, #255	; 0xff
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	4b54      	ldr	r3, [pc, #336]	; (80058d8 <LCD_Init+0x3980>)
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	615a      	str	r2, [r3, #20]
 800578c:	4b52      	ldr	r3, [pc, #328]	; (80058d8 <LCD_Init+0x3980>)
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	611a      	str	r2, [r3, #16]
 8005792:	4b51      	ldr	r3, [pc, #324]	; (80058d8 <LCD_Init+0x3980>)
 8005794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005798:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800579a:	4b4f      	ldr	r3, [pc, #316]	; (80058d8 <LCD_Init+0x3980>)
 800579c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a0:	611a      	str	r2, [r3, #16]
 80057a2:	4b4d      	ldr	r3, [pc, #308]	; (80058d8 <LCD_Init+0x3980>)
 80057a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a8:	615a      	str	r2, [r3, #20]
 80057aa:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <LCD_Init+0x3984>)
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	60da      	str	r2, [r3, #12]
 80057b0:	4b49      	ldr	r3, [pc, #292]	; (80058d8 <LCD_Init+0x3980>)
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	615a      	str	r2, [r3, #20]
 80057b6:	4b48      	ldr	r3, [pc, #288]	; (80058d8 <LCD_Init+0x3980>)
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	611a      	str	r2, [r3, #16]
 80057bc:	4b46      	ldr	r3, [pc, #280]	; (80058d8 <LCD_Init+0x3980>)
 80057be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80057c4:	20b0      	movs	r0, #176	; 0xb0
 80057c6:	f7fb f8d1 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80057ca:	4b43      	ldr	r3, [pc, #268]	; (80058d8 <LCD_Init+0x3980>)
 80057cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d0:	611a      	str	r2, [r3, #16]
 80057d2:	4b41      	ldr	r3, [pc, #260]	; (80058d8 <LCD_Init+0x3980>)
 80057d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d8:	615a      	str	r2, [r3, #20]
 80057da:	4b40      	ldr	r3, [pc, #256]	; (80058dc <LCD_Init+0x3984>)
 80057dc:	2220      	movs	r2, #32
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	4b3d      	ldr	r3, [pc, #244]	; (80058d8 <LCD_Init+0x3980>)
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	615a      	str	r2, [r3, #20]
 80057e6:	4b3c      	ldr	r3, [pc, #240]	; (80058d8 <LCD_Init+0x3980>)
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	611a      	str	r2, [r3, #16]
 80057ec:	4b3a      	ldr	r3, [pc, #232]	; (80058d8 <LCD_Init+0x3980>)
 80057ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80057f4:	4b38      	ldr	r3, [pc, #224]	; (80058d8 <LCD_Init+0x3980>)
 80057f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057fa:	611a      	str	r2, [r3, #16]
 80057fc:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <LCD_Init+0x3980>)
 80057fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005802:	615a      	str	r2, [r3, #20]
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <LCD_Init+0x3984>)
 8005806:	2200      	movs	r2, #0
 8005808:	60da      	str	r2, [r3, #12]
 800580a:	4b33      	ldr	r3, [pc, #204]	; (80058d8 <LCD_Init+0x3980>)
 800580c:	2280      	movs	r2, #128	; 0x80
 800580e:	615a      	str	r2, [r3, #20]
 8005810:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <LCD_Init+0x3980>)
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	4b30      	ldr	r3, [pc, #192]	; (80058d8 <LCD_Init+0x3980>)
 8005818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800581e:	4b2e      	ldr	r3, [pc, #184]	; (80058d8 <LCD_Init+0x3980>)
 8005820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	4b2c      	ldr	r3, [pc, #176]	; (80058d8 <LCD_Init+0x3980>)
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	615a      	str	r2, [r3, #20]
 800582e:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <LCD_Init+0x3984>)
 8005830:	2203      	movs	r2, #3
 8005832:	60da      	str	r2, [r3, #12]
 8005834:	4b28      	ldr	r3, [pc, #160]	; (80058d8 <LCD_Init+0x3980>)
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	615a      	str	r2, [r3, #20]
 800583a:	4b27      	ldr	r3, [pc, #156]	; (80058d8 <LCD_Init+0x3980>)
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	611a      	str	r2, [r3, #16]
 8005840:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <LCD_Init+0x3980>)
 8005842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005846:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005848:	4b23      	ldr	r3, [pc, #140]	; (80058d8 <LCD_Init+0x3980>)
 800584a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800584e:	611a      	str	r2, [r3, #16]
 8005850:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <LCD_Init+0x3980>)
 8005852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005856:	615a      	str	r2, [r3, #20]
 8005858:	4b20      	ldr	r3, [pc, #128]	; (80058dc <LCD_Init+0x3984>)
 800585a:	f240 321f 	movw	r2, #799	; 0x31f
 800585e:	60da      	str	r2, [r3, #12]
 8005860:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <LCD_Init+0x3980>)
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	615a      	str	r2, [r3, #20]
 8005866:	4b1c      	ldr	r3, [pc, #112]	; (80058d8 <LCD_Init+0x3980>)
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	611a      	str	r2, [r3, #16]
 800586c:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <LCD_Init+0x3980>)
 800586e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005872:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005874:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <LCD_Init+0x3980>)
 8005876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800587a:	611a      	str	r2, [r3, #16]
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <LCD_Init+0x3980>)
 800587e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005882:	615a      	str	r2, [r3, #20]
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <LCD_Init+0x3984>)
 8005886:	2201      	movs	r2, #1
 8005888:	60da      	str	r2, [r3, #12]
 800588a:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <LCD_Init+0x3980>)
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	615a      	str	r2, [r3, #20]
 8005890:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <LCD_Init+0x3980>)
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	611a      	str	r2, [r3, #16]
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <LCD_Init+0x3980>)
 8005898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800589e:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <LCD_Init+0x3980>)
 80058a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a4:	611a      	str	r2, [r3, #16]
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <LCD_Init+0x3980>)
 80058a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ac:	615a      	str	r2, [r3, #20]
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <LCD_Init+0x3984>)
 80058b0:	f240 12df 	movw	r2, #479	; 0x1df
 80058b4:	60da      	str	r2, [r3, #12]
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <LCD_Init+0x3980>)
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	615a      	str	r2, [r3, #20]
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <LCD_Init+0x3980>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	611a      	str	r2, [r3, #16]
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <LCD_Init+0x3980>)
 80058c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80058ca:	4b03      	ldr	r3, [pc, #12]	; (80058d8 <LCD_Init+0x3980>)
 80058cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d0:	e006      	b.n	80058e0 <LCD_Init+0x3988>
 80058d2:	bf00      	nop
 80058d4:	20000030 	.word	0x20000030
 80058d8:	40011000 	.word	0x40011000
 80058dc:	40010c00 	.word	0x40010c00
 80058e0:	611a      	str	r2, [r3, #16]
 80058e2:	4ba3      	ldr	r3, [pc, #652]	; (8005b70 <LCD_Init+0x3c18>)
 80058e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e8:	615a      	str	r2, [r3, #20]
 80058ea:	4ba2      	ldr	r3, [pc, #648]	; (8005b74 <LCD_Init+0x3c1c>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	4b9f      	ldr	r3, [pc, #636]	; (8005b70 <LCD_Init+0x3c18>)
 80058f2:	2280      	movs	r2, #128	; 0x80
 80058f4:	615a      	str	r2, [r3, #20]
 80058f6:	4b9e      	ldr	r3, [pc, #632]	; (8005b70 <LCD_Init+0x3c18>)
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	611a      	str	r2, [r3, #16]
 80058fc:	4b9c      	ldr	r3, [pc, #624]	; (8005b70 <LCD_Init+0x3c18>)
 80058fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005902:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005904:	20b4      	movs	r0, #180	; 0xb4
 8005906:	f7fb f831 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800590a:	4b99      	ldr	r3, [pc, #612]	; (8005b70 <LCD_Init+0x3c18>)
 800590c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005910:	611a      	str	r2, [r3, #16]
 8005912:	4b97      	ldr	r3, [pc, #604]	; (8005b70 <LCD_Init+0x3c18>)
 8005914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005918:	615a      	str	r2, [r3, #20]
 800591a:	4b96      	ldr	r3, [pc, #600]	; (8005b74 <LCD_Init+0x3c1c>)
 800591c:	2204      	movs	r2, #4
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	4b93      	ldr	r3, [pc, #588]	; (8005b70 <LCD_Init+0x3c18>)
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	615a      	str	r2, [r3, #20]
 8005926:	4b92      	ldr	r3, [pc, #584]	; (8005b70 <LCD_Init+0x3c18>)
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	611a      	str	r2, [r3, #16]
 800592c:	4b90      	ldr	r3, [pc, #576]	; (8005b70 <LCD_Init+0x3c18>)
 800592e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005932:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005934:	4b8e      	ldr	r3, [pc, #568]	; (8005b70 <LCD_Init+0x3c18>)
 8005936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800593a:	611a      	str	r2, [r3, #16]
 800593c:	4b8c      	ldr	r3, [pc, #560]	; (8005b70 <LCD_Init+0x3c18>)
 800593e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005942:	615a      	str	r2, [r3, #20]
 8005944:	4b8b      	ldr	r3, [pc, #556]	; (8005b74 <LCD_Init+0x3c1c>)
 8005946:	f240 421f 	movw	r2, #1055	; 0x41f
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <LCD_Init+0x3c18>)
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	615a      	str	r2, [r3, #20]
 8005952:	4b87      	ldr	r3, [pc, #540]	; (8005b70 <LCD_Init+0x3c18>)
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	611a      	str	r2, [r3, #16]
 8005958:	4b85      	ldr	r3, [pc, #532]	; (8005b70 <LCD_Init+0x3c18>)
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005960:	4b83      	ldr	r3, [pc, #524]	; (8005b70 <LCD_Init+0x3c18>)
 8005962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005966:	611a      	str	r2, [r3, #16]
 8005968:	4b81      	ldr	r3, [pc, #516]	; (8005b70 <LCD_Init+0x3c18>)
 800596a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596e:	615a      	str	r2, [r3, #20]
 8005970:	4b80      	ldr	r3, [pc, #512]	; (8005b74 <LCD_Init+0x3c1c>)
 8005972:	2200      	movs	r2, #0
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	4b7e      	ldr	r3, [pc, #504]	; (8005b70 <LCD_Init+0x3c18>)
 8005978:	2280      	movs	r2, #128	; 0x80
 800597a:	615a      	str	r2, [r3, #20]
 800597c:	4b7c      	ldr	r3, [pc, #496]	; (8005b70 <LCD_Init+0x3c18>)
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	4b7b      	ldr	r3, [pc, #492]	; (8005b70 <LCD_Init+0x3c18>)
 8005984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005988:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800598a:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <LCD_Init+0x3c18>)
 800598c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005990:	611a      	str	r2, [r3, #16]
 8005992:	4b77      	ldr	r3, [pc, #476]	; (8005b70 <LCD_Init+0x3c18>)
 8005994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005998:	615a      	str	r2, [r3, #20]
 800599a:	4b76      	ldr	r3, [pc, #472]	; (8005b74 <LCD_Init+0x3c1c>)
 800599c:	222e      	movs	r2, #46	; 0x2e
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	4b73      	ldr	r3, [pc, #460]	; (8005b70 <LCD_Init+0x3c18>)
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	615a      	str	r2, [r3, #20]
 80059a6:	4b72      	ldr	r3, [pc, #456]	; (8005b70 <LCD_Init+0x3c18>)
 80059a8:	2280      	movs	r2, #128	; 0x80
 80059aa:	611a      	str	r2, [r3, #16]
 80059ac:	4b70      	ldr	r3, [pc, #448]	; (8005b70 <LCD_Init+0x3c18>)
 80059ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80059b4:	4b6e      	ldr	r3, [pc, #440]	; (8005b70 <LCD_Init+0x3c18>)
 80059b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ba:	611a      	str	r2, [r3, #16]
 80059bc:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <LCD_Init+0x3c18>)
 80059be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c2:	615a      	str	r2, [r3, #20]
 80059c4:	4b6b      	ldr	r3, [pc, #428]	; (8005b74 <LCD_Init+0x3c1c>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	4b69      	ldr	r3, [pc, #420]	; (8005b70 <LCD_Init+0x3c18>)
 80059cc:	2280      	movs	r2, #128	; 0x80
 80059ce:	615a      	str	r2, [r3, #20]
 80059d0:	4b67      	ldr	r3, [pc, #412]	; (8005b70 <LCD_Init+0x3c18>)
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	611a      	str	r2, [r3, #16]
 80059d6:	4b66      	ldr	r3, [pc, #408]	; (8005b70 <LCD_Init+0x3c18>)
 80059d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80059de:	4b64      	ldr	r3, [pc, #400]	; (8005b70 <LCD_Init+0x3c18>)
 80059e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059e4:	611a      	str	r2, [r3, #16]
 80059e6:	4b62      	ldr	r3, [pc, #392]	; (8005b70 <LCD_Init+0x3c18>)
 80059e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <LCD_Init+0x3c1c>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	60da      	str	r2, [r3, #12]
 80059f4:	4b5e      	ldr	r3, [pc, #376]	; (8005b70 <LCD_Init+0x3c18>)
 80059f6:	2280      	movs	r2, #128	; 0x80
 80059f8:	615a      	str	r2, [r3, #20]
 80059fa:	4b5d      	ldr	r3, [pc, #372]	; (8005b70 <LCD_Init+0x3c18>)
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	611a      	str	r2, [r3, #16]
 8005a00:	4b5b      	ldr	r3, [pc, #364]	; (8005b70 <LCD_Init+0x3c18>)
 8005a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a06:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a08:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <LCD_Init+0x3c18>)
 8005a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	4b57      	ldr	r3, [pc, #348]	; (8005b70 <LCD_Init+0x3c18>)
 8005a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a16:	615a      	str	r2, [r3, #20]
 8005a18:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <LCD_Init+0x3c1c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]
 8005a1e:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <LCD_Init+0x3c18>)
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	615a      	str	r2, [r3, #20]
 8005a24:	4b52      	ldr	r3, [pc, #328]	; (8005b70 <LCD_Init+0x3c18>)
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <LCD_Init+0x3c18>)
 8005a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a32:	4b4f      	ldr	r3, [pc, #316]	; (8005b70 <LCD_Init+0x3c18>)
 8005a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <LCD_Init+0x3c18>)
 8005a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a40:	615a      	str	r2, [r3, #20]
 8005a42:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <LCD_Init+0x3c1c>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	60da      	str	r2, [r3, #12]
 8005a48:	4b49      	ldr	r3, [pc, #292]	; (8005b70 <LCD_Init+0x3c18>)
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	615a      	str	r2, [r3, #20]
 8005a4e:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <LCD_Init+0x3c18>)
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	611a      	str	r2, [r3, #16]
 8005a54:	4b46      	ldr	r3, [pc, #280]	; (8005b70 <LCD_Init+0x3c18>)
 8005a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005a5c:	20b6      	movs	r0, #182	; 0xb6
 8005a5e:	f7fa ff85 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005a62:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <LCD_Init+0x3c18>)
 8005a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	4b41      	ldr	r3, [pc, #260]	; (8005b70 <LCD_Init+0x3c18>)
 8005a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a70:	615a      	str	r2, [r3, #20]
 8005a72:	4b40      	ldr	r3, [pc, #256]	; (8005b74 <LCD_Init+0x3c1c>)
 8005a74:	2202      	movs	r2, #2
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <LCD_Init+0x3c18>)
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	615a      	str	r2, [r3, #20]
 8005a7e:	4b3c      	ldr	r3, [pc, #240]	; (8005b70 <LCD_Init+0x3c18>)
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	611a      	str	r2, [r3, #16]
 8005a84:	4b3a      	ldr	r3, [pc, #232]	; (8005b70 <LCD_Init+0x3c18>)
 8005a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005a8c:	4b38      	ldr	r3, [pc, #224]	; (8005b70 <LCD_Init+0x3c18>)
 8005a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a92:	611a      	str	r2, [r3, #16]
 8005a94:	4b36      	ldr	r3, [pc, #216]	; (8005b70 <LCD_Init+0x3c18>)
 8005a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9a:	615a      	str	r2, [r3, #20]
 8005a9c:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <LCD_Init+0x3c1c>)
 8005a9e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005aa2:	60da      	str	r2, [r3, #12]
 8005aa4:	4b32      	ldr	r3, [pc, #200]	; (8005b70 <LCD_Init+0x3c18>)
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	615a      	str	r2, [r3, #20]
 8005aaa:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <LCD_Init+0x3c18>)
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	611a      	str	r2, [r3, #16]
 8005ab0:	4b2f      	ldr	r3, [pc, #188]	; (8005b70 <LCD_Init+0x3c18>)
 8005ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005ab8:	4b2d      	ldr	r3, [pc, #180]	; (8005b70 <LCD_Init+0x3c18>)
 8005aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005abe:	611a      	str	r2, [r3, #16]
 8005ac0:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <LCD_Init+0x3c18>)
 8005ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac6:	615a      	str	r2, [r3, #20]
 8005ac8:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <LCD_Init+0x3c1c>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	4b28      	ldr	r3, [pc, #160]	; (8005b70 <LCD_Init+0x3c18>)
 8005ad0:	2280      	movs	r2, #128	; 0x80
 8005ad2:	615a      	str	r2, [r3, #20]
 8005ad4:	4b26      	ldr	r3, [pc, #152]	; (8005b70 <LCD_Init+0x3c18>)
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <LCD_Init+0x3c18>)
 8005adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005ae2:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <LCD_Init+0x3c18>)
 8005ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <LCD_Init+0x3c18>)
 8005aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af0:	615a      	str	r2, [r3, #20]
 8005af2:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <LCD_Init+0x3c1c>)
 8005af4:	2217      	movs	r2, #23
 8005af6:	60da      	str	r2, [r3, #12]
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <LCD_Init+0x3c18>)
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	615a      	str	r2, [r3, #20]
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <LCD_Init+0x3c18>)
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	611a      	str	r2, [r3, #16]
 8005b04:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <LCD_Init+0x3c18>)
 8005b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005b0c:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <LCD_Init+0x3c18>)
 8005b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <LCD_Init+0x3c18>)
 8005b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1a:	615a      	str	r2, [r3, #20]
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <LCD_Init+0x3c1c>)
 8005b1e:	2215      	movs	r2, #21
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <LCD_Init+0x3c18>)
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	615a      	str	r2, [r3, #20]
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <LCD_Init+0x3c18>)
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	611a      	str	r2, [r3, #16]
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <LCD_Init+0x3c18>)
 8005b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b34:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <LCD_Init+0x3c18>)
 8005b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <LCD_Init+0x3c18>)
 8005b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b44:	615a      	str	r2, [r3, #20]
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <LCD_Init+0x3c1c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	60da      	str	r2, [r3, #12]
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <LCD_Init+0x3c18>)
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	615a      	str	r2, [r3, #20]
 8005b52:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <LCD_Init+0x3c18>)
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	611a      	str	r2, [r3, #16]
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <LCD_Init+0x3c18>)
 8005b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <LCD_Init+0x3c18>)
 8005b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b66:	611a      	str	r2, [r3, #16]
 8005b68:	4b01      	ldr	r3, [pc, #4]	; (8005b70 <LCD_Init+0x3c18>)
 8005b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6e:	e003      	b.n	8005b78 <LCD_Init+0x3c20>
 8005b70:	40011000 	.word	0x40011000
 8005b74:	40010c00 	.word	0x40010c00
 8005b78:	615a      	str	r2, [r3, #20]
 8005b7a:	4b8b      	ldr	r3, [pc, #556]	; (8005da8 <LCD_Init+0x3e50>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	60da      	str	r2, [r3, #12]
 8005b80:	4b8a      	ldr	r3, [pc, #552]	; (8005dac <LCD_Init+0x3e54>)
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	615a      	str	r2, [r3, #20]
 8005b86:	4b89      	ldr	r3, [pc, #548]	; (8005dac <LCD_Init+0x3e54>)
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	611a      	str	r2, [r3, #16]
 8005b8c:	4b87      	ldr	r3, [pc, #540]	; (8005dac <LCD_Init+0x3e54>)
 8005b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b92:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005b94:	20f0      	movs	r0, #240	; 0xf0
 8005b96:	f7fa fee9 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005b9a:	4b84      	ldr	r3, [pc, #528]	; (8005dac <LCD_Init+0x3e54>)
 8005b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	4b82      	ldr	r3, [pc, #520]	; (8005dac <LCD_Init+0x3e54>)
 8005ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	4b7f      	ldr	r3, [pc, #508]	; (8005da8 <LCD_Init+0x3e50>)
 8005bac:	2203      	movs	r2, #3
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	4b7e      	ldr	r3, [pc, #504]	; (8005dac <LCD_Init+0x3e54>)
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	615a      	str	r2, [r3, #20]
 8005bb6:	4b7d      	ldr	r3, [pc, #500]	; (8005dac <LCD_Init+0x3e54>)
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	611a      	str	r2, [r3, #16]
 8005bbc:	4b7b      	ldr	r3, [pc, #492]	; (8005dac <LCD_Init+0x3e54>)
 8005bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005bc4:	2029      	movs	r0, #41	; 0x29
 8005bc6:	f7fa fed1 	bl	800096c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005bca:	20d0      	movs	r0, #208	; 0xd0
 8005bcc:	f7fa fece 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005bd0:	4b76      	ldr	r3, [pc, #472]	; (8005dac <LCD_Init+0x3e54>)
 8005bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd6:	611a      	str	r2, [r3, #16]
 8005bd8:	4b74      	ldr	r3, [pc, #464]	; (8005dac <LCD_Init+0x3e54>)
 8005bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bde:	615a      	str	r2, [r3, #20]
 8005be0:	4b71      	ldr	r3, [pc, #452]	; (8005da8 <LCD_Init+0x3e50>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	60da      	str	r2, [r3, #12]
 8005be6:	4b71      	ldr	r3, [pc, #452]	; (8005dac <LCD_Init+0x3e54>)
 8005be8:	2280      	movs	r2, #128	; 0x80
 8005bea:	615a      	str	r2, [r3, #20]
 8005bec:	4b6f      	ldr	r3, [pc, #444]	; (8005dac <LCD_Init+0x3e54>)
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	611a      	str	r2, [r3, #16]
 8005bf2:	4b6e      	ldr	r3, [pc, #440]	; (8005dac <LCD_Init+0x3e54>)
 8005bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf8:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005bfa:	20be      	movs	r0, #190	; 0xbe
 8005bfc:	f7fa feb6 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005c00:	4b6a      	ldr	r3, [pc, #424]	; (8005dac <LCD_Init+0x3e54>)
 8005c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c06:	611a      	str	r2, [r3, #16]
 8005c08:	4b68      	ldr	r3, [pc, #416]	; (8005dac <LCD_Init+0x3e54>)
 8005c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0e:	615a      	str	r2, [r3, #20]
 8005c10:	4b65      	ldr	r3, [pc, #404]	; (8005da8 <LCD_Init+0x3e50>)
 8005c12:	2205      	movs	r2, #5
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	4b65      	ldr	r3, [pc, #404]	; (8005dac <LCD_Init+0x3e54>)
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	615a      	str	r2, [r3, #20]
 8005c1c:	4b63      	ldr	r3, [pc, #396]	; (8005dac <LCD_Init+0x3e54>)
 8005c1e:	2280      	movs	r2, #128	; 0x80
 8005c20:	611a      	str	r2, [r3, #16]
 8005c22:	4b62      	ldr	r3, [pc, #392]	; (8005dac <LCD_Init+0x3e54>)
 8005c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005c2a:	4b60      	ldr	r3, [pc, #384]	; (8005dac <LCD_Init+0x3e54>)
 8005c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c30:	611a      	str	r2, [r3, #16]
 8005c32:	4b5e      	ldr	r3, [pc, #376]	; (8005dac <LCD_Init+0x3e54>)
 8005c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c38:	615a      	str	r2, [r3, #20]
 8005c3a:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <LCD_Init+0x3e50>)
 8005c3c:	22fe      	movs	r2, #254	; 0xfe
 8005c3e:	60da      	str	r2, [r3, #12]
 8005c40:	4b5a      	ldr	r3, [pc, #360]	; (8005dac <LCD_Init+0x3e54>)
 8005c42:	2280      	movs	r2, #128	; 0x80
 8005c44:	615a      	str	r2, [r3, #20]
 8005c46:	4b59      	ldr	r3, [pc, #356]	; (8005dac <LCD_Init+0x3e54>)
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	611a      	str	r2, [r3, #16]
 8005c4c:	4b57      	ldr	r3, [pc, #348]	; (8005dac <LCD_Init+0x3e54>)
 8005c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005c54:	4b55      	ldr	r3, [pc, #340]	; (8005dac <LCD_Init+0x3e54>)
 8005c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c5a:	611a      	str	r2, [r3, #16]
 8005c5c:	4b53      	ldr	r3, [pc, #332]	; (8005dac <LCD_Init+0x3e54>)
 8005c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c62:	615a      	str	r2, [r3, #20]
 8005c64:	4b50      	ldr	r3, [pc, #320]	; (8005da8 <LCD_Init+0x3e50>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	4b50      	ldr	r3, [pc, #320]	; (8005dac <LCD_Init+0x3e54>)
 8005c6c:	2280      	movs	r2, #128	; 0x80
 8005c6e:	615a      	str	r2, [r3, #20]
 8005c70:	4b4e      	ldr	r3, [pc, #312]	; (8005dac <LCD_Init+0x3e54>)
 8005c72:	2280      	movs	r2, #128	; 0x80
 8005c74:	611a      	str	r2, [r3, #16]
 8005c76:	4b4d      	ldr	r3, [pc, #308]	; (8005dac <LCD_Init+0x3e54>)
 8005c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005c7e:	4b4b      	ldr	r3, [pc, #300]	; (8005dac <LCD_Init+0x3e54>)
 8005c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c84:	611a      	str	r2, [r3, #16]
 8005c86:	4b49      	ldr	r3, [pc, #292]	; (8005dac <LCD_Init+0x3e54>)
 8005c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8c:	615a      	str	r2, [r3, #20]
 8005c8e:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <LCD_Init+0x3e50>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	4b45      	ldr	r3, [pc, #276]	; (8005dac <LCD_Init+0x3e54>)
 8005c96:	2280      	movs	r2, #128	; 0x80
 8005c98:	615a      	str	r2, [r3, #20]
 8005c9a:	4b44      	ldr	r3, [pc, #272]	; (8005dac <LCD_Init+0x3e54>)
 8005c9c:	2280      	movs	r2, #128	; 0x80
 8005c9e:	611a      	str	r2, [r3, #16]
 8005ca0:	4b42      	ldr	r3, [pc, #264]	; (8005dac <LCD_Init+0x3e54>)
 8005ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005ca8:	4b40      	ldr	r3, [pc, #256]	; (8005dac <LCD_Init+0x3e54>)
 8005caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cae:	611a      	str	r2, [r3, #16]
 8005cb0:	4b3e      	ldr	r3, [pc, #248]	; (8005dac <LCD_Init+0x3e54>)
 8005cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb6:	615a      	str	r2, [r3, #20]
 8005cb8:	4b3b      	ldr	r3, [pc, #236]	; (8005da8 <LCD_Init+0x3e50>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	60da      	str	r2, [r3, #12]
 8005cbe:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <LCD_Init+0x3e54>)
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	615a      	str	r2, [r3, #20]
 8005cc4:	4b39      	ldr	r3, [pc, #228]	; (8005dac <LCD_Init+0x3e54>)
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	4b38      	ldr	r3, [pc, #224]	; (8005dac <LCD_Init+0x3e54>)
 8005ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <LCD_Init+0x3e54>)
 8005cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd8:	611a      	str	r2, [r3, #16]
 8005cda:	4b34      	ldr	r3, [pc, #208]	; (8005dac <LCD_Init+0x3e54>)
 8005cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce0:	615a      	str	r2, [r3, #20]
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <LCD_Init+0x3e50>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	4b30      	ldr	r3, [pc, #192]	; (8005dac <LCD_Init+0x3e54>)
 8005cea:	2280      	movs	r2, #128	; 0x80
 8005cec:	615a      	str	r2, [r3, #20]
 8005cee:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <LCD_Init+0x3e54>)
 8005cf0:	2280      	movs	r2, #128	; 0x80
 8005cf2:	611a      	str	r2, [r3, #16]
 8005cf4:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <LCD_Init+0x3e54>)
 8005cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005cfc:	20b8      	movs	r0, #184	; 0xb8
 8005cfe:	f7fa fe35 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <LCD_Init+0x3e54>)
 8005d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d08:	611a      	str	r2, [r3, #16]
 8005d0a:	4b28      	ldr	r3, [pc, #160]	; (8005dac <LCD_Init+0x3e54>)
 8005d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d10:	615a      	str	r2, [r3, #20]
 8005d12:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <LCD_Init+0x3e50>)
 8005d14:	2203      	movs	r2, #3
 8005d16:	60da      	str	r2, [r3, #12]
 8005d18:	4b24      	ldr	r3, [pc, #144]	; (8005dac <LCD_Init+0x3e54>)
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	615a      	str	r2, [r3, #20]
 8005d1e:	4b23      	ldr	r3, [pc, #140]	; (8005dac <LCD_Init+0x3e54>)
 8005d20:	2280      	movs	r2, #128	; 0x80
 8005d22:	611a      	str	r2, [r3, #16]
 8005d24:	4b21      	ldr	r3, [pc, #132]	; (8005dac <LCD_Init+0x3e54>)
 8005d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005d2c:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <LCD_Init+0x3e54>)
 8005d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d32:	611a      	str	r2, [r3, #16]
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <LCD_Init+0x3e54>)
 8005d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3a:	615a      	str	r2, [r3, #20]
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <LCD_Init+0x3e50>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <LCD_Init+0x3e54>)
 8005d44:	2280      	movs	r2, #128	; 0x80
 8005d46:	615a      	str	r2, [r3, #20]
 8005d48:	4b18      	ldr	r3, [pc, #96]	; (8005dac <LCD_Init+0x3e54>)
 8005d4a:	2280      	movs	r2, #128	; 0x80
 8005d4c:	611a      	str	r2, [r3, #16]
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <LCD_Init+0x3e54>)
 8005d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d54:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005d56:	20ba      	movs	r0, #186	; 0xba
 8005d58:	f7fa fe08 	bl	800096c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005d5c:	4b13      	ldr	r3, [pc, #76]	; (8005dac <LCD_Init+0x3e54>)
 8005d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d62:	611a      	str	r2, [r3, #16]
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <LCD_Init+0x3e54>)
 8005d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6a:	615a      	str	r2, [r3, #20]
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <LCD_Init+0x3e50>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <LCD_Init+0x3e54>)
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	615a      	str	r2, [r3, #20]
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <LCD_Init+0x3e54>)
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	611a      	str	r2, [r3, #16]
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <LCD_Init+0x3e54>)
 8005d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d84:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005d86:	2064      	movs	r0, #100	; 0x64
 8005d88:	f7fb ff36 	bl	8001bf8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f7fb ffd7 	bl	8001d40 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005d92:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <LCD_Init+0x3e58>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005d98:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d9c:	f000 f80a 	bl	8005db4 <LCD_Clear>
}
 8005da0:	bf00      	nop
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40010c00 	.word	0x40010c00
 8005dac:	40011000 	.word	0x40011000
 8005db0:	422201a8 	.word	0x422201a8

08005db4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <LCD_Clear+0xb8>)
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005dc8:	4b28      	ldr	r3, [pc, #160]	; (8005e6c <LCD_Clear+0xb8>)
 8005dca:	885b      	ldrh	r3, [r3, #2]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005dd6:	4b25      	ldr	r3, [pc, #148]	; (8005e6c <LCD_Clear+0xb8>)
 8005dd8:	889b      	ldrh	r3, [r3, #4]
 8005dda:	f646 0204 	movw	r2, #26628	; 0x6804
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d11a      	bne.n	8005e18 <LCD_Clear+0x64>
 8005de2:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <LCD_Clear+0xb8>)
 8005de4:	799b      	ldrb	r3, [r3, #6]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d116      	bne.n	8005e18 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005dea:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <LCD_Clear+0xb8>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005df0:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <LCD_Clear+0xb8>)
 8005df2:	222a      	movs	r2, #42	; 0x2a
 8005df4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <LCD_Clear+0xb8>)
 8005df8:	222b      	movs	r2, #43	; 0x2b
 8005dfa:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f7fa fe86 	bl	8000b10 <LCD_SetCursor>
		lcddev.dir = 1;
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <LCD_Clear+0xb8>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005e0a:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <LCD_Clear+0xb8>)
 8005e0c:	222b      	movs	r2, #43	; 0x2b
 8005e0e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005e10:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <LCD_Clear+0xb8>)
 8005e12:	222a      	movs	r2, #42	; 0x2a
 8005e14:	819a      	strh	r2, [r3, #12]
 8005e16:	e003      	b.n	8005e20 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005e18:	2100      	movs	r1, #0
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f7fa fe78 	bl	8000b10 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005e20:	f7fa fe6a 	bl	8000af8 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e017      	b.n	8005e5a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <LCD_Clear+0xbc>)
 8005e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e30:	611a      	str	r2, [r3, #16]
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <LCD_Clear+0xbc>)
 8005e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e38:	615a      	str	r2, [r3, #20]
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <LCD_Clear+0xc0>)
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	60d3      	str	r3, [r2, #12]
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <LCD_Clear+0xbc>)
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	615a      	str	r2, [r3, #20]
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <LCD_Clear+0xbc>)
 8005e48:	2280      	movs	r2, #128	; 0x80
 8005e4a:	611a      	str	r2, [r3, #16]
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <LCD_Clear+0xbc>)
 8005e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e52:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d3e3      	bcc.n	8005e2a <LCD_Clear+0x76>
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000030 	.word	0x20000030
 8005e70:	40011000 	.word	0x40011000
 8005e74:	40010c00 	.word	0x40010c00

08005e78 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	80fb      	strh	r3, [r7, #6]
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	80bb      	strh	r3, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
 8005e92:	4613      	mov	r3, r2
 8005e94:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005e96:	88bb      	ldrh	r3, [r7, #4]
 8005e98:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005e9a:	78bb      	ldrb	r3, [r7, #2]
 8005e9c:	08db      	lsrs	r3, r3, #3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	78bb      	ldrb	r3, [r7, #2]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	78ba      	ldrb	r2, [r7, #2]
 8005eba:	0852      	lsrs	r2, r2, #1
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	3b20      	subs	r3, #32
 8005ec8:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005eca:	2300      	movs	r3, #0
 8005ecc:	737b      	strb	r3, [r7, #13]
 8005ece:	e069      	b.n	8005fa4 <LCD_ShowChar+0x12c>
		if (size == 12)
 8005ed0:	78bb      	ldrb	r3, [r7, #2]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d10b      	bne.n	8005eee <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	7b79      	ldrb	r1, [r7, #13]
 8005eda:	4838      	ldr	r0, [pc, #224]	; (8005fbc <LCD_ShowChar+0x144>)
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4403      	add	r3, r0
 8005ee6:	440b      	add	r3, r1
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e019      	b.n	8005f22 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005eee:	78bb      	ldrb	r3, [r7, #2]
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d108      	bne.n	8005f06 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005ef4:	78fa      	ldrb	r2, [r7, #3]
 8005ef6:	7b7b      	ldrb	r3, [r7, #13]
 8005ef8:	4931      	ldr	r1, [pc, #196]	; (8005fc0 <LCD_ShowChar+0x148>)
 8005efa:	0112      	lsls	r2, r2, #4
 8005efc:	440a      	add	r2, r1
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	73fb      	strb	r3, [r7, #15]
 8005f04:	e00d      	b.n	8005f22 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005f06:	78bb      	ldrb	r3, [r7, #2]
 8005f08:	2b18      	cmp	r3, #24
 8005f0a:	d150      	bne.n	8005fae <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	7b79      	ldrb	r1, [r7, #13]
 8005f10:	482c      	ldr	r0, [pc, #176]	; (8005fc4 <LCD_ShowChar+0x14c>)
 8005f12:	4613      	mov	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4403      	add	r3, r0
 8005f1c:	440b      	add	r3, r1
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005f22:	2300      	movs	r3, #0
 8005f24:	73bb      	strb	r3, [r7, #14]
 8005f26:	e035      	b.n	8005f94 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	da07      	bge.n	8005f40 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <LCD_ShowChar+0x150>)
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	88b9      	ldrh	r1, [r7, #4]
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fb fbc7 	bl	80016cc <LCD_Fast_DrawPoint>
 8005f3e:	e00a      	b.n	8005f56 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005f40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005f48:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <LCD_ShowChar+0x154>)
 8005f4a:	881a      	ldrh	r2, [r3, #0]
 8005f4c:	88b9      	ldrh	r1, [r7, #4]
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fb fbbb 	bl	80016cc <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
			y++;
 8005f5c:	88bb      	ldrh	r3, [r7, #4]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005f62:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <LCD_ShowChar+0x158>)
 8005f64:	885b      	ldrh	r3, [r3, #2]
 8005f66:	88ba      	ldrh	r2, [r7, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d222      	bcs.n	8005fb2 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005f6c:	88ba      	ldrh	r2, [r7, #4]
 8005f6e:	897b      	ldrh	r3, [r7, #10]
 8005f70:	1ad2      	subs	r2, r2, r3
 8005f72:	78bb      	ldrb	r3, [r7, #2]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d10a      	bne.n	8005f8e <LCD_ShowChar+0x116>
				y = y0;
 8005f78:	897b      	ldrh	r3, [r7, #10]
 8005f7a:	80bb      	strh	r3, [r7, #4]
				x++;
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <LCD_ShowChar+0x158>)
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	88fa      	ldrh	r2, [r7, #6]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d307      	bcc.n	8005f9c <LCD_ShowChar+0x124>
					return;	//超区域了
 8005f8c:	e012      	b.n	8005fb4 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	3301      	adds	r3, #1
 8005f92:	73bb      	strb	r3, [r7, #14]
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	2b07      	cmp	r3, #7
 8005f98:	d9c6      	bls.n	8005f28 <LCD_ShowChar+0xb0>
 8005f9a:	e000      	b.n	8005f9e <LCD_ShowChar+0x126>
				break;
 8005f9c:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005f9e:	7b7b      	ldrb	r3, [r7, #13]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	737b      	strb	r3, [r7, #13]
 8005fa4:	7b7a      	ldrb	r2, [r7, #13]
 8005fa6:	7a7b      	ldrb	r3, [r7, #9]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d391      	bcc.n	8005ed0 <LCD_ShowChar+0x58>
 8005fac:	e002      	b.n	8005fb4 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005fb2:	bf00      	nop
			}
		}
	}
}
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	08008330 	.word	0x08008330
 8005fc0:	080087a4 	.word	0x080087a4
 8005fc4:	08008d94 	.word	0x08008d94
 8005fc8:	2000002c 	.word	0x2000002c
 8005fcc:	20000000 	.word	0x20000000
 8005fd0:	20000030 	.word	0x20000030

08005fd4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	80fb      	strh	r3, [r7, #6]
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	80bb      	strh	r3, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	807b      	strh	r3, [r7, #2]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	73fb      	strb	r3, [r7, #15]
	width += x;
 8005ff6:	887a      	ldrh	r2, [r7, #2]
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	807b      	strh	r3, [r7, #2]
	height += y;
 8005ffe:	883a      	ldrh	r2, [r7, #0]
 8006000:	88bb      	ldrh	r3, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006006:	e024      	b.n	8006052 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	887b      	ldrh	r3, [r7, #2]
 800600c:	429a      	cmp	r2, r3
 800600e:	d307      	bcc.n	8006020 <LCD_ShowString+0x4c>
			x = x0;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006014:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006018:	b29a      	uxth	r2, r3
 800601a:	88bb      	ldrh	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006020:	88ba      	ldrh	r2, [r7, #4]
 8006022:	883b      	ldrh	r3, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d21d      	bcs.n	8006064 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	781a      	ldrb	r2, [r3, #0]
 800602c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006030:	88b9      	ldrh	r1, [r7, #4]
 8006032:	88f8      	ldrh	r0, [r7, #6]
 8006034:	2400      	movs	r4, #0
 8006036:	9400      	str	r4, [sp, #0]
 8006038:	f7ff ff1e 	bl	8005e78 <LCD_ShowChar>
		x += size / 2;
 800603c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	b29a      	uxth	r2, r3
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	4413      	add	r3, r2
 800604a:	80fb      	strh	r3, [r7, #6]
		p++;
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	3301      	adds	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b7e      	cmp	r3, #126	; 0x7e
 8006058:	d805      	bhi.n	8006066 <LCD_ShowString+0x92>
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b1f      	cmp	r3, #31
 8006060:	d8d2      	bhi.n	8006008 <LCD_ShowString+0x34>
	}
}
 8006062:	e000      	b.n	8006066 <LCD_ShowString+0x92>
			break;	//退出
 8006064:	bf00      	nop
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	bd90      	pop	{r4, r7, pc}
	...

08006070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006076:	f000 f9ed 	bl	8006454 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800607a:	f000 f813 	bl	80060a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800607e:	f7fb ff6b 	bl	8001f58 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006082:	f7fa fbd7 	bl	8000834 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006086:	f000 f941 	bl	800630c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 800608a:	2201      	movs	r2, #1
 800608c:	4903      	ldr	r1, [pc, #12]	; (800609c <main+0x2c>)
 800608e:	4804      	ldr	r0, [pc, #16]	; (80060a0 <main+0x30>)
 8006090:	f001 fb5d 	bl	800774e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t x = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	71fb      	strb	r3, [r7, #7]
  while (1)
 8006098:	e7fe      	b.n	8006098 <main+0x28>
 800609a:	bf00      	nop
 800609c:	20000040 	.word	0x20000040
 80060a0:	20000458 	.word	0x20000458

080060a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b090      	sub	sp, #64	; 0x40
 80060a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060aa:	f107 0318 	add.w	r3, r7, #24
 80060ae:	2228      	movs	r2, #40	; 0x28
 80060b0:	2100      	movs	r1, #0
 80060b2:	4618      	mov	r0, r3
 80060b4:	f002 f8f0 	bl	8008298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060b8:	1d3b      	adds	r3, r7, #4
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	609a      	str	r2, [r3, #8]
 80060c2:	60da      	str	r2, [r3, #12]
 80060c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060c6:	2301      	movs	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80060d0:	2300      	movs	r3, #0
 80060d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80060d4:	2301      	movs	r3, #1
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060d8:	2302      	movs	r3, #2
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80060e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060e8:	f107 0318 	add.w	r3, r7, #24
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fe4b 	bl	8006d88 <HAL_RCC_OscConfig>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80060f8:	f000 f818 	bl	800612c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060fc:	230f      	movs	r3, #15
 80060fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006100:	2302      	movs	r3, #2
 8006102:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	2102      	movs	r1, #2
 8006114:	4618      	mov	r0, r3
 8006116:	f001 f8b9 	bl	800728c <HAL_RCC_ClockConfig>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8006120:	f000 f804 	bl	800612c <Error_Handler>
  }
}
 8006124:	bf00      	nop
 8006126:	3740      	adds	r7, #64	; 0x40
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006130:	b672      	cpsid	i
}
 8006132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006134:	e7fe      	b.n	8006134 <Error_Handler+0x8>
	...

08006138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800613e:	4b16      	ldr	r3, [pc, #88]	; (8006198 <HAL_MspInit+0x60>)
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <HAL_MspInit+0x60>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	6193      	str	r3, [r2, #24]
 800614a:	4b13      	ldr	r3, [pc, #76]	; (8006198 <HAL_MspInit+0x60>)
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <HAL_MspInit+0x60>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4a0f      	ldr	r2, [pc, #60]	; (8006198 <HAL_MspInit+0x60>)
 800615c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006160:	61d3      	str	r3, [r2, #28]
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <HAL_MspInit+0x60>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800616e:	2005      	movs	r0, #5
 8006170:	f000 fac2 	bl	80066f8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <HAL_MspInit+0x64>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	4a04      	ldr	r2, [pc, #16]	; (800619c <HAL_MspInit+0x64>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40021000 	.word	0x40021000
 800619c:	40010000 	.word	0x40010000

080061a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80061a4:	e7fe      	b.n	80061a4 <NMI_Handler+0x4>

080061a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061a6:	b480      	push	{r7}
 80061a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061aa:	e7fe      	b.n	80061aa <HardFault_Handler+0x4>

080061ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061b0:	e7fe      	b.n	80061b0 <MemManage_Handler+0x4>

080061b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061b2:	b480      	push	{r7}
 80061b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061b6:	e7fe      	b.n	80061b6 <BusFault_Handler+0x4>

080061b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061bc:	e7fe      	b.n	80061bc <UsageFault_Handler+0x4>

080061be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061be:	b480      	push	{r7}
 80061c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061c2:	bf00      	nop
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061ca:	b480      	push	{r7}
 80061cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061ce:	bf00      	nop
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr

080061d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061d6:	b480      	push	{r7}
 80061d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr

080061e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061e6:	f000 f97b 	bl	80064e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}

080061ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80061f2:	2020      	movs	r0, #32
 80061f4:	f000 fdb0 	bl	8006d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80061f8:	bf00      	nop
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006200:	4804      	ldr	r0, [pc, #16]	; (8006214 <USART1_IRQHandler+0x18>)
 8006202:	f001 fac9 	bl	8007798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 8006206:	2201      	movs	r2, #1
 8006208:	4903      	ldr	r1, [pc, #12]	; (8006218 <USART1_IRQHandler+0x1c>)
 800620a:	4802      	ldr	r0, [pc, #8]	; (8006214 <USART1_IRQHandler+0x18>)
 800620c:	f001 fa9f 	bl	800774e <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 8006210:	bf00      	nop
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000458 	.word	0x20000458
 8006218:	20000040 	.word	0x20000040

0800621c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8006220:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006224:	f000 fd98 	bl	8006d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006228:	bf00      	nop
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8006236:	2064      	movs	r0, #100	; 0x64
 8006238:	f000 f96e 	bl	8006518 <HAL_Delay>
	switch(GPIO_Pin){
 800623c:	88fb      	ldrh	r3, [r7, #6]
 800623e:	2b20      	cmp	r3, #32
 8006240:	d003      	beq.n	800624a <HAL_GPIO_EXTI_Callback+0x1e>
 8006242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006246:	d008      	beq.n	800625a <HAL_GPIO_EXTI_Callback+0x2e>
//			HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
//			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
//		}
//		break;
	default:
			break;
 8006248:	e00f      	b.n	800626a <HAL_GPIO_EXTI_Callback+0x3e>
            HAL_UART_Transmit(&huart1,(uint8_t*)"KEY0 is pressed\n",16,0xffff);
 800624a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800624e:	2210      	movs	r2, #16
 8006250:	4908      	ldr	r1, [pc, #32]	; (8006274 <HAL_GPIO_EXTI_Callback+0x48>)
 8006252:	4809      	ldr	r0, [pc, #36]	; (8006278 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006254:	f001 f9f8 	bl	8007648 <HAL_UART_Transmit>
		break;
 8006258:	e007      	b.n	800626a <HAL_GPIO_EXTI_Callback+0x3e>
			HAL_UART_Transmit(&huart1,(uint8_t*)"KEY1 is pressed\n",16,0xffff);
 800625a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800625e:	2210      	movs	r2, #16
 8006260:	4906      	ldr	r1, [pc, #24]	; (800627c <HAL_GPIO_EXTI_Callback+0x50>)
 8006262:	4805      	ldr	r0, [pc, #20]	; (8006278 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006264:	f001 f9f0 	bl	8007648 <HAL_UART_Transmit>
		break;
 8006268:	bf00      	nop
	}
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	08008308 	.word	0x08008308
 8006278:	20000458 	.word	0x20000458
 800627c:	0800831c 	.word	0x0800831c

08006280 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af02      	add	r7, sp, #8
 8006286:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a17      	ldr	r2, [pc, #92]	; (80062ec <HAL_UART_RxCpltCallback+0x6c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d127      	bne.n	80062e2 <HAL_UART_RxCpltCallback+0x62>
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 8006292:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <HAL_UART_RxCpltCallback+0x70>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b0a      	cmp	r3, #10
 8006298:	d116      	bne.n	80062c8 <HAL_UART_RxCpltCallback+0x48>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <HAL_UART_RxCpltCallback+0x74>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062a4:	4914      	ldr	r1, [pc, #80]	; (80062f8 <HAL_UART_RxCpltCallback+0x78>)
 80062a6:	4815      	ldr	r0, [pc, #84]	; (80062fc <HAL_UART_RxCpltCallback+0x7c>)
 80062a8:	f001 f9ce 	bl	8007648 <HAL_UART_Transmit>
			LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*)uRx_Data);
 80062ac:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <HAL_UART_RxCpltCallback+0x78>)
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	2318      	movs	r3, #24
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2318      	movs	r3, #24
 80062b6:	22c8      	movs	r2, #200	; 0xc8
 80062b8:	2128      	movs	r1, #40	; 0x28
 80062ba:	201e      	movs	r0, #30
 80062bc:	f7ff fe8a 	bl	8005fd4 <LCD_ShowString>
			uLength = 0;
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <HAL_UART_RxCpltCallback+0x74>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
	}else{
		uRx_Data[uLength] = rxBuffer[0];
		uLength++;
	}
	}
}
 80062c6:	e00c      	b.n	80062e2 <HAL_UART_RxCpltCallback+0x62>
		uRx_Data[uLength] = rxBuffer[0];
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <HAL_UART_RxCpltCallback+0x74>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <HAL_UART_RxCpltCallback+0x70>)
 80062d0:	7819      	ldrb	r1, [r3, #0]
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <HAL_UART_RxCpltCallback+0x78>)
 80062d4:	5499      	strb	r1, [r3, r2]
		uLength++;
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <HAL_UART_RxCpltCallback+0x74>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <HAL_UART_RxCpltCallback+0x74>)
 80062e0:	701a      	strb	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40013800 	.word	0x40013800
 80062f0:	20000040 	.word	0x20000040
 80062f4:	20000054 	.word	0x20000054
 80062f8:	20000058 	.word	0x20000058
 80062fc:	20000458 	.word	0x20000458

08006300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006310:	4b11      	ldr	r3, [pc, #68]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 8006312:	4a12      	ldr	r2, [pc, #72]	; (800635c <MX_USART1_UART_Init+0x50>)
 8006314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006316:	4b10      	ldr	r3, [pc, #64]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 8006318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800631c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 8006320:	2200      	movs	r2, #0
 8006322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006324:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 8006326:	2200      	movs	r2, #0
 8006328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 800632c:	2200      	movs	r2, #0
 800632e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006330:	4b09      	ldr	r3, [pc, #36]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 8006332:	220c      	movs	r2, #12
 8006334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006336:	4b08      	ldr	r3, [pc, #32]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 8006338:	2200      	movs	r2, #0
 800633a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 800633e:	2200      	movs	r2, #0
 8006340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006342:	4805      	ldr	r0, [pc, #20]	; (8006358 <MX_USART1_UART_Init+0x4c>)
 8006344:	f001 f930 	bl	80075a8 <HAL_UART_Init>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800634e:	f7ff feed 	bl	800612c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006352:	bf00      	nop
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000458 	.word	0x20000458
 800635c:	40013800 	.word	0x40013800

08006360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006368:	f107 0310 	add.w	r3, r7, #16
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a20      	ldr	r2, [pc, #128]	; (80063fc <HAL_UART_MspInit+0x9c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d139      	bne.n	80063f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006380:	4b1f      	ldr	r3, [pc, #124]	; (8006400 <HAL_UART_MspInit+0xa0>)
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <HAL_UART_MspInit+0xa0>)
 8006386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800638a:	6193      	str	r3, [r2, #24]
 800638c:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <HAL_UART_MspInit+0xa0>)
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <HAL_UART_MspInit+0xa0>)
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_UART_MspInit+0xa0>)
 800639e:	f043 0304 	orr.w	r3, r3, #4
 80063a2:	6193      	str	r3, [r2, #24]
 80063a4:	4b16      	ldr	r3, [pc, #88]	; (8006400 <HAL_UART_MspInit+0xa0>)
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80063b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b6:	2302      	movs	r3, #2
 80063b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063ba:	2303      	movs	r3, #3
 80063bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063be:	f107 0310 	add.w	r3, r7, #16
 80063c2:	4619      	mov	r1, r3
 80063c4:	480f      	ldr	r0, [pc, #60]	; (8006404 <HAL_UART_MspInit+0xa4>)
 80063c6:	f000 fb1b 	bl	8006a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80063ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d8:	f107 0310 	add.w	r3, r7, #16
 80063dc:	4619      	mov	r1, r3
 80063de:	4809      	ldr	r0, [pc, #36]	; (8006404 <HAL_UART_MspInit+0xa4>)
 80063e0:	f000 fb0e 	bl	8006a00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80063e4:	2200      	movs	r2, #0
 80063e6:	2101      	movs	r1, #1
 80063e8:	2025      	movs	r0, #37	; 0x25
 80063ea:	f000 f990 	bl	800670e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80063ee:	2025      	movs	r0, #37	; 0x25
 80063f0:	f000 f9a9 	bl	8006746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80063f4:	bf00      	nop
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40013800 	.word	0x40013800
 8006400:	40021000 	.word	0x40021000
 8006404:	40010800 	.word	0x40010800

08006408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006408:	f7ff ff7a 	bl	8006300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800640c:	480b      	ldr	r0, [pc, #44]	; (800643c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800640e:	490c      	ldr	r1, [pc, #48]	; (8006440 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006410:	4a0c      	ldr	r2, [pc, #48]	; (8006444 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006414:	e002      	b.n	800641c <LoopCopyDataInit>

08006416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800641a:	3304      	adds	r3, #4

0800641c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800641c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800641e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006420:	d3f9      	bcc.n	8006416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006422:	4a09      	ldr	r2, [pc, #36]	; (8006448 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006424:	4c09      	ldr	r4, [pc, #36]	; (800644c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006428:	e001      	b.n	800642e <LoopFillZerobss>

0800642a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800642a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800642c:	3204      	adds	r2, #4

0800642e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800642e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006430:	d3fb      	bcc.n	800642a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006432:	f001 ff39 	bl	80082a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006436:	f7ff fe1b 	bl	8006070 <main>
  bx lr
 800643a:	4770      	bx	lr
  ldr r0, =_sdata
 800643c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006440:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8006444:	08009b24 	.word	0x08009b24
  ldr r2, =_sbss
 8006448:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800644c:	200004a4 	.word	0x200004a4

08006450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006450:	e7fe      	b.n	8006450 <ADC1_2_IRQHandler>
	...

08006454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006458:	4b08      	ldr	r3, [pc, #32]	; (800647c <HAL_Init+0x28>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a07      	ldr	r2, [pc, #28]	; (800647c <HAL_Init+0x28>)
 800645e:	f043 0310 	orr.w	r3, r3, #16
 8006462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006464:	2003      	movs	r0, #3
 8006466:	f000 f947 	bl	80066f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800646a:	2000      	movs	r0, #0
 800646c:	f000 f808 	bl	8006480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006470:	f7ff fe62 	bl	8006138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40022000 	.word	0x40022000

08006480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_InitTick+0x54>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <HAL_InitTick+0x58>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006496:	fbb3 f3f1 	udiv	r3, r3, r1
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f95f 	bl	8006762 <HAL_SYSTICK_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e00e      	b.n	80064cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b0f      	cmp	r3, #15
 80064b2:	d80a      	bhi.n	80064ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064b4:	2200      	movs	r2, #0
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	f000 f927 	bl	800670e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064c0:	4a06      	ldr	r2, [pc, #24]	; (80064dc <HAL_InitTick+0x5c>)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20000004 	.word	0x20000004
 80064d8:	2000000c 	.word	0x2000000c
 80064dc:	20000008 	.word	0x20000008

080064e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <HAL_IncTick+0x1c>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_IncTick+0x20>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	4a03      	ldr	r2, [pc, #12]	; (8006500 <HAL_IncTick+0x20>)
 80064f2:	6013      	str	r3, [r2, #0]
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr
 80064fc:	2000000c 	.word	0x2000000c
 8006500:	200004a0 	.word	0x200004a0

08006504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return uwTick;
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <HAL_GetTick+0x10>)
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	200004a0 	.word	0x200004a0

08006518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006520:	f7ff fff0 	bl	8006504 <HAL_GetTick>
 8006524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d005      	beq.n	800653e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <HAL_Delay+0x44>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800653e:	bf00      	nop
 8006540:	f7ff ffe0 	bl	8006504 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	429a      	cmp	r2, r3
 800654e:	d8f7      	bhi.n	8006540 <HAL_Delay+0x28>
  {
  }
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	2000000c 	.word	0x2000000c

08006560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800657c:	4013      	ands	r3, r2
 800657e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800658c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006592:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	60d3      	str	r3, [r2, #12]
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <__NVIC_GetPriorityGrouping+0x18>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	0a1b      	lsrs	r3, r3, #8
 80065b2:	f003 0307 	and.w	r3, r3, #7
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	e000ed00 	.word	0xe000ed00

080065c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	db0b      	blt.n	80065ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	f003 021f 	and.w	r2, r3, #31
 80065dc:	4906      	ldr	r1, [pc, #24]	; (80065f8 <__NVIC_EnableIRQ+0x34>)
 80065de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	2001      	movs	r0, #1
 80065e6:	fa00 f202 	lsl.w	r2, r0, r2
 80065ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	e000e100 	.word	0xe000e100

080065fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	6039      	str	r1, [r7, #0]
 8006606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660c:	2b00      	cmp	r3, #0
 800660e:	db0a      	blt.n	8006626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	b2da      	uxtb	r2, r3
 8006614:	490c      	ldr	r1, [pc, #48]	; (8006648 <__NVIC_SetPriority+0x4c>)
 8006616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661a:	0112      	lsls	r2, r2, #4
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	440b      	add	r3, r1
 8006620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006624:	e00a      	b.n	800663c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4908      	ldr	r1, [pc, #32]	; (800664c <__NVIC_SetPriority+0x50>)
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	3b04      	subs	r3, #4
 8006634:	0112      	lsls	r2, r2, #4
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	440b      	add	r3, r1
 800663a:	761a      	strb	r2, [r3, #24]
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	e000e100 	.word	0xe000e100
 800664c:	e000ed00 	.word	0xe000ed00

08006650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006650:	b480      	push	{r7}
 8006652:	b089      	sub	sp, #36	; 0x24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f1c3 0307 	rsb	r3, r3, #7
 800666a:	2b04      	cmp	r3, #4
 800666c:	bf28      	it	cs
 800666e:	2304      	movcs	r3, #4
 8006670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3304      	adds	r3, #4
 8006676:	2b06      	cmp	r3, #6
 8006678:	d902      	bls.n	8006680 <NVIC_EncodePriority+0x30>
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3b03      	subs	r3, #3
 800667e:	e000      	b.n	8006682 <NVIC_EncodePriority+0x32>
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006684:	f04f 32ff 	mov.w	r2, #4294967295
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43da      	mvns	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	401a      	ands	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006698:	f04f 31ff 	mov.w	r1, #4294967295
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	fa01 f303 	lsl.w	r3, r1, r3
 80066a2:	43d9      	mvns	r1, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a8:	4313      	orrs	r3, r2
         );
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3724      	adds	r7, #36	; 0x24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3b01      	subs	r3, #1
 80066c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066c4:	d301      	bcc.n	80066ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066c6:	2301      	movs	r3, #1
 80066c8:	e00f      	b.n	80066ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066ca:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <SysTick_Config+0x40>)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066d2:	210f      	movs	r1, #15
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295
 80066d8:	f7ff ff90 	bl	80065fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <SysTick_Config+0x40>)
 80066de:	2200      	movs	r2, #0
 80066e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066e2:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <SysTick_Config+0x40>)
 80066e4:	2207      	movs	r2, #7
 80066e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	e000e010 	.word	0xe000e010

080066f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff ff2d 	bl	8006560 <__NVIC_SetPriorityGrouping>
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800670e:	b580      	push	{r7, lr}
 8006710:	b086      	sub	sp, #24
 8006712:	af00      	add	r7, sp, #0
 8006714:	4603      	mov	r3, r0
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006720:	f7ff ff42 	bl	80065a8 <__NVIC_GetPriorityGrouping>
 8006724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	6978      	ldr	r0, [r7, #20]
 800672c:	f7ff ff90 	bl	8006650 <NVIC_EncodePriority>
 8006730:	4602      	mov	r2, r0
 8006732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff ff5f 	bl	80065fc <__NVIC_SetPriority>
}
 800673e:	bf00      	nop
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	4603      	mov	r3, r0
 800674e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff ff35 	bl	80065c4 <__NVIC_EnableIRQ>
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff ffa2 	bl	80066b4 <SysTick_Config>
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d008      	beq.n	80067a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2204      	movs	r2, #4
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e020      	b.n	80067e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 020e 	bic.w	r2, r2, #14
 80067b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f202 	lsl.w	r2, r1, r2
 80067d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d005      	beq.n	8006814 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2204      	movs	r2, #4
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
 8006812:	e0d6      	b.n	80069c2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 020e 	bic.w	r2, r2, #14
 8006822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	4b64      	ldr	r3, [pc, #400]	; (80069cc <HAL_DMA_Abort_IT+0x1dc>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d958      	bls.n	80068f2 <HAL_DMA_Abort_IT+0x102>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a62      	ldr	r2, [pc, #392]	; (80069d0 <HAL_DMA_Abort_IT+0x1e0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d04f      	beq.n	80068ea <HAL_DMA_Abort_IT+0xfa>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a61      	ldr	r2, [pc, #388]	; (80069d4 <HAL_DMA_Abort_IT+0x1e4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d048      	beq.n	80068e6 <HAL_DMA_Abort_IT+0xf6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a5f      	ldr	r2, [pc, #380]	; (80069d8 <HAL_DMA_Abort_IT+0x1e8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d040      	beq.n	80068e0 <HAL_DMA_Abort_IT+0xf0>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a5e      	ldr	r2, [pc, #376]	; (80069dc <HAL_DMA_Abort_IT+0x1ec>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d038      	beq.n	80068da <HAL_DMA_Abort_IT+0xea>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a5c      	ldr	r2, [pc, #368]	; (80069e0 <HAL_DMA_Abort_IT+0x1f0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d030      	beq.n	80068d4 <HAL_DMA_Abort_IT+0xe4>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a5b      	ldr	r2, [pc, #364]	; (80069e4 <HAL_DMA_Abort_IT+0x1f4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d028      	beq.n	80068ce <HAL_DMA_Abort_IT+0xde>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a52      	ldr	r2, [pc, #328]	; (80069cc <HAL_DMA_Abort_IT+0x1dc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d020      	beq.n	80068c8 <HAL_DMA_Abort_IT+0xd8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a57      	ldr	r2, [pc, #348]	; (80069e8 <HAL_DMA_Abort_IT+0x1f8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d019      	beq.n	80068c4 <HAL_DMA_Abort_IT+0xd4>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a55      	ldr	r2, [pc, #340]	; (80069ec <HAL_DMA_Abort_IT+0x1fc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d012      	beq.n	80068c0 <HAL_DMA_Abort_IT+0xd0>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a54      	ldr	r2, [pc, #336]	; (80069f0 <HAL_DMA_Abort_IT+0x200>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00a      	beq.n	80068ba <HAL_DMA_Abort_IT+0xca>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a52      	ldr	r2, [pc, #328]	; (80069f4 <HAL_DMA_Abort_IT+0x204>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d102      	bne.n	80068b4 <HAL_DMA_Abort_IT+0xc4>
 80068ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068b2:	e01b      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068b8:	e018      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068be:	e015      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068c0:	2310      	movs	r3, #16
 80068c2:	e013      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e011      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068cc:	e00e      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068d2:	e00b      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068d8:	e008      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068de:	e005      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068e4:	e002      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068e6:	2310      	movs	r3, #16
 80068e8:	e000      	b.n	80068ec <HAL_DMA_Abort_IT+0xfc>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4a42      	ldr	r2, [pc, #264]	; (80069f8 <HAL_DMA_Abort_IT+0x208>)
 80068ee:	6053      	str	r3, [r2, #4]
 80068f0:	e057      	b.n	80069a2 <HAL_DMA_Abort_IT+0x1b2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a36      	ldr	r2, [pc, #216]	; (80069d0 <HAL_DMA_Abort_IT+0x1e0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d04f      	beq.n	800699c <HAL_DMA_Abort_IT+0x1ac>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a34      	ldr	r2, [pc, #208]	; (80069d4 <HAL_DMA_Abort_IT+0x1e4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d048      	beq.n	8006998 <HAL_DMA_Abort_IT+0x1a8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a33      	ldr	r2, [pc, #204]	; (80069d8 <HAL_DMA_Abort_IT+0x1e8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d040      	beq.n	8006992 <HAL_DMA_Abort_IT+0x1a2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a31      	ldr	r2, [pc, #196]	; (80069dc <HAL_DMA_Abort_IT+0x1ec>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d038      	beq.n	800698c <HAL_DMA_Abort_IT+0x19c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a30      	ldr	r2, [pc, #192]	; (80069e0 <HAL_DMA_Abort_IT+0x1f0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d030      	beq.n	8006986 <HAL_DMA_Abort_IT+0x196>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2e      	ldr	r2, [pc, #184]	; (80069e4 <HAL_DMA_Abort_IT+0x1f4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d028      	beq.n	8006980 <HAL_DMA_Abort_IT+0x190>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a26      	ldr	r2, [pc, #152]	; (80069cc <HAL_DMA_Abort_IT+0x1dc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d020      	beq.n	800697a <HAL_DMA_Abort_IT+0x18a>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_DMA_Abort_IT+0x1f8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d019      	beq.n	8006976 <HAL_DMA_Abort_IT+0x186>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a29      	ldr	r2, [pc, #164]	; (80069ec <HAL_DMA_Abort_IT+0x1fc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d012      	beq.n	8006972 <HAL_DMA_Abort_IT+0x182>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a27      	ldr	r2, [pc, #156]	; (80069f0 <HAL_DMA_Abort_IT+0x200>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00a      	beq.n	800696c <HAL_DMA_Abort_IT+0x17c>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a26      	ldr	r2, [pc, #152]	; (80069f4 <HAL_DMA_Abort_IT+0x204>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d102      	bne.n	8006966 <HAL_DMA_Abort_IT+0x176>
 8006960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006964:	e01b      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 8006966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800696a:	e018      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 800696c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006970:	e015      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 8006972:	2310      	movs	r3, #16
 8006974:	e013      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 8006976:	2301      	movs	r3, #1
 8006978:	e011      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 800697a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800697e:	e00e      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 8006980:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006984:	e00b      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 8006986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800698a:	e008      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 800698c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006990:	e005      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 8006992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006996:	e002      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 8006998:	2310      	movs	r3, #16
 800699a:	e000      	b.n	800699e <HAL_DMA_Abort_IT+0x1ae>
 800699c:	2301      	movs	r3, #1
 800699e:	4a17      	ldr	r2, [pc, #92]	; (80069fc <HAL_DMA_Abort_IT+0x20c>)
 80069a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
    } 
  }
  return status;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40020080 	.word	0x40020080
 80069d0:	40020008 	.word	0x40020008
 80069d4:	4002001c 	.word	0x4002001c
 80069d8:	40020030 	.word	0x40020030
 80069dc:	40020044 	.word	0x40020044
 80069e0:	40020058 	.word	0x40020058
 80069e4:	4002006c 	.word	0x4002006c
 80069e8:	40020408 	.word	0x40020408
 80069ec:	4002041c 	.word	0x4002041c
 80069f0:	40020430 	.word	0x40020430
 80069f4:	40020444 	.word	0x40020444
 80069f8:	40020400 	.word	0x40020400
 80069fc:	40020000 	.word	0x40020000

08006a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b08b      	sub	sp, #44	; 0x2c
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a12:	e179      	b.n	8006d08 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006a14:	2201      	movs	r2, #1
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	4013      	ands	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	f040 8168 	bne.w	8006d02 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4a96      	ldr	r2, [pc, #600]	; (8006c90 <HAL_GPIO_Init+0x290>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d05e      	beq.n	8006afa <HAL_GPIO_Init+0xfa>
 8006a3c:	4a94      	ldr	r2, [pc, #592]	; (8006c90 <HAL_GPIO_Init+0x290>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d875      	bhi.n	8006b2e <HAL_GPIO_Init+0x12e>
 8006a42:	4a94      	ldr	r2, [pc, #592]	; (8006c94 <HAL_GPIO_Init+0x294>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d058      	beq.n	8006afa <HAL_GPIO_Init+0xfa>
 8006a48:	4a92      	ldr	r2, [pc, #584]	; (8006c94 <HAL_GPIO_Init+0x294>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d86f      	bhi.n	8006b2e <HAL_GPIO_Init+0x12e>
 8006a4e:	4a92      	ldr	r2, [pc, #584]	; (8006c98 <HAL_GPIO_Init+0x298>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d052      	beq.n	8006afa <HAL_GPIO_Init+0xfa>
 8006a54:	4a90      	ldr	r2, [pc, #576]	; (8006c98 <HAL_GPIO_Init+0x298>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d869      	bhi.n	8006b2e <HAL_GPIO_Init+0x12e>
 8006a5a:	4a90      	ldr	r2, [pc, #576]	; (8006c9c <HAL_GPIO_Init+0x29c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d04c      	beq.n	8006afa <HAL_GPIO_Init+0xfa>
 8006a60:	4a8e      	ldr	r2, [pc, #568]	; (8006c9c <HAL_GPIO_Init+0x29c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d863      	bhi.n	8006b2e <HAL_GPIO_Init+0x12e>
 8006a66:	4a8e      	ldr	r2, [pc, #568]	; (8006ca0 <HAL_GPIO_Init+0x2a0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d046      	beq.n	8006afa <HAL_GPIO_Init+0xfa>
 8006a6c:	4a8c      	ldr	r2, [pc, #560]	; (8006ca0 <HAL_GPIO_Init+0x2a0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d85d      	bhi.n	8006b2e <HAL_GPIO_Init+0x12e>
 8006a72:	2b12      	cmp	r3, #18
 8006a74:	d82a      	bhi.n	8006acc <HAL_GPIO_Init+0xcc>
 8006a76:	2b12      	cmp	r3, #18
 8006a78:	d859      	bhi.n	8006b2e <HAL_GPIO_Init+0x12e>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <HAL_GPIO_Init+0x80>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006afb 	.word	0x08006afb
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	08006ae7 	.word	0x08006ae7
 8006a8c:	08006b29 	.word	0x08006b29
 8006a90:	08006b2f 	.word	0x08006b2f
 8006a94:	08006b2f 	.word	0x08006b2f
 8006a98:	08006b2f 	.word	0x08006b2f
 8006a9c:	08006b2f 	.word	0x08006b2f
 8006aa0:	08006b2f 	.word	0x08006b2f
 8006aa4:	08006b2f 	.word	0x08006b2f
 8006aa8:	08006b2f 	.word	0x08006b2f
 8006aac:	08006b2f 	.word	0x08006b2f
 8006ab0:	08006b2f 	.word	0x08006b2f
 8006ab4:	08006b2f 	.word	0x08006b2f
 8006ab8:	08006b2f 	.word	0x08006b2f
 8006abc:	08006b2f 	.word	0x08006b2f
 8006ac0:	08006b2f 	.word	0x08006b2f
 8006ac4:	08006add 	.word	0x08006add
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	4a75      	ldr	r2, [pc, #468]	; (8006ca4 <HAL_GPIO_Init+0x2a4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006ad2:	e02c      	b.n	8006b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	623b      	str	r3, [r7, #32]
          break;
 8006ada:	e029      	b.n	8006b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	623b      	str	r3, [r7, #32]
          break;
 8006ae4:	e024      	b.n	8006b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	3308      	adds	r3, #8
 8006aec:	623b      	str	r3, [r7, #32]
          break;
 8006aee:	e01f      	b.n	8006b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	330c      	adds	r3, #12
 8006af6:	623b      	str	r3, [r7, #32]
          break;
 8006af8:	e01a      	b.n	8006b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006b02:	2304      	movs	r3, #4
 8006b04:	623b      	str	r3, [r7, #32]
          break;
 8006b06:	e013      	b.n	8006b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d105      	bne.n	8006b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006b10:	2308      	movs	r3, #8
 8006b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	611a      	str	r2, [r3, #16]
          break;
 8006b1a:	e009      	b.n	8006b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	615a      	str	r2, [r3, #20]
          break;
 8006b26:	e003      	b.n	8006b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	623b      	str	r3, [r7, #32]
          break;
 8006b2c:	e000      	b.n	8006b30 <HAL_GPIO_Init+0x130>
          break;
 8006b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2bff      	cmp	r3, #255	; 0xff
 8006b34:	d801      	bhi.n	8006b3a <HAL_GPIO_Init+0x13a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	e001      	b.n	8006b3e <HAL_GPIO_Init+0x13e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2bff      	cmp	r3, #255	; 0xff
 8006b44:	d802      	bhi.n	8006b4c <HAL_GPIO_Init+0x14c>
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	e002      	b.n	8006b52 <HAL_GPIO_Init+0x152>
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	3b08      	subs	r3, #8
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	210f      	movs	r1, #15
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	43db      	mvns	r3, r3
 8006b62:	401a      	ands	r2, r3
 8006b64:	6a39      	ldr	r1, [r7, #32]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80c1 	beq.w	8006d02 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b80:	4b49      	ldr	r3, [pc, #292]	; (8006ca8 <HAL_GPIO_Init+0x2a8>)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	4a48      	ldr	r2, [pc, #288]	; (8006ca8 <HAL_GPIO_Init+0x2a8>)
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	6193      	str	r3, [r2, #24]
 8006b8c:	4b46      	ldr	r3, [pc, #280]	; (8006ca8 <HAL_GPIO_Init+0x2a8>)
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b98:	4a44      	ldr	r2, [pc, #272]	; (8006cac <HAL_GPIO_Init+0x2ac>)
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	089b      	lsrs	r3, r3, #2
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	220f      	movs	r2, #15
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a3c      	ldr	r2, [pc, #240]	; (8006cb0 <HAL_GPIO_Init+0x2b0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d01f      	beq.n	8006c04 <HAL_GPIO_Init+0x204>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a3b      	ldr	r2, [pc, #236]	; (8006cb4 <HAL_GPIO_Init+0x2b4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d019      	beq.n	8006c00 <HAL_GPIO_Init+0x200>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a3a      	ldr	r2, [pc, #232]	; (8006cb8 <HAL_GPIO_Init+0x2b8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <HAL_GPIO_Init+0x1fc>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a39      	ldr	r2, [pc, #228]	; (8006cbc <HAL_GPIO_Init+0x2bc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00d      	beq.n	8006bf8 <HAL_GPIO_Init+0x1f8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a38      	ldr	r2, [pc, #224]	; (8006cc0 <HAL_GPIO_Init+0x2c0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d007      	beq.n	8006bf4 <HAL_GPIO_Init+0x1f4>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a37      	ldr	r2, [pc, #220]	; (8006cc4 <HAL_GPIO_Init+0x2c4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d101      	bne.n	8006bf0 <HAL_GPIO_Init+0x1f0>
 8006bec:	2305      	movs	r3, #5
 8006bee:	e00a      	b.n	8006c06 <HAL_GPIO_Init+0x206>
 8006bf0:	2306      	movs	r3, #6
 8006bf2:	e008      	b.n	8006c06 <HAL_GPIO_Init+0x206>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	e006      	b.n	8006c06 <HAL_GPIO_Init+0x206>
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e004      	b.n	8006c06 <HAL_GPIO_Init+0x206>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e002      	b.n	8006c06 <HAL_GPIO_Init+0x206>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <HAL_GPIO_Init+0x206>
 8006c04:	2300      	movs	r3, #0
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	f002 0203 	and.w	r2, r2, #3
 8006c0c:	0092      	lsls	r2, r2, #2
 8006c0e:	4093      	lsls	r3, r2
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006c16:	4925      	ldr	r1, [pc, #148]	; (8006cac <HAL_GPIO_Init+0x2ac>)
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	089b      	lsrs	r3, r3, #2
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d006      	beq.n	8006c3e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	4924      	ldr	r1, [pc, #144]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]
 8006c3c:	e006      	b.n	8006c4c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	43db      	mvns	r3, r3
 8006c46:	4920      	ldr	r1, [pc, #128]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c58:	4b1b      	ldr	r3, [pc, #108]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	491a      	ldr	r1, [pc, #104]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60cb      	str	r3, [r1, #12]
 8006c64:	e006      	b.n	8006c74 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	4916      	ldr	r1, [pc, #88]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d025      	beq.n	8006ccc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c80:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	4910      	ldr	r1, [pc, #64]	; (8006cc8 <HAL_GPIO_Init+0x2c8>)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]
 8006c8c:	e025      	b.n	8006cda <HAL_GPIO_Init+0x2da>
 8006c8e:	bf00      	nop
 8006c90:	10320000 	.word	0x10320000
 8006c94:	10310000 	.word	0x10310000
 8006c98:	10220000 	.word	0x10220000
 8006c9c:	10210000 	.word	0x10210000
 8006ca0:	10120000 	.word	0x10120000
 8006ca4:	10110000 	.word	0x10110000
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40010800 	.word	0x40010800
 8006cb4:	40010c00 	.word	0x40010c00
 8006cb8:	40011000 	.word	0x40011000
 8006cbc:	40011400 	.word	0x40011400
 8006cc0:	40011800 	.word	0x40011800
 8006cc4:	40011c00 	.word	0x40011c00
 8006cc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006ccc:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <HAL_GPIO_Init+0x324>)
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	4913      	ldr	r1, [pc, #76]	; (8006d24 <HAL_GPIO_Init+0x324>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d006      	beq.n	8006cf4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <HAL_GPIO_Init+0x324>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	490e      	ldr	r1, [pc, #56]	; (8006d24 <HAL_GPIO_Init+0x324>)
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]
 8006cf2:	e006      	b.n	8006d02 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_GPIO_Init+0x324>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	4909      	ldr	r1, [pc, #36]	; (8006d24 <HAL_GPIO_Init+0x324>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	3301      	adds	r3, #1
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f47f ae7e 	bne.w	8006a14 <HAL_GPIO_Init+0x14>
  }
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	372c      	adds	r7, #44	; 0x2c
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	40010400 	.word	0x40010400

08006d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
 8006d34:	4613      	mov	r3, r2
 8006d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d38:	787b      	ldrb	r3, [r7, #1]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d3e:	887a      	ldrh	r2, [r7, #2]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006d44:	e003      	b.n	8006d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006d46:	887b      	ldrh	r3, [r7, #2]
 8006d48:	041a      	lsls	r2, r3, #16
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	611a      	str	r2, [r3, #16]
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d62:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d64:	695a      	ldr	r2, [r3, #20]
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d006      	beq.n	8006d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d6e:	4a05      	ldr	r2, [pc, #20]	; (8006d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d70:	88fb      	ldrh	r3, [r7, #6]
 8006d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fa58 	bl	800622c <HAL_GPIO_EXTI_Callback>
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40010400 	.word	0x40010400

08006d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e272      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8087 	beq.w	8006eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006da8:	4b92      	ldr	r3, [pc, #584]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f003 030c 	and.w	r3, r3, #12
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d00c      	beq.n	8006dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006db4:	4b8f      	ldr	r3, [pc, #572]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 030c 	and.w	r3, r3, #12
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d112      	bne.n	8006de6 <HAL_RCC_OscConfig+0x5e>
 8006dc0:	4b8c      	ldr	r3, [pc, #560]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d10b      	bne.n	8006de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dce:	4b89      	ldr	r3, [pc, #548]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d06c      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x12c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d168      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e24c      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dee:	d106      	bne.n	8006dfe <HAL_RCC_OscConfig+0x76>
 8006df0:	4b80      	ldr	r3, [pc, #512]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a7f      	ldr	r2, [pc, #508]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	e02e      	b.n	8006e5c <HAL_RCC_OscConfig+0xd4>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <HAL_RCC_OscConfig+0x98>
 8006e06:	4b7b      	ldr	r3, [pc, #492]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a7a      	ldr	r2, [pc, #488]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	4b78      	ldr	r3, [pc, #480]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a77      	ldr	r2, [pc, #476]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e01d      	b.n	8006e5c <HAL_RCC_OscConfig+0xd4>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCC_OscConfig+0xbc>
 8006e2a:	4b72      	ldr	r3, [pc, #456]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a71      	ldr	r2, [pc, #452]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	4b6f      	ldr	r3, [pc, #444]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a6e      	ldr	r2, [pc, #440]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	e00b      	b.n	8006e5c <HAL_RCC_OscConfig+0xd4>
 8006e44:	4b6b      	ldr	r3, [pc, #428]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a6a      	ldr	r2, [pc, #424]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4b68      	ldr	r3, [pc, #416]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a67      	ldr	r2, [pc, #412]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e64:	f7ff fb4e 	bl	8006504 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e6c:	f7ff fb4a 	bl	8006504 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b64      	cmp	r3, #100	; 0x64
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e200      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7e:	4b5d      	ldr	r3, [pc, #372]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0xe4>
 8006e8a:	e014      	b.n	8006eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7ff fb3a 	bl	8006504 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e94:	f7ff fb36 	bl	8006504 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b64      	cmp	r3, #100	; 0x64
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e1ec      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ea6:	4b53      	ldr	r3, [pc, #332]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x10c>
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d063      	beq.n	8006f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ec2:	4b4c      	ldr	r3, [pc, #304]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ece:	4b49      	ldr	r3, [pc, #292]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d11c      	bne.n	8006f14 <HAL_RCC_OscConfig+0x18c>
 8006eda:	4b46      	ldr	r3, [pc, #280]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d116      	bne.n	8006f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ee6:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_RCC_OscConfig+0x176>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d001      	beq.n	8006efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e1c0      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efe:	4b3d      	ldr	r3, [pc, #244]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	4939      	ldr	r1, [pc, #228]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f12:	e03a      	b.n	8006f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d020      	beq.n	8006f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f1c:	4b36      	ldr	r3, [pc, #216]	; (8006ff8 <HAL_RCC_OscConfig+0x270>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f22:	f7ff faef 	bl	8006504 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f2a:	f7ff faeb 	bl	8006504 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e1a1      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3c:	4b2d      	ldr	r3, [pc, #180]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0f0      	beq.n	8006f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f48:	4b2a      	ldr	r3, [pc, #168]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4927      	ldr	r1, [pc, #156]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
 8006f5c:	e015      	b.n	8006f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f5e:	4b26      	ldr	r3, [pc, #152]	; (8006ff8 <HAL_RCC_OscConfig+0x270>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f64:	f7ff face 	bl	8006504 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f6c:	f7ff faca 	bl	8006504 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e180      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f0      	bne.n	8006f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d03a      	beq.n	800700c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d019      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f9e:	4b17      	ldr	r3, [pc, #92]	; (8006ffc <HAL_RCC_OscConfig+0x274>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fa4:	f7ff faae 	bl	8006504 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fac:	f7ff faaa 	bl	8006504 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e160      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006fca:	2001      	movs	r0, #1
 8006fcc:	f000 face 	bl	800756c <RCC_Delay>
 8006fd0:	e01c      	b.n	800700c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <HAL_RCC_OscConfig+0x274>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd8:	f7ff fa94 	bl	8006504 <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fde:	e00f      	b.n	8007000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe0:	f7ff fa90 	bl	8006504 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d908      	bls.n	8007000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e146      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
 8006ff2:	bf00      	nop
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	42420000 	.word	0x42420000
 8006ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007000:	4b92      	ldr	r3, [pc, #584]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e9      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80a6 	beq.w	8007166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800701e:	4b8b      	ldr	r3, [pc, #556]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800702a:	4b88      	ldr	r3, [pc, #544]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	4a87      	ldr	r2, [pc, #540]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007034:	61d3      	str	r3, [r2, #28]
 8007036:	4b85      	ldr	r3, [pc, #532]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800703e:	60bb      	str	r3, [r7, #8]
 8007040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007046:	4b82      	ldr	r3, [pc, #520]	; (8007250 <HAL_RCC_OscConfig+0x4c8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d118      	bne.n	8007084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007052:	4b7f      	ldr	r3, [pc, #508]	; (8007250 <HAL_RCC_OscConfig+0x4c8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a7e      	ldr	r2, [pc, #504]	; (8007250 <HAL_RCC_OscConfig+0x4c8>)
 8007058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800705e:	f7ff fa51 	bl	8006504 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007066:	f7ff fa4d 	bl	8006504 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b64      	cmp	r3, #100	; 0x64
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e103      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007078:	4b75      	ldr	r3, [pc, #468]	; (8007250 <HAL_RCC_OscConfig+0x4c8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d106      	bne.n	800709a <HAL_RCC_OscConfig+0x312>
 800708c:	4b6f      	ldr	r3, [pc, #444]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	4a6e      	ldr	r2, [pc, #440]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	6213      	str	r3, [r2, #32]
 8007098:	e02d      	b.n	80070f6 <HAL_RCC_OscConfig+0x36e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10c      	bne.n	80070bc <HAL_RCC_OscConfig+0x334>
 80070a2:	4b6a      	ldr	r3, [pc, #424]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	4a69      	ldr	r2, [pc, #420]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	6213      	str	r3, [r2, #32]
 80070ae:	4b67      	ldr	r3, [pc, #412]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	4a66      	ldr	r2, [pc, #408]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070b4:	f023 0304 	bic.w	r3, r3, #4
 80070b8:	6213      	str	r3, [r2, #32]
 80070ba:	e01c      	b.n	80070f6 <HAL_RCC_OscConfig+0x36e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	d10c      	bne.n	80070de <HAL_RCC_OscConfig+0x356>
 80070c4:	4b61      	ldr	r3, [pc, #388]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	4a60      	ldr	r2, [pc, #384]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070ca:	f043 0304 	orr.w	r3, r3, #4
 80070ce:	6213      	str	r3, [r2, #32]
 80070d0:	4b5e      	ldr	r3, [pc, #376]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	4a5d      	ldr	r2, [pc, #372]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	6213      	str	r3, [r2, #32]
 80070dc:	e00b      	b.n	80070f6 <HAL_RCC_OscConfig+0x36e>
 80070de:	4b5b      	ldr	r3, [pc, #364]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	4a5a      	ldr	r2, [pc, #360]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	6213      	str	r3, [r2, #32]
 80070ea:	4b58      	ldr	r3, [pc, #352]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	4a57      	ldr	r2, [pc, #348]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070f0:	f023 0304 	bic.w	r3, r3, #4
 80070f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d015      	beq.n	800712a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070fe:	f7ff fa01 	bl	8006504 <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007104:	e00a      	b.n	800711c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7ff f9fd 	bl	8006504 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	; 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e0b1      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711c:	4b4b      	ldr	r3, [pc, #300]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0ee      	beq.n	8007106 <HAL_RCC_OscConfig+0x37e>
 8007128:	e014      	b.n	8007154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712a:	f7ff f9eb 	bl	8006504 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007130:	e00a      	b.n	8007148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007132:	f7ff f9e7 	bl	8006504 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e09b      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007148:	4b40      	ldr	r3, [pc, #256]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ee      	bne.n	8007132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715a:	4b3c      	ldr	r3, [pc, #240]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	4a3b      	ldr	r2, [pc, #236]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8087 	beq.w	800727e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007170:	4b36      	ldr	r3, [pc, #216]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	2b08      	cmp	r3, #8
 800717a:	d061      	beq.n	8007240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d146      	bne.n	8007212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007184:	4b33      	ldr	r3, [pc, #204]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718a:	f7ff f9bb 	bl	8006504 <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007192:	f7ff f9b7 	bl	8006504 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e06d      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f0      	bne.n	8007192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b8:	d108      	bne.n	80071cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	4921      	ldr	r1, [pc, #132]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071cc:	4b1f      	ldr	r3, [pc, #124]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a19      	ldr	r1, [r3, #32]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	430b      	orrs	r3, r1
 80071de:	491b      	ldr	r1, [pc, #108]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071e4:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ea:	f7ff f98b 	bl	8006504 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f2:	f7ff f987 	bl	8006504 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e03d      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007204:	4b11      	ldr	r3, [pc, #68]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <HAL_RCC_OscConfig+0x46a>
 8007210:	e035      	b.n	800727e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007212:	4b10      	ldr	r3, [pc, #64]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007218:	f7ff f974 	bl	8006504 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007220:	f7ff f970 	bl	8006504 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e026      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1f0      	bne.n	8007220 <HAL_RCC_OscConfig+0x498>
 800723e:	e01e      	b.n	800727e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d107      	bne.n	8007258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e019      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
 800724c:	40021000 	.word	0x40021000
 8007250:	40007000 	.word	0x40007000
 8007254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007258:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <HAL_RCC_OscConfig+0x500>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	429a      	cmp	r2, r3
 800726a:	d106      	bne.n	800727a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007276:	429a      	cmp	r2, r3
 8007278:	d001      	beq.n	800727e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40021000 	.word	0x40021000

0800728c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e0d0      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072a0:	4b6a      	ldr	r3, [pc, #424]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d910      	bls.n	80072d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ae:	4b67      	ldr	r3, [pc, #412]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f023 0207 	bic.w	r2, r3, #7
 80072b6:	4965      	ldr	r1, [pc, #404]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072be:	4b63      	ldr	r3, [pc, #396]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d001      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0b8      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d020      	beq.n	800731e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072e8:	4b59      	ldr	r3, [pc, #356]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4a58      	ldr	r2, [pc, #352]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80072ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007300:	4b53      	ldr	r3, [pc, #332]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	4a52      	ldr	r2, [pc, #328]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007306:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800730a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800730c:	4b50      	ldr	r3, [pc, #320]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	494d      	ldr	r1, [pc, #308]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d040      	beq.n	80073ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d107      	bne.n	8007342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007332:	4b47      	ldr	r3, [pc, #284]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d115      	bne.n	800736a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e07f      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d107      	bne.n	800735a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800734a:	4b41      	ldr	r3, [pc, #260]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e073      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800735a:	4b3d      	ldr	r3, [pc, #244]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e06b      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800736a:	4b39      	ldr	r3, [pc, #228]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f023 0203 	bic.w	r2, r3, #3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4936      	ldr	r1, [pc, #216]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007378:	4313      	orrs	r3, r2
 800737a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800737c:	f7ff f8c2 	bl	8006504 <HAL_GetTick>
 8007380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007382:	e00a      	b.n	800739a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007384:	f7ff f8be 	bl	8006504 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007392:	4293      	cmp	r3, r2
 8007394:	d901      	bls.n	800739a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e053      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800739a:	4b2d      	ldr	r3, [pc, #180]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f003 020c 	and.w	r2, r3, #12
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d1eb      	bne.n	8007384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073ac:	4b27      	ldr	r3, [pc, #156]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d210      	bcs.n	80073dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ba:	4b24      	ldr	r3, [pc, #144]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 0207 	bic.w	r2, r3, #7
 80073c2:	4922      	ldr	r1, [pc, #136]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ca:	4b20      	ldr	r3, [pc, #128]	; (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d001      	beq.n	80073dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e032      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d008      	beq.n	80073fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073e8:	4b19      	ldr	r3, [pc, #100]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4916      	ldr	r1, [pc, #88]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007406:	4b12      	ldr	r3, [pc, #72]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	490e      	ldr	r1, [pc, #56]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800741a:	f000 f821 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 800741e:	4602      	mov	r2, r0
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	091b      	lsrs	r3, r3, #4
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	490a      	ldr	r1, [pc, #40]	; (8007454 <HAL_RCC_ClockConfig+0x1c8>)
 800742c:	5ccb      	ldrb	r3, [r1, r3]
 800742e:	fa22 f303 	lsr.w	r3, r2, r3
 8007432:	4a09      	ldr	r2, [pc, #36]	; (8007458 <HAL_RCC_ClockConfig+0x1cc>)
 8007434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <HAL_RCC_ClockConfig+0x1d0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff f820 	bl	8006480 <HAL_InitTick>

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40022000 	.word	0x40022000
 8007450:	40021000 	.word	0x40021000
 8007454:	08009af0 	.word	0x08009af0
 8007458:	20000004 	.word	0x20000004
 800745c:	20000008 	.word	0x20000008

08007460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800747a:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 030c 	and.w	r3, r3, #12
 8007486:	2b04      	cmp	r3, #4
 8007488:	d002      	beq.n	8007490 <HAL_RCC_GetSysClockFreq+0x30>
 800748a:	2b08      	cmp	r3, #8
 800748c:	d003      	beq.n	8007496 <HAL_RCC_GetSysClockFreq+0x36>
 800748e:	e027      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007490:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007492:	613b      	str	r3, [r7, #16]
      break;
 8007494:	e027      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	0c9b      	lsrs	r3, r3, #18
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	4a17      	ldr	r2, [pc, #92]	; (80074fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80074a0:	5cd3      	ldrb	r3, [r2, r3]
 80074a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d010      	beq.n	80074d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80074ae:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	0c5b      	lsrs	r3, r3, #17
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	4a11      	ldr	r2, [pc, #68]	; (8007500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a0d      	ldr	r2, [pc, #52]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80074c2:	fb03 f202 	mul.w	r2, r3, r2
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e004      	b.n	80074da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a0c      	ldr	r2, [pc, #48]	; (8007504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	613b      	str	r3, [r7, #16]
      break;
 80074de:	e002      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80074e2:	613b      	str	r3, [r7, #16]
      break;
 80074e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074e6:	693b      	ldr	r3, [r7, #16]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40021000 	.word	0x40021000
 80074f8:	007a1200 	.word	0x007a1200
 80074fc:	08009b08 	.word	0x08009b08
 8007500:	08009b18 	.word	0x08009b18
 8007504:	003d0900 	.word	0x003d0900

08007508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800750c:	4b02      	ldr	r3, [pc, #8]	; (8007518 <HAL_RCC_GetHCLKFreq+0x10>)
 800750e:	681b      	ldr	r3, [r3, #0]
}
 8007510:	4618      	mov	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr
 8007518:	20000004 	.word	0x20000004

0800751c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007520:	f7ff fff2 	bl	8007508 <HAL_RCC_GetHCLKFreq>
 8007524:	4602      	mov	r2, r0
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	4903      	ldr	r1, [pc, #12]	; (8007540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007532:	5ccb      	ldrb	r3, [r1, r3]
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007538:	4618      	mov	r0, r3
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40021000 	.word	0x40021000
 8007540:	08009b00 	.word	0x08009b00

08007544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007548:	f7ff ffde 	bl	8007508 <HAL_RCC_GetHCLKFreq>
 800754c:	4602      	mov	r2, r0
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	0adb      	lsrs	r3, r3, #11
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	4903      	ldr	r1, [pc, #12]	; (8007568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800755a:	5ccb      	ldrb	r3, [r1, r3]
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007560:	4618      	mov	r0, r3
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40021000 	.word	0x40021000
 8007568:	08009b00 	.word	0x08009b00

0800756c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <RCC_Delay+0x34>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <RCC_Delay+0x38>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	0a5b      	lsrs	r3, r3, #9
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007588:	bf00      	nop
  }
  while (Delay --);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	60fa      	str	r2, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f9      	bne.n	8007588 <RCC_Delay+0x1c>
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr
 80075a0:	20000004 	.word	0x20000004
 80075a4:	10624dd3 	.word	0x10624dd3

080075a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e042      	b.n	8007640 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fe fec6 	bl	8006360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2224      	movs	r2, #36	; 0x24
 80075d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fdc5 	bl	800817c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08a      	sub	sp, #40	; 0x28
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b20      	cmp	r3, #32
 8007666:	d16d      	bne.n	8007744 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <HAL_UART_Transmit+0x2c>
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e066      	b.n	8007746 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2221      	movs	r2, #33	; 0x21
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007686:	f7fe ff3d 	bl	8006504 <HAL_GetTick>
 800768a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a0:	d108      	bne.n	80076b4 <HAL_UART_Transmit+0x6c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	e003      	b.n	80076bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076bc:	e02a      	b.n	8007714 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2200      	movs	r2, #0
 80076c6:	2180      	movs	r1, #128	; 0x80
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fb14 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e036      	b.n	8007746 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	3302      	adds	r3, #2
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	e007      	b.n	8007706 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	3301      	adds	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1cf      	bne.n	80076be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	2140      	movs	r1, #64	; 0x40
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fae4 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e006      	b.n	8007746 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e000      	b.n	8007746 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
  }
}
 8007746:	4618      	mov	r0, r3
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	4613      	mov	r3, r2
 800775a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b20      	cmp	r3, #32
 8007766:	d112      	bne.n	800778e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_UART_Receive_IT+0x26>
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e00b      	b.n	8007790 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	461a      	mov	r2, r3
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fb24 	bl	8007dd2 <UART_Start_Receive_IT>
 800778a:	4603      	mov	r3, r0
 800778c:	e000      	b.n	8007790 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800778e:	2302      	movs	r3, #2
  }
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b0ba      	sub	sp, #232	; 0xe8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077be:	2300      	movs	r3, #0
 80077c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80077d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10f      	bne.n	80077fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <HAL_UART_IRQHandler+0x66>
 80077ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fc01 	bl	8007ffe <UART_Receive_IT>
      return;
 80077fc:	e25b      	b.n	8007cb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80de 	beq.w	80079c4 <HAL_UART_IRQHandler+0x22c>
 8007808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80d1 	beq.w	80079c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <HAL_UART_IRQHandler+0xae>
 800782e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	f043 0201 	orr.w	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_UART_IRQHandler+0xd2>
 8007852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007862:	f043 0202 	orr.w	r2, r3, #2
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <HAL_UART_IRQHandler+0xf6>
 8007876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	f043 0204 	orr.w	r2, r3, #4
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d011      	beq.n	80078be <HAL_UART_IRQHandler+0x126>
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	f043 0208 	orr.w	r2, r3, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 81f2 	beq.w	8007cac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d008      	beq.n	80078e6 <HAL_UART_IRQHandler+0x14e>
 80078d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fb8c 	bl	8007ffe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bf14      	ite	ne
 80078f4:	2301      	movne	r3, #1
 80078f6:	2300      	moveq	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <HAL_UART_IRQHandler+0x17a>
 800790a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800790e:	2b00      	cmp	r3, #0
 8007910:	d04f      	beq.n	80079b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa96 	bl	8007e44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d041      	beq.n	80079aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3314      	adds	r3, #20
 800792c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800793c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3314      	adds	r3, #20
 800794e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800795e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007962:	e841 2300 	strex	r3, r2, [r1]
 8007966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800796a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1d9      	bne.n	8007926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d013      	beq.n	80079a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	4a7e      	ldr	r2, [pc, #504]	; (8007b78 <HAL_UART_IRQHandler+0x3e0>)
 8007980:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe ff32 	bl	80067f0 <HAL_DMA_Abort_IT>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d016      	beq.n	80079c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	e00e      	b.n	80079c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f993 	bl	8007cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a8:	e00a      	b.n	80079c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f98f 	bl	8007cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	e006      	b.n	80079c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f98b 	bl	8007cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80079be:	e175      	b.n	8007cac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c0:	bf00      	nop
    return;
 80079c2:	e173      	b.n	8007cac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	f040 814f 	bne.w	8007c6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8148 	beq.w	8007c6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8141 	beq.w	8007c6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ea:	2300      	movs	r3, #0
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60bb      	str	r3, [r7, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	60bb      	str	r3, [r7, #8]
 80079fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80b6 	beq.w	8007b7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8145 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	f080 813e 	bcs.w	8007cb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	f000 8088 	beq.w	8007b58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1d9      	bne.n	8007a48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3314      	adds	r3, #20
 8007a9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aa6:	f023 0301 	bic.w	r3, r3, #1
 8007aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ab8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007abc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ac0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e1      	bne.n	8007a94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3314      	adds	r3, #20
 8007af0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007af4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e3      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b28:	f023 0310 	bic.w	r3, r3, #16
 8007b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e3      	bne.n	8007b16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fe11 	bl	800677a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f8b6 	bl	8007ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b74:	e09c      	b.n	8007cb0 <HAL_UART_IRQHandler+0x518>
 8007b76:	bf00      	nop
 8007b78:	08007f09 	.word	0x08007f09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 808e 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8089 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8007bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e3      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3314      	adds	r3, #20
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3314      	adds	r3, #20
 8007bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e3      	bne.n	8007bda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	330c      	adds	r3, #12
 8007c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c44:	61fa      	str	r2, [r7, #28]
 8007c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	617b      	str	r3, [r7, #20]
   return(result);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e3      	bne.n	8007c20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f83b 	bl	8007ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c6a:	e023      	b.n	8007cb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d009      	beq.n	8007c8c <HAL_UART_IRQHandler+0x4f4>
 8007c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f953 	bl	8007f30 <UART_Transmit_IT>
    return;
 8007c8a:	e014      	b.n	8007cb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00e      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x51e>
 8007c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f992 	bl	8007fce <UART_EndTransmit_IT>
    return;
 8007caa:	e004      	b.n	8007cb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007cac:	bf00      	nop
 8007cae:	e002      	b.n	8007cb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007cb4:	bf00      	nop
  }
}
 8007cb6:	37e8      	adds	r7, #232	; 0xe8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b090      	sub	sp, #64	; 0x40
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d06:	e050      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d04c      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d16:	f7fe fbf5 	bl	8006504 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d241      	bcs.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	330c      	adds	r3, #12
 8007d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d46:	637a      	str	r2, [r7, #52]	; 0x34
 8007d48:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3314      	adds	r3, #20
 8007d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f023 0301 	bic.w	r3, r3, #1
 8007d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3314      	adds	r3, #20
 8007d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d7a:	623a      	str	r2, [r7, #32]
 8007d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	69f9      	ldr	r1, [r7, #28]
 8007d80:	6a3a      	ldr	r2, [r7, #32]
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e5      	bne.n	8007d5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e00f      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4013      	ands	r3, r2
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d09f      	beq.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3740      	adds	r7, #64	; 0x40
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	88fa      	ldrh	r2, [r7, #6]
 8007dea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2222      	movs	r2, #34	; 0x22
 8007dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0220 	orr.w	r2, r2, #32
 8007e36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b095      	sub	sp, #84	; 0x54
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e6c:	643a      	str	r2, [r7, #64]	; 0x40
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e5      	bne.n	8007e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3314      	adds	r3, #20
 8007e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f023 0301 	bic.w	r3, r3, #1
 8007e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e5      	bne.n	8007e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d119      	bne.n	8007ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f023 0310 	bic.w	r3, r3, #16
 8007ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007edc:	61ba      	str	r2, [r7, #24]
 8007ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6979      	ldr	r1, [r7, #20]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e5      	bne.n	8007ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007efe:	bf00      	nop
 8007f00:	3754      	adds	r7, #84	; 0x54
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fed3 	bl	8007cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b21      	cmp	r3, #33	; 0x21
 8007f42:	d13e      	bne.n	8007fc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4c:	d114      	bne.n	8007f78 <UART_Transmit_IT+0x48>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d110      	bne.n	8007f78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	1c9a      	adds	r2, r3, #2
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	621a      	str	r2, [r3, #32]
 8007f76:	e008      	b.n	8007f8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	1c59      	adds	r1, r3, #1
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6211      	str	r1, [r2, #32]
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	4619      	mov	r1, r3
 8007f98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10f      	bne.n	8007fbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e000      	b.n	8007fc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007fc2:	2302      	movs	r3, #2
  }
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr

08007fce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fe4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff fe64 	bl	8007cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b08c      	sub	sp, #48	; 0x30
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b22      	cmp	r3, #34	; 0x22
 8008010:	f040 80ae 	bne.w	8008170 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800801c:	d117      	bne.n	800804e <UART_Receive_IT+0x50>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d113      	bne.n	800804e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	b29b      	uxth	r3, r3
 8008038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803c:	b29a      	uxth	r2, r3
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	1c9a      	adds	r2, r3, #2
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
 800804c:	e026      	b.n	800809c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008054:	2300      	movs	r3, #0
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008060:	d007      	beq.n	8008072 <UART_Receive_IT+0x74>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <UART_Receive_IT+0x82>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	e008      	b.n	8008092 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808c:	b2da      	uxtb	r2, r3
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4619      	mov	r1, r3
 80080aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d15d      	bne.n	800816c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0220 	bic.w	r2, r2, #32
 80080be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695a      	ldr	r2, [r3, #20]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d135      	bne.n	8008162 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	613b      	str	r3, [r7, #16]
   return(result);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f023 0310 	bic.w	r3, r3, #16
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811c:	623a      	str	r2, [r7, #32]
 800811e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	69f9      	ldr	r1, [r7, #28]
 8008122:	6a3a      	ldr	r2, [r7, #32]
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	61bb      	str	r3, [r7, #24]
   return(result);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0310 	and.w	r3, r3, #16
 800813a:	2b10      	cmp	r3, #16
 800813c:	d10a      	bne.n	8008154 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fdc0 	bl	8007ce0 <HAL_UARTEx_RxEventCallback>
 8008160:	e002      	b.n	8008168 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe f88c 	bl	8006280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	e002      	b.n	8008172 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	e000      	b.n	8008172 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008170:	2302      	movs	r3, #2
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3730      	adds	r7, #48	; 0x30
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80081b6:	f023 030c 	bic.w	r3, r3, #12
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	430b      	orrs	r3, r1
 80081c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a2c      	ldr	r2, [pc, #176]	; (8008290 <UART_SetConfig+0x114>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d103      	bne.n	80081ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80081e4:	f7ff f9ae 	bl	8007544 <HAL_RCC_GetPCLK2Freq>
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	e002      	b.n	80081f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80081ec:	f7ff f996 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 80081f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009a      	lsls	r2, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	fbb2 f3f3 	udiv	r3, r2, r3
 8008208:	4a22      	ldr	r2, [pc, #136]	; (8008294 <UART_SetConfig+0x118>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	0119      	lsls	r1, r3, #4
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009a      	lsls	r2, r3, #2
 800821c:	441a      	add	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	fbb2 f2f3 	udiv	r2, r2, r3
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <UART_SetConfig+0x118>)
 800822a:	fba3 0302 	umull	r0, r3, r3, r2
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	2064      	movs	r0, #100	; 0x64
 8008232:	fb00 f303 	mul.w	r3, r0, r3
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	3332      	adds	r3, #50	; 0x32
 800823c:	4a15      	ldr	r2, [pc, #84]	; (8008294 <UART_SetConfig+0x118>)
 800823e:	fba2 2303 	umull	r2, r3, r2, r3
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008248:	4419      	add	r1, r3
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009a      	lsls	r2, r3, #2
 8008254:	441a      	add	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <UART_SetConfig+0x118>)
 8008262:	fba3 0302 	umull	r0, r3, r3, r2
 8008266:	095b      	lsrs	r3, r3, #5
 8008268:	2064      	movs	r0, #100	; 0x64
 800826a:	fb00 f303 	mul.w	r3, r0, r3
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	011b      	lsls	r3, r3, #4
 8008272:	3332      	adds	r3, #50	; 0x32
 8008274:	4a07      	ldr	r2, [pc, #28]	; (8008294 <UART_SetConfig+0x118>)
 8008276:	fba2 2303 	umull	r2, r3, r2, r3
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	f003 020f 	and.w	r2, r3, #15
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	440a      	add	r2, r1
 8008286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	40013800 	.word	0x40013800
 8008294:	51eb851f 	.word	0x51eb851f

08008298 <memset>:
 8008298:	4603      	mov	r3, r0
 800829a:	4402      	add	r2, r0
 800829c:	4293      	cmp	r3, r2
 800829e:	d100      	bne.n	80082a2 <memset+0xa>
 80082a0:	4770      	bx	lr
 80082a2:	f803 1b01 	strb.w	r1, [r3], #1
 80082a6:	e7f9      	b.n	800829c <memset+0x4>

080082a8 <__libc_init_array>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	2600      	movs	r6, #0
 80082ac:	4d0c      	ldr	r5, [pc, #48]	; (80082e0 <__libc_init_array+0x38>)
 80082ae:	4c0d      	ldr	r4, [pc, #52]	; (80082e4 <__libc_init_array+0x3c>)
 80082b0:	1b64      	subs	r4, r4, r5
 80082b2:	10a4      	asrs	r4, r4, #2
 80082b4:	42a6      	cmp	r6, r4
 80082b6:	d109      	bne.n	80082cc <__libc_init_array+0x24>
 80082b8:	f000 f81a 	bl	80082f0 <_init>
 80082bc:	2600      	movs	r6, #0
 80082be:	4d0a      	ldr	r5, [pc, #40]	; (80082e8 <__libc_init_array+0x40>)
 80082c0:	4c0a      	ldr	r4, [pc, #40]	; (80082ec <__libc_init_array+0x44>)
 80082c2:	1b64      	subs	r4, r4, r5
 80082c4:	10a4      	asrs	r4, r4, #2
 80082c6:	42a6      	cmp	r6, r4
 80082c8:	d105      	bne.n	80082d6 <__libc_init_array+0x2e>
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d0:	4798      	blx	r3
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7ee      	b.n	80082b4 <__libc_init_array+0xc>
 80082d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082da:	4798      	blx	r3
 80082dc:	3601      	adds	r6, #1
 80082de:	e7f2      	b.n	80082c6 <__libc_init_array+0x1e>
 80082e0:	08009b1c 	.word	0x08009b1c
 80082e4:	08009b1c 	.word	0x08009b1c
 80082e8:	08009b1c 	.word	0x08009b1c
 80082ec:	08009b20 	.word	0x08009b20

080082f0 <_init>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr

080082fc <_fini>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	bf00      	nop
 8008300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008302:	bc08      	pop	{r3}
 8008304:	469e      	mov	lr, r3
 8008306:	4770      	bx	lr
