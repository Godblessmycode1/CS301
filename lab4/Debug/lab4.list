
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001844  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092bc  080092bc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080092bc  080092bc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092bc  080092bc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080092c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000060  08009324  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08009324  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003975  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012a7  00000000  00000000  00023a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000520  00000000  00000000  00024ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003b8  00000000  00000000  00025208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c9d  00000000  00000000  000255c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000074d2  00000000  00000000  0003e25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e3a2  00000000  00000000  0004572f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a4  00000000  00000000  000d3ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000d5378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	08007a60 	.word	0x08007a60

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	08007a60 	.word	0x08007a60

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_GPIO_Init+0x40>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <MX_GPIO_Init+0x40>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_GPIO_Init+0x40>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_GPIO_Init+0x40>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <MX_GPIO_Init+0x40>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_GPIO_Init+0x40>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40021000 	.word	0x40021000

08000878 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <LCD_WR_REG+0x40>)
 8000884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000888:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <LCD_WR_REG+0x40>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LCD_WR_REG+0x44>)
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <LCD_WR_REG+0x40>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <LCD_WR_REG+0x40>)
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <LCD_WR_REG+0x40>)
 80008a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008aa:	611a      	str	r2, [r3, #16]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <LCD_WR_DATAX+0x40>)
 80008cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d0:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <LCD_WR_DATAX+0x40>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LCD_WR_DATAX+0x44>)
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <LCD_WR_DATAX+0x40>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <LCD_WR_DATAX+0x40>)
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LCD_WR_DATAX+0x40>)
 80008ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f2:	611a      	str	r2, [r3, #16]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40011000 	.word	0x40011000
 8000904:	40010c00 	.word	0x40010c00

08000908 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <LCD_RD_DATA+0x7c>)
 8000910:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000914:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <LCD_RD_DATA+0x7c>)
 8000918:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800091c:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <LCD_RD_DATA+0x7c>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <LCD_RD_DATA+0x80>)
 8000926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092a:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <LCD_RD_DATA+0x80>)
 800092e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000932:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <LCD_RD_DATA+0x80>)
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <LCD_RD_DATA+0x84>)
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	f648 1289 	movw	r2, #35209	; 0x8989
 8000942:	4293      	cmp	r3, r2
 8000944:	d102      	bne.n	800094c <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000946:	2001      	movs	r0, #1
 8000948:	f005 fd5e 	bl	8006408 <HAL_Delay>
	t = DATAIN
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <LCD_RD_DATA+0x7c>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <LCD_RD_DATA+0x80>)
 8000954:	2240      	movs	r2, #64	; 0x40
 8000956:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <LCD_RD_DATA+0x80>)
 800095a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095e:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <LCD_RD_DATA+0x7c>)
 8000962:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000966:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LCD_RD_DATA+0x7c>)
 800096a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800096e:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <LCD_RD_DATA+0x7c>)
 8000972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000976:	60da      	str	r2, [r3, #12]
	return t;
 8000978:	88fb      	ldrh	r3, [r7, #6]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010c00 	.word	0x40010c00
 8000988:	40011000 	.word	0x40011000
 800098c:	20000080 	.word	0x20000080

08000990 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	80fb      	strh	r3, [r7, #6]
 800099c:	4613      	mov	r3, r2
 800099e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff68 	bl	8000878 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <LCD_WriteReg+0x4c>)
 80009aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <LCD_WriteReg+0x4c>)
 80009b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <LCD_WriteReg+0x50>)
 80009ba:	88bb      	ldrh	r3, [r7, #4]
 80009bc:	60d3      	str	r3, [r2, #12]
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <LCD_WriteReg+0x4c>)
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <LCD_WriteReg+0x4c>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <LCD_WriteReg+0x4c>)
 80009cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d0:	611a      	str	r2, [r3, #16]
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40011000 	.word	0x40011000
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff41 	bl	8000878 <LCD_WR_REG>
	return LCD_RD_DATA();
 80009f6:	f7ff ff87 	bl	8000908 <LCD_RD_DATA>
 80009fa:	4603      	mov	r3, r0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <LCD_WriteRAM_Prepare+0x14>)
 8000a0a:	891b      	ldrh	r3, [r3, #8]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff33 	bl	8000878 <LCD_WR_REG>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000080 	.word	0x20000080

08000a1c <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	80fb      	strh	r3, [r7, #6]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000a2c:	4b73      	ldr	r3, [pc, #460]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000a2e:	889b      	ldrh	r3, [r3, #4]
 8000a30:	f249 3241 	movw	r2, #37697	; 0x9341
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d005      	beq.n	8000a44 <LCD_SetCursor+0x28>
 8000a38:	4b70      	ldr	r3, [pc, #448]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000a3a:	889b      	ldrh	r3, [r3, #4]
 8000a3c:	f245 3210 	movw	r2, #21264	; 0x5310
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d164      	bne.n	8000b0e <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000a44:	4b6d      	ldr	r3, [pc, #436]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000a46:	895b      	ldrh	r3, [r3, #10]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff15 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000a4e:	4b6c      	ldr	r3, [pc, #432]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	4b6a      	ldr	r3, [pc, #424]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b67      	ldr	r3, [pc, #412]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	4b65      	ldr	r3, [pc, #404]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	4b64      	ldr	r3, [pc, #400]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	4b62      	ldr	r3, [pc, #392]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000a7c:	4b60      	ldr	r3, [pc, #384]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	4b5e      	ldr	r3, [pc, #376]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	4a5d      	ldr	r2, [pc, #372]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	60d3      	str	r3, [r2, #12]
 8000a94:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	4b59      	ldr	r3, [pc, #356]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000aa8:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000aaa:	899b      	ldrh	r3, [r3, #12]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fee3 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ab2:	4b53      	ldr	r3, [pc, #332]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b4e      	ldr	r3, [pc, #312]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ade:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ae0:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	4a44      	ldr	r2, [pc, #272]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	60d3      	str	r3, [r2, #12]
 8000af8:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0a:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000b0c:	e248      	b.n	8000fa0 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000b10:	889b      	ldrh	r3, [r3, #4]
 8000b12:	f646 0204 	movw	r2, #26628	; 0x6804
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d176      	bne.n	8000c08 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000b1a:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000b1c:	799b      	ldrb	r3, [r3, #6]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d106      	bne.n	8000b30 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000b24:	881a      	ldrh	r2, [r3, #0]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000b32:	895b      	ldrh	r3, [r3, #10]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe9f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	615a      	str	r2, [r3, #20]
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	60d3      	str	r3, [r2, #12]
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <LCD_SetCursor+0x1e0>)
 8000b96:	899b      	ldrh	r3, [r3, #12]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe6d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <LCD_SetCursor+0x1e8>)
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	60d3      	str	r3, [r2, #12]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <LCD_SetCursor+0x1e4>)
 8000bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf6:	611a      	str	r2, [r3, #16]
}
 8000bf8:	e1d2      	b.n	8000fa0 <LCD_SetCursor+0x584>
 8000bfa:	bf00      	nop
 8000bfc:	20000080 	.word	0x20000080
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000c08:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <LCD_SetCursor+0x454>)
 8000c0a:	889b      	ldrh	r3, [r3, #4]
 8000c0c:	f641 1263 	movw	r2, #6499	; 0x1963
 8000c10:	4293      	cmp	r3, r2
 8000c12:	f040 8133 	bne.w	8000e7c <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000c16:	4b96      	ldr	r3, [pc, #600]	; (8000e70 <LCD_SetCursor+0x454>)
 8000c18:	799b      	ldrb	r3, [r3, #6]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000c1e:	4b94      	ldr	r3, [pc, #592]	; (8000e70 <LCD_SetCursor+0x454>)
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000c2c:	4b90      	ldr	r3, [pc, #576]	; (8000e70 <LCD_SetCursor+0x454>)
 8000c2e:	895b      	ldrh	r3, [r3, #10]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe21 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000c36:	4b8f      	ldr	r3, [pc, #572]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	4b8d      	ldr	r3, [pc, #564]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	4b8c      	ldr	r3, [pc, #560]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	4b89      	ldr	r3, [pc, #548]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	4b88      	ldr	r3, [pc, #544]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	4b86      	ldr	r3, [pc, #536]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000c60:	4b84      	ldr	r3, [pc, #528]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	4b82      	ldr	r3, [pc, #520]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	4b81      	ldr	r3, [pc, #516]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	4b7f      	ldr	r3, [pc, #508]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	4b7d      	ldr	r3, [pc, #500]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	4b7c      	ldr	r3, [pc, #496]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c88:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000c8a:	4b7a      	ldr	r3, [pc, #488]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	4b78      	ldr	r3, [pc, #480]	; (8000e74 <LCD_SetCursor+0x458>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b75      	ldr	r3, [pc, #468]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	4b73      	ldr	r3, [pc, #460]	; (8000e74 <LCD_SetCursor+0x458>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	4b72      	ldr	r3, [pc, #456]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	4b70      	ldr	r3, [pc, #448]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000cb8:	4b6e      	ldr	r3, [pc, #440]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	4b6c      	ldr	r3, [pc, #432]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4a6b      	ldr	r2, [pc, #428]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	60d3      	str	r3, [r2, #12]
 8000cd0:	4b68      	ldr	r3, [pc, #416]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	4b67      	ldr	r3, [pc, #412]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	4b65      	ldr	r3, [pc, #404]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	e061      	b.n	8000daa <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000ce6:	4b62      	ldr	r3, [pc, #392]	; (8000e70 <LCD_SetCursor+0x454>)
 8000ce8:	895b      	ldrh	r3, [r3, #10]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fdc4 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	4b5e      	ldr	r3, [pc, #376]	; (8000e74 <LCD_SetCursor+0x458>)
 8000cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b5c      	ldr	r3, [pc, #368]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000d1e:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	4b53      	ldr	r3, [pc, #332]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4a51      	ldr	r2, [pc, #324]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	60d3      	str	r3, [r2, #12]
 8000d36:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b45      	ldr	r3, [pc, #276]	; (8000e70 <LCD_SetCursor+0x454>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	121a      	asrs	r2, r3, #8
 8000d62:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d78:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <LCD_SetCursor+0x454>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a39      	ldr	r2, [pc, #228]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	60d3      	str	r3, [r2, #12]
 8000d96:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <LCD_SetCursor+0x458>)
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <LCD_SetCursor+0x458>)
 8000da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <LCD_SetCursor+0x454>)
 8000dac:	899b      	ldrh	r3, [r3, #12]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fd62 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000db4:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <LCD_SetCursor+0x458>)
 8000db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <LCD_SetCursor+0x458>)
 8000dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <LCD_SetCursor+0x458>)
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	615a      	str	r2, [r3, #20]
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <LCD_SetCursor+0x458>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <LCD_SetCursor+0x458>)
 8000ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <LCD_SetCursor+0x458>)
 8000de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <LCD_SetCursor+0x458>)
 8000dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	60d3      	str	r3, [r2, #12]
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <LCD_SetCursor+0x458>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	615a      	str	r2, [r3, #20]
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <LCD_SetCursor+0x454>)
 8000e20:	885b      	ldrh	r3, [r3, #2]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	121a      	asrs	r2, r3, #8
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <LCD_SetCursor+0x454>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <LCD_SetCursor+0x45c>)
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	60d3      	str	r3, [r2, #12]
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <LCD_SetCursor+0x458>)
 8000e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6c:	611a      	str	r2, [r3, #16]
}
 8000e6e:	e097      	b.n	8000fa0 <LCD_SetCursor+0x584>
 8000e70:	20000080 	.word	0x20000080
 8000e74:	40011000 	.word	0x40011000
 8000e78:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000e7e:	889b      	ldrh	r3, [r3, #4]
 8000e80:	f245 5210 	movw	r2, #21776	; 0x5510
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d172      	bne.n	8000f6e <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000e88:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000e8a:	895b      	ldrh	r3, [r3, #10]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fcf3 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <LCD_SetCursor+0x590>)
 8000e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	4b44      	ldr	r3, [pc, #272]	; (8000fac <LCD_SetCursor+0x590>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <LCD_SetCursor+0x594>)
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <LCD_SetCursor+0x590>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	4b3e      	ldr	r3, [pc, #248]	; (8000fac <LCD_SetCursor+0x590>)
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <LCD_SetCursor+0x590>)
 8000eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebe:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000ec2:	895b      	ldrh	r3, [r3, #10]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fcd5 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <LCD_SetCursor+0x590>)
 8000ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <LCD_SetCursor+0x590>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <LCD_SetCursor+0x594>)
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	60d3      	str	r3, [r2, #12]
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <LCD_SetCursor+0x590>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <LCD_SetCursor+0x590>)
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <LCD_SetCursor+0x590>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000efc:	899b      	ldrh	r3, [r3, #12]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fcba 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <LCD_SetCursor+0x590>)
 8000f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <LCD_SetCursor+0x590>)
 8000f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	88bb      	ldrh	r3, [r7, #4]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <LCD_SetCursor+0x594>)
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <LCD_SetCursor+0x590>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <LCD_SetCursor+0x590>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <LCD_SetCursor+0x590>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000f34:	899b      	ldrh	r3, [r3, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fc9c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <LCD_SetCursor+0x590>)
 8000f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <LCD_SetCursor+0x590>)
 8000f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <LCD_SetCursor+0x594>)
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	60d3      	str	r3, [r2, #12]
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <LCD_SetCursor+0x590>)
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <LCD_SetCursor+0x590>)
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <LCD_SetCursor+0x590>)
 8000f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6a:	611a      	str	r2, [r3, #16]
}
 8000f6c:	e018      	b.n	8000fa0 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000f70:	799b      	ldrb	r3, [r3, #6]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d106      	bne.n	8000f84 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000f78:	881a      	ldrh	r2, [r3, #0]
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3b01      	subs	r3, #1
 8000f82:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000f86:	895b      	ldrh	r3, [r3, #10]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fcff 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <LCD_SetCursor+0x58c>)
 8000f94:	899b      	ldrh	r3, [r3, #12]
 8000f96:	88ba      	ldrh	r2, [r7, #4]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fcf8 	bl	8000990 <LCD_WriteReg>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000080 	.word	0x20000080
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8000fc6:	4b78      	ldr	r3, [pc, #480]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fc8:	799b      	ldrb	r3, [r3, #6]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d10b      	bne.n	8000fe6 <LCD_Scan_Dir+0x32>
 8000fce:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	f646 0204 	movw	r2, #26628	; 0x6804
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d005      	beq.n	8000fe6 <LCD_Scan_Dir+0x32>
 8000fda:	4b73      	ldr	r3, [pc, #460]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d109      	bne.n	8000ffa <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8000fe6:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fe8:	799b      	ldrb	r3, [r3, #6]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d134      	bne.n	8001058 <LCD_Scan_Dir+0xa4>
 8000fee:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000ff0:	889b      	ldrh	r3, [r3, #4]
 8000ff2:	f641 1263 	movw	r2, #6499	; 0x1963
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12e      	bne.n	8001058 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b07      	cmp	r3, #7
 8000ffe:	d82b      	bhi.n	8001058 <LCD_Scan_Dir+0xa4>
 8001000:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <LCD_Scan_Dir+0x54>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001029 	.word	0x08001029
 800100c:	0800102f 	.word	0x0800102f
 8001010:	08001035 	.word	0x08001035
 8001014:	0800103b 	.word	0x0800103b
 8001018:	08001041 	.word	0x08001041
 800101c:	08001047 	.word	0x08001047
 8001020:	0800104d 	.word	0x0800104d
 8001024:	08001053 	.word	0x08001053
		{
		case 0:
			dir = 6;
 8001028:	2306      	movs	r3, #6
 800102a:	71fb      	strb	r3, [r7, #7]
			break;
 800102c:	e014      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 800102e:	2307      	movs	r3, #7
 8001030:	71fb      	strb	r3, [r7, #7]
			break;
 8001032:	e011      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	71fb      	strb	r3, [r7, #7]
			break;
 8001038:	e00e      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800103a:	2305      	movs	r3, #5
 800103c:	71fb      	strb	r3, [r7, #7]
			break;
 800103e:	e00b      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	71fb      	strb	r3, [r7, #7]
			break;
 8001044:	e008      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
			break;
 800104a:	e005      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 800104c:	2303      	movs	r3, #3
 800104e:	71fb      	strb	r3, [r7, #7]
			break;
 8001050:	e002      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	71fb      	strb	r3, [r7, #7]
			break;
 8001056:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001058:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 800105a:	889b      	ldrh	r3, [r3, #4]
 800105c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001060:	4293      	cmp	r3, r2
 8001062:	d018      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
 8001064:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001066:	889b      	ldrh	r3, [r3, #4]
 8001068:	f646 0204 	movw	r2, #26628	; 0x6804
 800106c:	4293      	cmp	r3, r2
 800106e:	d012      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	f245 3210 	movw	r2, #21264	; 0x5310
 8001078:	4293      	cmp	r3, r2
 800107a:	d00c      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 800107e:	889b      	ldrh	r3, [r3, #4]
 8001080:	f245 5210 	movw	r2, #21776	; 0x5510
 8001084:	4293      	cmp	r3, r2
 8001086:	d006      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 800108a:	889b      	ldrh	r3, [r3, #4]
 800108c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 8250 	bne.w	8001536 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d836      	bhi.n	800110a <LCD_Scan_Dir+0x156>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <LCD_Scan_Dir+0xf0>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	0800110b 	.word	0x0800110b
 80010a8:	080010c5 	.word	0x080010c5
 80010ac:	080010cf 	.word	0x080010cf
 80010b0:	080010d9 	.word	0x080010d9
 80010b4:	080010e3 	.word	0x080010e3
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	080010f7 	.word	0x080010f7
 80010c0:	08001101 	.word	0x08001101
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ca:	81fb      	strh	r3, [r7, #14]
			break;
 80010cc:	e01d      	b.n	800110a <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d4:	81fb      	strh	r3, [r7, #14]
			break;
 80010d6:	e018      	b.n	800110a <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010de:	81fb      	strh	r3, [r7, #14]
			break;
 80010e0:	e013      	b.n	800110a <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	81fb      	strh	r3, [r7, #14]
			break;
 80010ea:	e00e      	b.n	800110a <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010f2:	81fb      	strh	r3, [r7, #14]
			break;
 80010f4:	e009      	b.n	800110a <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80010fc:	81fb      	strh	r3, [r7, #14]
			break;
 80010fe:	e004      	b.n	800110a <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001106:	81fb      	strh	r3, [r7, #14]
			break;
 8001108:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 800110c:	889b      	ldrh	r3, [r3, #4]
 800110e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001112:	4293      	cmp	r3, r2
 8001114:	d103      	bne.n	800111e <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001116:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800111a:	81bb      	strh	r3, [r7, #12]
 800111c:	e001      	b.n	8001122 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800111e:	2336      	movs	r3, #54	; 0x36
 8001120:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	f245 3210 	movw	r2, #21264	; 0x5310
 800112a:	4293      	cmp	r3, r2
 800112c:	d00f      	beq.n	800114e <LCD_Scan_Dir+0x19a>
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	f245 5210 	movw	r2, #21776	; 0x5510
 8001136:	4293      	cmp	r3, r2
 8001138:	d009      	beq.n	800114e <LCD_Scan_Dir+0x19a>
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001142:	4293      	cmp	r3, r2
 8001144:	d003      	beq.n	800114e <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	f646 0204 	movw	r2, #26628	; 0x6804
 8001156:	4293      	cmp	r3, r2
 8001158:	d103      	bne.n	8001162 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001162:	89fa      	ldrh	r2, [r7, #14]
 8001164:	89bb      	ldrh	r3, [r7, #12]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fc11 	bl	8000990 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	f641 1263 	movw	r2, #6499	; 0x1963
 8001176:	4293      	cmp	r3, r2
 8001178:	d028      	beq.n	80011cc <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 800118a:	885b      	ldrh	r3, [r3, #2]
 800118c:	429a      	cmp	r2, r3
 800118e:	d21d      	bcs.n	80011cc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001198:	885a      	ldrh	r2, [r3, #2]
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 800119c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800119e:	4a02      	ldr	r2, [pc, #8]	; (80011a8 <LCD_Scan_Dir+0x1f4>)
 80011a0:	897b      	ldrh	r3, [r7, #10]
 80011a2:	8053      	strh	r3, [r2, #2]
 80011a4:	e012      	b.n	80011cc <LCD_Scan_Dir+0x218>
 80011a6:	bf00      	nop
 80011a8:	20000080 	.word	0x20000080
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80011ac:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	4b7e      	ldr	r3, [pc, #504]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011b2:	885b      	ldrh	r3, [r3, #2]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d909      	bls.n	80011cc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80011b8:	4b7c      	ldr	r3, [pc, #496]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80011be:	4b7b      	ldr	r3, [pc, #492]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011c0:	885a      	ldrh	r2, [r3, #2]
 80011c2:	4b7a      	ldr	r3, [pc, #488]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011c4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80011c6:	4a79      	ldr	r2, [pc, #484]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011c8:	897b      	ldrh	r3, [r7, #10]
 80011ca:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80011cc:	4b77      	ldr	r3, [pc, #476]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	f245 5210 	movw	r2, #21776	; 0x5510
 80011d4:	4293      	cmp	r3, r2
 80011d6:	f040 80ef 	bne.w	80013b8 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80011da:	4b74      	ldr	r3, [pc, #464]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80011dc:	895b      	ldrh	r3, [r3, #10]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb4a 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011e4:	4b72      	ldr	r3, [pc, #456]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80011e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	4b70      	ldr	r3, [pc, #448]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80011ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <LCD_Scan_Dir+0x400>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 8001210:	895b      	ldrh	r3, [r3, #10]
 8001212:	3301      	adds	r3, #1
 8001214:	b29b      	uxth	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb2e 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800121e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <LCD_Scan_Dir+0x400>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001244:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001246:	4b59      	ldr	r3, [pc, #356]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 8001248:	895b      	ldrh	r3, [r3, #10]
 800124a:	3302      	adds	r3, #2
 800124c:	b29b      	uxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fb12 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001254:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	4b54      	ldr	r3, [pc, #336]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800125e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	4b51      	ldr	r3, [pc, #324]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	121a      	asrs	r2, r3, #8
 800126c:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <LCD_Scan_Dir+0x400>)
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800127e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001282:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001284:	4b49      	ldr	r3, [pc, #292]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 8001286:	895b      	ldrh	r3, [r3, #10]
 8001288:	3303      	adds	r3, #3
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff faf3 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	615a      	str	r2, [r3, #20]
 80012a2:	4b42      	ldr	r3, [pc, #264]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a42      	ldr	r2, [pc, #264]	; (80013b4 <LCD_Scan_Dir+0x400>)
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	60d3      	str	r3, [r2, #12]
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80012c4:	899b      	ldrh	r3, [r3, #12]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fad6 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012cc:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <LCD_Scan_Dir+0x400>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 80012f8:	899b      	ldrh	r3, [r3, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff faba 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <LCD_Scan_Dir+0x400>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 8001330:	899b      	ldrh	r3, [r3, #12]
 8001332:	3302      	adds	r3, #2
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fa9e 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800133e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	3b01      	subs	r3, #1
 8001352:	121a      	asrs	r2, r3, #8
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <LCD_Scan_Dir+0x400>)
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 800136e:	899b      	ldrh	r3, [r3, #12]
 8001370:	3303      	adds	r3, #3
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa7f 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800137c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <LCD_Scan_Dir+0x3f8>)
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <LCD_Scan_Dir+0x400>)
 8001392:	b2db      	uxtb	r3, r3
 8001394:	60d3      	str	r3, [r2, #12]
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <LCD_Scan_Dir+0x3fc>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80013aa:	e10b      	b.n	80015c4 <LCD_Scan_Dir+0x610>
 80013ac:	20000080 	.word	0x20000080
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80013b8:	4b84      	ldr	r3, [pc, #528]	; (80015cc <LCD_Scan_Dir+0x618>)
 80013ba:	895b      	ldrh	r3, [r3, #10]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fa5b 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013c2:	4b83      	ldr	r3, [pc, #524]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80013c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <LCD_Scan_Dir+0x620>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	4b7d      	ldr	r3, [pc, #500]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	4b7c      	ldr	r3, [pc, #496]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	4b7a      	ldr	r3, [pc, #488]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80013e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ea:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80013ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b75      	ldr	r3, [pc, #468]	; (80015d4 <LCD_Scan_Dir+0x620>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	4b71      	ldr	r3, [pc, #452]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	4b70      	ldr	r3, [pc, #448]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001414:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001416:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	4b69      	ldr	r3, [pc, #420]	; (80015cc <LCD_Scan_Dir+0x618>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	121a      	asrs	r2, r3, #8
 800142e:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <LCD_Scan_Dir+0x620>)
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	4b65      	ldr	r3, [pc, #404]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001444:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001446:	4b62      	ldr	r3, [pc, #392]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <LCD_Scan_Dir+0x618>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	3b01      	subs	r3, #1
 800145c:	4a5d      	ldr	r2, [pc, #372]	; (80015d4 <LCD_Scan_Dir+0x620>)
 800145e:	b2db      	uxtb	r3, r3
 8001460:	60d3      	str	r3, [r2, #12]
 8001462:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <LCD_Scan_Dir+0x618>)
 8001478:	899b      	ldrh	r3, [r3, #12]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f9fc 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	4b50      	ldr	r3, [pc, #320]	; (80015d4 <LCD_Scan_Dir+0x620>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <LCD_Scan_Dir+0x620>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80014d4:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b39      	ldr	r3, [pc, #228]	; (80015cc <LCD_Scan_Dir+0x618>)
 80014e6:	885b      	ldrh	r3, [r3, #2]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	121a      	asrs	r2, r3, #8
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <LCD_Scan_Dir+0x620>)
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 80014fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001502:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 800150e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <LCD_Scan_Dir+0x618>)
 8001516:	885b      	ldrh	r3, [r3, #2]
 8001518:	3b01      	subs	r3, #1
 800151a:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <LCD_Scan_Dir+0x620>)
 800151c:	b2db      	uxtb	r3, r3
 800151e:	60d3      	str	r3, [r2, #12]
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <LCD_Scan_Dir+0x61c>)
 800152e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001532:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001534:	e046      	b.n	80015c4 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b07      	cmp	r3, #7
 800153a:	d836      	bhi.n	80015aa <LCD_Scan_Dir+0x5f6>
 800153c:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <LCD_Scan_Dir+0x590>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001565 	.word	0x08001565
 8001548:	0800156f 	.word	0x0800156f
 800154c:	08001579 	.word	0x08001579
 8001550:	080015ab 	.word	0x080015ab
 8001554:	08001583 	.word	0x08001583
 8001558:	0800158d 	.word	0x0800158d
 800155c:	08001597 	.word	0x08001597
 8001560:	080015a1 	.word	0x080015a1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800156a:	81fb      	strh	r3, [r7, #14]
			break;
 800156c:	e01d      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	81fb      	strh	r3, [r7, #14]
			break;
 8001576:	e018      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	81fb      	strh	r3, [r7, #14]
			break;
 8001580:	e013      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001588:	81fb      	strh	r3, [r7, #14]
			break;
 800158a:	e00e      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001592:	81fb      	strh	r3, [r7, #14]
			break;
 8001594:	e009      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	f043 0318 	orr.w	r3, r3, #24
 800159c:	81fb      	strh	r3, [r7, #14]
			break;
 800159e:	e004      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80015a0:	89fb      	ldrh	r3, [r7, #14]
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	81fb      	strh	r3, [r7, #14]
			break;
 80015a8:	bf00      	nop
		}
		dirreg = 0X03;
 80015aa:	2303      	movs	r3, #3
 80015ac:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80015b6:	89fa      	ldrh	r2, [r7, #14]
 80015b8:	89bb      	ldrh	r3, [r7, #12]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f9e7 	bl	8000990 <LCD_WriteReg>
	}
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000080 	.word	0x20000080
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
 80015e2:	460b      	mov	r3, r1
 80015e4:	80bb      	strh	r3, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80015ea:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 80015ec:	889b      	ldrh	r3, [r3, #4]
 80015ee:	f249 3241 	movw	r2, #37697	; 0x9341
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d005      	beq.n	8001602 <LCD_Fast_DrawPoint+0x2a>
 80015f6:	4b72      	ldr	r3, [pc, #456]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	f245 3210 	movw	r2, #21264	; 0x5310
 80015fe:	4293      	cmp	r3, r2
 8001600:	d164      	bne.n	80016cc <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001602:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 8001604:	895b      	ldrh	r3, [r3, #10]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f936 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800160c:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800160e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001638:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800163c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4a5e      	ldr	r2, [pc, #376]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 800164e:	b2db      	uxtb	r3, r3
 8001650:	60d3      	str	r3, [r2, #12]
 8001652:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001664:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001666:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 8001668:	899b      	ldrh	r3, [r3, #12]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f904 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001670:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	88bb      	ldrh	r3, [r7, #4]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800169e:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4a45      	ldr	r2, [pc, #276]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	60d3      	str	r3, [r2, #12]
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	615a      	str	r2, [r3, #20]
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	e1e6      	b.n	8001a9a <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80016cc:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 80016ce:	889b      	ldrh	r3, [r3, #4]
 80016d0:	f245 5210 	movw	r2, #21776	; 0x5510
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d179      	bne.n	80017cc <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 80016da:	895b      	ldrh	r3, [r3, #10]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff f8cb 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80016e2:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f0:	615a      	str	r2, [r3, #20]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800170a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 8001712:	895b      	ldrh	r3, [r3, #10]
 8001714:	3301      	adds	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f8ad 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 8001732:	b2db      	uxtb	r3, r3
 8001734:	60d3      	str	r3, [r2, #12]
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 800174c:	899b      	ldrh	r3, [r3, #12]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f892 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	88bb      	ldrh	r3, [r7, #4]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <LCD_Fast_DrawPoint+0x1e8>)
 8001784:	899b      	ldrh	r3, [r3, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	b29b      	uxth	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f874 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 8001792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 800179a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <LCD_Fast_DrawPoint+0x1f0>)
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	60d3      	str	r3, [r2, #12]
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <LCD_Fast_DrawPoint+0x1ec>)
 80017b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	e16d      	b.n	8001a9a <LCD_Fast_DrawPoint+0x4c2>
 80017be:	bf00      	nop
 80017c0:	20000080 	.word	0x20000080
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <LCD_Fast_DrawPoint+0x398>)
 80017ce:	889b      	ldrh	r3, [r3, #4]
 80017d0:	f641 1263 	movw	r2, #6499	; 0x1963
 80017d4:	4293      	cmp	r3, r2
 80017d6:	f040 80d1 	bne.w	800197c <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <LCD_Fast_DrawPoint+0x398>)
 80017dc:	799b      	ldrb	r3, [r3, #6]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <LCD_Fast_DrawPoint+0x398>)
 80017e4:	881a      	ldrh	r2, [r3, #0]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <LCD_Fast_DrawPoint+0x398>)
 80017f2:	895b      	ldrh	r3, [r3, #10]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff f83f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017fa:	4b5e      	ldr	r3, [pc, #376]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80017fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	4b57      	ldr	r3, [pc, #348]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	4b56      	ldr	r3, [pc, #344]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	4b54      	ldr	r3, [pc, #336]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001828:	4b52      	ldr	r3, [pc, #328]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800182a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4a4f      	ldr	r2, [pc, #316]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 800183c:	b2db      	uxtb	r3, r3
 800183e:	60d3      	str	r3, [r2, #12]
 8001840:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800184e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001852:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	4b45      	ldr	r3, [pc, #276]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800185e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	611a      	str	r2, [r3, #16]
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001880:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001882:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4a38      	ldr	r2, [pc, #224]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 8001896:	b2db      	uxtb	r3, r3
 8001898:	60d3      	str	r3, [r2, #12]
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	4b34      	ldr	r3, [pc, #208]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <LCD_Fast_DrawPoint+0x398>)
 80018b0:	899b      	ldrh	r3, [r3, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ffe0 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	611a      	str	r2, [r3, #16]
 80018c0:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 80018f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	60d3      	str	r3, [r2, #12]
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800191c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	b29a      	uxth	r2, r3
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	611a      	str	r2, [r3, #16]
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800193a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800194a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <LCD_Fast_DrawPoint+0x3a0>)
 8001954:	b2db      	uxtb	r3, r3
 8001956:	60d3      	str	r3, [r2, #12]
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	615a      	str	r2, [r3, #20]
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <LCD_Fast_DrawPoint+0x39c>)
 8001966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	e095      	b.n	8001a9a <LCD_Fast_DrawPoint+0x4c2>
 800196e:	bf00      	nop
 8001970:	20000080 	.word	0x20000080
 8001974:	40011000 	.word	0x40011000
 8001978:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 800197e:	889b      	ldrh	r3, [r3, #4]
 8001980:	f646 0204 	movw	r2, #26628	; 0x6804
 8001984:	4293      	cmp	r3, r2
 8001986:	d16f      	bne.n	8001a68 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001988:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 800198a:	799b      	ldrb	r3, [r3, #6]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 8001992:	881a      	ldrh	r2, [r3, #0]
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	b29b      	uxth	r3, r3
 800199a:	3b01      	subs	r3, #1
 800199c:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 80019a0:	895b      	ldrh	r3, [r3, #10]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe ff68 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80019a8:	4b54      	ldr	r3, [pc, #336]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b52      	ldr	r3, [pc, #328]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <LCD_Fast_DrawPoint+0x528>)
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	4b4e      	ldr	r3, [pc, #312]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	4b47      	ldr	r3, [pc, #284]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4a45      	ldr	r2, [pc, #276]	; (8001b00 <LCD_Fast_DrawPoint+0x528>)
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	60d3      	str	r3, [r2, #12]
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 80019fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a00:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 8001a04:	899b      	ldrh	r3, [r3, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe ff36 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a12:	611a      	str	r2, [r3, #16]
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1a:	615a      	str	r2, [r3, #20]
 8001a1c:	88bb      	ldrh	r3, [r7, #4]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <LCD_Fast_DrawPoint+0x528>)
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	4a2c      	ldr	r2, [pc, #176]	; (8001b00 <LCD_Fast_DrawPoint+0x528>)
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	60d3      	str	r3, [r2, #12]
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	615a      	str	r2, [r3, #20]
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	611a      	str	r2, [r3, #16]
 8001a5e:	4b27      	ldr	r3, [pc, #156]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	e018      	b.n	8001a9a <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 8001a6a:	799b      	ldrb	r3, [r3, #6]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 8001a80:	895b      	ldrh	r3, [r3, #10]
 8001a82:	88fa      	ldrh	r2, [r7, #6]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe ff82 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 8001a8e:	899b      	ldrh	r3, [r3, #12]
 8001a90:	88ba      	ldrh	r2, [r7, #4]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe ff7b 	bl	8000990 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <LCD_Fast_DrawPoint+0x520>)
 8001aac:	891a      	ldrh	r2, [r3, #8]
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <LCD_Fast_DrawPoint+0x528>)
 8001ab0:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <LCD_Fast_DrawPoint+0x528>)
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	60d3      	str	r3, [r2, #12]
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <LCD_Fast_DrawPoint+0x524>)
 8001aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aee:	611a      	str	r2, [r3, #16]
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000080 	.word	0x20000080
 8001afc:	40011000 	.word	0x40011000
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	00000000 	.word	0x00000000

08001b08 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001b12:	20be      	movs	r0, #190	; 0xbe
 8001b14:	f7fe feb0 	bl	8000878 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001b18:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b26:	615a      	str	r2, [r3, #20]
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <LCD_SSD_BackLightSet+0x144>)
 8001b2a:	2205      	movs	r2, #5
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fde3 	bl	8000720 <__aeabi_i2d>
 8001b5a:	a339      	add	r3, pc, #228	; (adr r3, 8001c40 <LCD_SSD_BackLightSet+0x138>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb62 	bl	8000228 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4c38      	ldr	r4, [pc, #224]	; (8001c4c <LCD_SSD_BackLightSet+0x144>)
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe fe41 	bl	80007f4 <__aeabi_d2uiz>
 8001b72:	4603      	mov	r3, r0
 8001b74:	60e3      	str	r3, [r4, #12]
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b98:	615a      	str	r2, [r3, #20]
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <LCD_SSD_BackLightSet+0x144>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <LCD_SSD_BackLightSet+0x144>)
 8001bc6:	22ff      	movs	r2, #255	; 0xff
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bdc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <LCD_SSD_BackLightSet+0x144>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c06:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c16:	615a      	str	r2, [r3, #20]
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <LCD_SSD_BackLightSet+0x144>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <LCD_SSD_BackLightSet+0x140>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	611a      	str	r2, [r3, #16]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd90      	pop	{r4, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	66666666 	.word	0x66666666
 8001c44:	40046666 	.word	0x40046666
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40010c00 	.word	0x40010c00

08001c50 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d177      	bne.n	8001d50 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001c60:	4b80      	ldr	r3, [pc, #512]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001c68:	22f0      	movs	r2, #240	; 0xf0
 8001c6a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001c6c:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001c6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c72:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001c76:	889b      	ldrh	r3, [r3, #4]
 8001c78:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00b      	beq.n	8001c98 <LCD_Display_Dir+0x48>
 8001c80:	4b78      	ldr	r3, [pc, #480]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001c82:	889b      	ldrh	r3, [r3, #4]
 8001c84:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d005      	beq.n	8001c98 <LCD_Display_Dir+0x48>
 8001c8c:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001c8e:	889b      	ldrh	r3, [r3, #4]
 8001c90:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d11e      	bne.n	8001cd6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001c98:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001c9a:	222c      	movs	r2, #44	; 0x2c
 8001c9c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001c9e:	4b71      	ldr	r3, [pc, #452]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001ca0:	222a      	movs	r2, #42	; 0x2a
 8001ca2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001ca6:	222b      	movs	r2, #43	; 0x2b
 8001ca8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001caa:	4b6e      	ldr	r3, [pc, #440]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cac:	889b      	ldrh	r3, [r3, #4]
 8001cae:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d006      	beq.n	8001cc4 <LCD_Display_Dir+0x74>
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	f245 3210 	movw	r2, #21264	; 0x5310
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	f040 80c7 	bne.w	8001e52 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001cc4:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cca:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001ccc:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cd2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cd4:	e0bd      	b.n	8001e52 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cd8:	889b      	ldrh	r3, [r3, #4]
 8001cda:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d114      	bne.n	8001d0c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001ce2:	4b60      	ldr	r3, [pc, #384]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001ce4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ce8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001cea:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cec:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001cf0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cf4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001cf8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001cfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d00:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d08:	805a      	strh	r2, [r3, #2]
 8001d0a:	e0a3      	b.n	8001e54 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001d0c:	4b55      	ldr	r3, [pc, #340]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001d18:	4b52      	ldr	r3, [pc, #328]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d1a:	222c      	movs	r2, #44	; 0x2c
 8001d1c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d20:	222b      	movs	r2, #43	; 0x2b
 8001d22:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d26:	222a      	movs	r2, #42	; 0x2a
 8001d28:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d30:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001d32:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d38:	805a      	strh	r2, [r3, #2]
 8001d3a:	e08b      	b.n	8001e54 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001d3c:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d3e:	2222      	movs	r2, #34	; 0x22
 8001d40:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001d42:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d44:	2220      	movs	r2, #32
 8001d46:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d4a:	2221      	movs	r2, #33	; 0x21
 8001d4c:	819a      	strh	r2, [r3, #12]
 8001d4e:	e081      	b.n	8001e54 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001d50:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d5c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d60:	22f0      	movs	r2, #240	; 0xf0
 8001d62:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d005      	beq.n	8001d7c <LCD_Display_Dir+0x12c>
 8001d70:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d109      	bne.n	8001d90 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001d7c:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d7e:	222c      	movs	r2, #44	; 0x2c
 8001d80:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d84:	222a      	movs	r2, #42	; 0x2a
 8001d86:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d8a:	222b      	movs	r2, #43	; 0x2b
 8001d8c:	819a      	strh	r2, [r3, #12]
 8001d8e:	e04b      	b.n	8001e28 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d109      	bne.n	8001db0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001d9e:	222c      	movs	r2, #44	; 0x2c
 8001da0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001da4:	222b      	movs	r2, #43	; 0x2b
 8001da6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001daa:	222a      	movs	r2, #42	; 0x2a
 8001dac:	819a      	strh	r2, [r3, #12]
 8001dae:	e03b      	b.n	8001e28 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001db2:	889b      	ldrh	r3, [r3, #4]
 8001db4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d114      	bne.n	8001de6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001dbe:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001dc2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001dc6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001dca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001dce:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001dd2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001dd6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001dda:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001dde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001de2:	805a      	strh	r2, [r3, #2]
 8001de4:	e020      	b.n	8001e28 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001de8:	889b      	ldrh	r3, [r3, #4]
 8001dea:	f641 1263 	movw	r2, #6499	; 0x1963
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d111      	bne.n	8001e16 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001df4:	222c      	movs	r2, #44	; 0x2c
 8001df6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001dfa:	222a      	movs	r2, #42	; 0x2a
 8001dfc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e00:	222b      	movs	r2, #43	; 0x2b
 8001e02:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e0a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e0e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e12:	805a      	strh	r2, [r3, #2]
 8001e14:	e008      	b.n	8001e28 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e18:	2222      	movs	r2, #34	; 0x22
 8001e1a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e1e:	2221      	movs	r2, #33	; 0x21
 8001e20:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e24:	2220      	movs	r2, #32
 8001e26:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e2a:	889b      	ldrh	r3, [r3, #4]
 8001e2c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d005      	beq.n	8001e40 <LCD_Display_Dir+0x1f0>
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e36:	889b      	ldrh	r3, [r3, #4]
 8001e38:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d109      	bne.n	8001e54 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e46:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <LCD_Display_Dir+0x214>)
 8001e4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e4e:	805a      	strh	r2, [r3, #2]
 8001e50:	e000      	b.n	8001e54 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e52:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff f8ad 	bl	8000fb4 <LCD_Scan_Dir>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000080 	.word	0x20000080

08001e68 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001e6e:	4b90      	ldr	r3, [pc, #576]	; (80020b0 <LCD_Init+0x248>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4a8f      	ldr	r2, [pc, #572]	; (80020b0 <LCD_Init+0x248>)
 8001e74:	f043 0308 	orr.w	r3, r3, #8
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	; (80020b0 <LCD_Init+0x248>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001e86:	4b8a      	ldr	r3, [pc, #552]	; (80020b0 <LCD_Init+0x248>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a89      	ldr	r2, [pc, #548]	; (80020b0 <LCD_Init+0x248>)
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <LCD_Init+0x248>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001e9e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001ea2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001eac:	2303      	movs	r3, #3
 8001eae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	487f      	ldr	r0, [pc, #508]	; (80020b4 <LCD_Init+0x24c>)
 8001eb8:	f004 fbae 	bl	8006618 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	487b      	ldr	r0, [pc, #492]	; (80020b8 <LCD_Init+0x250>)
 8001eca:	f004 fba5 	bl	8006618 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001ece:	2032      	movs	r0, #50	; 0x32
 8001ed0:	f004 fa9a 	bl	8006408 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7fe fd5a 	bl	8000990 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001edc:	2032      	movs	r0, #50	; 0x32
 8001ede:	f004 fa93 	bl	8006408 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7fe fd7e 	bl	80009e4 <LCD_ReadReg>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b73      	ldr	r3, [pc, #460]	; (80020bc <LCD_Init+0x254>)
 8001eee:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001ef0:	4b72      	ldr	r3, [pc, #456]	; (80020bc <LCD_Init+0x254>)
 8001ef2:	889b      	ldrh	r3, [r3, #4]
 8001ef4:	2bfe      	cmp	r3, #254	; 0xfe
 8001ef6:	d90b      	bls.n	8001f10 <LCD_Init+0xa8>
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <LCD_Init+0x254>)
 8001efa:	889b      	ldrh	r3, [r3, #4]
 8001efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d005      	beq.n	8001f10 <LCD_Init+0xa8>
 8001f04:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <LCD_Init+0x254>)
 8001f06:	889b      	ldrh	r3, [r3, #4]
 8001f08:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001f0c:	f040 80c8 	bne.w	80020a0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001f10:	20d3      	movs	r0, #211	; 0xd3
 8001f12:	f7fe fcb1 	bl	8000878 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001f16:	f7fe fcf7 	bl	8000908 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001f1a:	f7fe fcf5 	bl	8000908 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001f1e:	f7fe fcf3 	bl	8000908 <LCD_RD_DATA>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <LCD_Init+0x254>)
 8001f28:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001f2a:	4b64      	ldr	r3, [pc, #400]	; (80020bc <LCD_Init+0x254>)
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <LCD_Init+0x254>)
 8001f34:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001f36:	f7fe fce7 	bl	8000908 <LCD_RD_DATA>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <LCD_Init+0x254>)
 8001f40:	889b      	ldrh	r3, [r3, #4]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <LCD_Init+0x254>)
 8001f48:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <LCD_Init+0x254>)
 8001f4c:	889b      	ldrh	r3, [r3, #4]
 8001f4e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f52:	4293      	cmp	r3, r2
 8001f54:	f000 80a4 	beq.w	80020a0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001f58:	20bf      	movs	r0, #191	; 0xbf
 8001f5a:	f7fe fc8d 	bl	8000878 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001f5e:	f7fe fcd3 	bl	8000908 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001f62:	f7fe fcd1 	bl	8000908 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001f66:	f7fe fccf 	bl	8000908 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001f6a:	f7fe fccd 	bl	8000908 <LCD_RD_DATA>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b52      	ldr	r3, [pc, #328]	; (80020bc <LCD_Init+0x254>)
 8001f74:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001f76:	4b51      	ldr	r3, [pc, #324]	; (80020bc <LCD_Init+0x254>)
 8001f78:	889b      	ldrh	r3, [r3, #4]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <LCD_Init+0x254>)
 8001f80:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001f82:	f7fe fcc1 	bl	8000908 <LCD_RD_DATA>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <LCD_Init+0x254>)
 8001f8c:	889b      	ldrh	r3, [r3, #4]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <LCD_Init+0x254>)
 8001f94:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <LCD_Init+0x254>)
 8001f98:	889b      	ldrh	r3, [r3, #4]
 8001f9a:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d07e      	beq.n	80020a0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001fa2:	20d4      	movs	r0, #212	; 0xd4
 8001fa4:	f7fe fc68 	bl	8000878 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001fa8:	f7fe fcae 	bl	8000908 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001fac:	f7fe fcac 	bl	8000908 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001fb0:	f7fe fcaa 	bl	8000908 <LCD_RD_DATA>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <LCD_Init+0x254>)
 8001fba:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <LCD_Init+0x254>)
 8001fbe:	889b      	ldrh	r3, [r3, #4]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <LCD_Init+0x254>)
 8001fc6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001fc8:	f7fe fc9e 	bl	8000908 <LCD_RD_DATA>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <LCD_Init+0x254>)
 8001fd2:	889b      	ldrh	r3, [r3, #4]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <LCD_Init+0x254>)
 8001fda:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <LCD_Init+0x254>)
 8001fde:	889b      	ldrh	r3, [r3, #4]
 8001fe0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d05b      	beq.n	80020a0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001fe8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001fec:	f7fe fc44 	bl	8000878 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001ff0:	f7fe fc8a 	bl	8000908 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001ff4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001ff8:	f7fe fc3e 	bl	8000878 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001ffc:	f7fe fc84 	bl	8000908 <LCD_RD_DATA>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <LCD_Init+0x254>)
 8002006:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <LCD_Init+0x254>)
 800200a:	889b      	ldrh	r3, [r3, #4]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <LCD_Init+0x254>)
 8002012:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002014:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002018:	f7fe fc2e 	bl	8000878 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800201c:	f7fe fc74 	bl	8000908 <LCD_RD_DATA>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <LCD_Init+0x254>)
 8002026:	889b      	ldrh	r3, [r3, #4]
 8002028:	4313      	orrs	r3, r2
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <LCD_Init+0x254>)
 800202e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <LCD_Init+0x254>)
 8002032:	889b      	ldrh	r3, [r3, #4]
 8002034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002038:	d103      	bne.n	8002042 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <LCD_Init+0x254>)
 800203c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002040:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <LCD_Init+0x254>)
 8002044:	889b      	ldrh	r3, [r3, #4]
 8002046:	f245 5210 	movw	r2, #21776	; 0x5510
 800204a:	4293      	cmp	r3, r2
 800204c:	d028      	beq.n	80020a0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800204e:	20a1      	movs	r0, #161	; 0xa1
 8002050:	f7fe fc12 	bl	8000878 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002054:	f7fe fc58 	bl	8000908 <LCD_RD_DATA>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <LCD_Init+0x254>)
 800205e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002060:	f7fe fc52 	bl	8000908 <LCD_RD_DATA>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <LCD_Init+0x254>)
 800206a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <LCD_Init+0x254>)
 800206e:	889b      	ldrh	r3, [r3, #4]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <LCD_Init+0x254>)
 8002076:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002078:	f7fe fc46 	bl	8000908 <LCD_RD_DATA>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <LCD_Init+0x254>)
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <LCD_Init+0x254>)
 800208a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <LCD_Init+0x254>)
 800208e:	889b      	ldrh	r3, [r3, #4]
 8002090:	f245 7261 	movw	r2, #22369	; 0x5761
 8002094:	4293      	cmp	r3, r2
 8002096:	d103      	bne.n	80020a0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <LCD_Init+0x254>)
 800209a:	f641 1263 	movw	r2, #6499	; 0x1963
 800209e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <LCD_Init+0x254>)
 80020a2:	889b      	ldrh	r3, [r3, #4]
 80020a4:	f249 3241 	movw	r2, #37697	; 0x9341
 80020a8:	4293      	cmp	r3, r2
 80020aa:	f040 811f 	bne.w	80022ec <LCD_Init+0x484>
 80020ae:	e007      	b.n	80020c0 <LCD_Init+0x258>
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40010c00 	.word	0x40010c00
 80020bc:	20000080 	.word	0x20000080
			{
		LCD_WR_REG(0xCF);
 80020c0:	20cf      	movs	r0, #207	; 0xcf
 80020c2:	f7fe fbd9 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7fe fbfa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80020cc:	20c1      	movs	r0, #193	; 0xc1
 80020ce:	f7fe fbf7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80020d2:	2030      	movs	r0, #48	; 0x30
 80020d4:	f7fe fbf4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80020d8:	20ed      	movs	r0, #237	; 0xed
 80020da:	f7fe fbcd 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80020de:	2064      	movs	r0, #100	; 0x64
 80020e0:	f7fe fbee 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f7fe fbeb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80020ea:	2012      	movs	r0, #18
 80020ec:	f7fe fbe8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80020f0:	2081      	movs	r0, #129	; 0x81
 80020f2:	f7fe fbe5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80020f6:	20e8      	movs	r0, #232	; 0xe8
 80020f8:	f7fe fbbe 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80020fc:	2085      	movs	r0, #133	; 0x85
 80020fe:	f7fe fbdf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002102:	2010      	movs	r0, #16
 8002104:	f7fe fbdc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002108:	207a      	movs	r0, #122	; 0x7a
 800210a:	f7fe fbd9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800210e:	20cb      	movs	r0, #203	; 0xcb
 8002110:	f7fe fbb2 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002114:	2039      	movs	r0, #57	; 0x39
 8002116:	f7fe fbd3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800211a:	202c      	movs	r0, #44	; 0x2c
 800211c:	f7fe fbd0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002120:	2000      	movs	r0, #0
 8002122:	f7fe fbcd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002126:	2034      	movs	r0, #52	; 0x34
 8002128:	f7fe fbca 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800212c:	2002      	movs	r0, #2
 800212e:	f7fe fbc7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002132:	20f7      	movs	r0, #247	; 0xf7
 8002134:	f7fe fba0 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002138:	2020      	movs	r0, #32
 800213a:	f7fe fbc1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800213e:	20ea      	movs	r0, #234	; 0xea
 8002140:	f7fe fb9a 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe fbbb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f7fe fbb8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002150:	20c0      	movs	r0, #192	; 0xc0
 8002152:	f7fe fb91 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002156:	201b      	movs	r0, #27
 8002158:	f7fe fbb2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800215c:	20c1      	movs	r0, #193	; 0xc1
 800215e:	f7fe fb8b 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002162:	2001      	movs	r0, #1
 8002164:	f7fe fbac 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002168:	20c5      	movs	r0, #197	; 0xc5
 800216a:	f7fe fb85 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800216e:	2030      	movs	r0, #48	; 0x30
 8002170:	f7fe fba6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002174:	2030      	movs	r0, #48	; 0x30
 8002176:	f7fe fba3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800217a:	20c7      	movs	r0, #199	; 0xc7
 800217c:	f7fe fb7c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002180:	20b7      	movs	r0, #183	; 0xb7
 8002182:	f7fe fb9d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002186:	2036      	movs	r0, #54	; 0x36
 8002188:	f7fe fb76 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800218c:	2048      	movs	r0, #72	; 0x48
 800218e:	f7fe fb97 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002192:	203a      	movs	r0, #58	; 0x3a
 8002194:	f7fe fb70 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002198:	2055      	movs	r0, #85	; 0x55
 800219a:	f7fe fb91 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800219e:	20b1      	movs	r0, #177	; 0xb1
 80021a0:	f7fe fb6a 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7fe fb8b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80021aa:	201a      	movs	r0, #26
 80021ac:	f7fe fb88 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80021b0:	20b6      	movs	r0, #182	; 0xb6
 80021b2:	f7fe fb61 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80021b6:	200a      	movs	r0, #10
 80021b8:	f7fe fb82 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80021bc:	20a2      	movs	r0, #162	; 0xa2
 80021be:	f7fe fb7f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80021c2:	20f2      	movs	r0, #242	; 0xf2
 80021c4:	f7fe fb58 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fb79 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80021ce:	2026      	movs	r0, #38	; 0x26
 80021d0:	f7fe fb52 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7fe fb73 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80021da:	20e0      	movs	r0, #224	; 0xe0
 80021dc:	f7fe fb4c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80021e0:	200f      	movs	r0, #15
 80021e2:	f7fe fb6d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80021e6:	202a      	movs	r0, #42	; 0x2a
 80021e8:	f7fe fb6a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80021ec:	2028      	movs	r0, #40	; 0x28
 80021ee:	f7fe fb67 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80021f2:	2008      	movs	r0, #8
 80021f4:	f7fe fb64 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80021f8:	200e      	movs	r0, #14
 80021fa:	f7fe fb61 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80021fe:	2008      	movs	r0, #8
 8002200:	f7fe fb5e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002204:	2054      	movs	r0, #84	; 0x54
 8002206:	f7fe fb5b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800220a:	20a9      	movs	r0, #169	; 0xa9
 800220c:	f7fe fb58 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002210:	2043      	movs	r0, #67	; 0x43
 8002212:	f7fe fb55 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002216:	200a      	movs	r0, #10
 8002218:	f7fe fb52 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800221c:	200f      	movs	r0, #15
 800221e:	f7fe fb4f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7fe fb4c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fb49 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800222e:	2000      	movs	r0, #0
 8002230:	f7fe fb46 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe fb43 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800223a:	20e1      	movs	r0, #225	; 0xe1
 800223c:	f7fe fb1c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe fb3d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002246:	2015      	movs	r0, #21
 8002248:	f7fe fb3a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800224c:	2017      	movs	r0, #23
 800224e:	f7fe fb37 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002252:	2007      	movs	r0, #7
 8002254:	f7fe fb34 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002258:	2011      	movs	r0, #17
 800225a:	f7fe fb31 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800225e:	2006      	movs	r0, #6
 8002260:	f7fe fb2e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002264:	202b      	movs	r0, #43	; 0x2b
 8002266:	f7fe fb2b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800226a:	2056      	movs	r0, #86	; 0x56
 800226c:	f7fe fb28 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002270:	203c      	movs	r0, #60	; 0x3c
 8002272:	f7fe fb25 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002276:	2005      	movs	r0, #5
 8002278:	f7fe fb22 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800227c:	2010      	movs	r0, #16
 800227e:	f7fe fb1f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002282:	200f      	movs	r0, #15
 8002284:	f7fe fb1c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002288:	203f      	movs	r0, #63	; 0x3f
 800228a:	f7fe fb19 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800228e:	203f      	movs	r0, #63	; 0x3f
 8002290:	f7fe fb16 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002294:	200f      	movs	r0, #15
 8002296:	f7fe fb13 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800229a:	202b      	movs	r0, #43	; 0x2b
 800229c:	f7fe faec 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fb0d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7fe fb0a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7fe fb07 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80022b2:	203f      	movs	r0, #63	; 0x3f
 80022b4:	f7fe fb04 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80022b8:	202a      	movs	r0, #42	; 0x2a
 80022ba:	f7fe fadd 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fafe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe fafb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe faf8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80022d0:	20ef      	movs	r0, #239	; 0xef
 80022d2:	f7fe faf5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80022d6:	2011      	movs	r0, #17
 80022d8:	f7fe face 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(120);
 80022dc:	2078      	movs	r0, #120	; 0x78
 80022de:	f004 f893 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80022e2:	2029      	movs	r0, #41	; 0x29
 80022e4:	f7fe fac8 	bl	8000878 <LCD_WR_REG>
 80022e8:	f003 bcd8 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80022ec:	4b58      	ldr	r3, [pc, #352]	; (8002450 <LCD_Init+0x5e8>)
 80022ee:	889b      	ldrh	r3, [r3, #4]
 80022f0:	f646 0204 	movw	r2, #26628	; 0x6804
 80022f4:	4293      	cmp	r3, r2
 80022f6:	f040 80ad 	bne.w	8002454 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80022fa:	2011      	movs	r0, #17
 80022fc:	f7fe fabc 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(20);
 8002300:	2014      	movs	r0, #20
 8002302:	f004 f881 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002306:	20d0      	movs	r0, #208	; 0xd0
 8002308:	f7fe fab6 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800230c:	2007      	movs	r0, #7
 800230e:	f7fe fad7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002312:	2042      	movs	r0, #66	; 0x42
 8002314:	f7fe fad4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002318:	201d      	movs	r0, #29
 800231a:	f7fe fad1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800231e:	20d1      	movs	r0, #209	; 0xd1
 8002320:	f7fe faaa 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe facb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800232a:	201a      	movs	r0, #26
 800232c:	f7fe fac8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002330:	2009      	movs	r0, #9
 8002332:	f7fe fac5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002336:	20d2      	movs	r0, #210	; 0xd2
 8002338:	f7fe fa9e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800233c:	2001      	movs	r0, #1
 800233e:	f7fe fabf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002342:	2022      	movs	r0, #34	; 0x22
 8002344:	f7fe fabc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002348:	20c0      	movs	r0, #192	; 0xc0
 800234a:	f7fe fa95 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800234e:	2010      	movs	r0, #16
 8002350:	f7fe fab6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002354:	203b      	movs	r0, #59	; 0x3b
 8002356:	f7fe fab3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe fab0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002360:	2002      	movs	r0, #2
 8002362:	f7fe faad 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002366:	2011      	movs	r0, #17
 8002368:	f7fe faaa 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800236c:	20c5      	movs	r0, #197	; 0xc5
 800236e:	f7fe fa83 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002372:	2003      	movs	r0, #3
 8002374:	f7fe faa4 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002378:	20c8      	movs	r0, #200	; 0xc8
 800237a:	f7fe fa7d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7fe fa9e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002384:	2025      	movs	r0, #37	; 0x25
 8002386:	f7fe fa9b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800238a:	2021      	movs	r0, #33	; 0x21
 800238c:	f7fe fa98 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002390:	2005      	movs	r0, #5
 8002392:	f7fe fa95 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fa92 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800239c:	200a      	movs	r0, #10
 800239e:	f7fe fa8f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80023a2:	2065      	movs	r0, #101	; 0x65
 80023a4:	f7fe fa8c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80023a8:	2025      	movs	r0, #37	; 0x25
 80023aa:	f7fe fa89 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80023ae:	2077      	movs	r0, #119	; 0x77
 80023b0:	f7fe fa86 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80023b4:	2050      	movs	r0, #80	; 0x50
 80023b6:	f7fe fa83 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80023ba:	200f      	movs	r0, #15
 80023bc:	f7fe fa80 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fa7d 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80023c6:	20f8      	movs	r0, #248	; 0xf8
 80023c8:	f7fe fa56 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7fe fa77 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80023d2:	20fe      	movs	r0, #254	; 0xfe
 80023d4:	f7fe fa50 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fa71 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80023de:	2002      	movs	r0, #2
 80023e0:	f7fe fa6e 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80023e4:	2020      	movs	r0, #32
 80023e6:	f7fe fa47 	bl	8000878 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80023ea:	2036      	movs	r0, #54	; 0x36
 80023ec:	f7fe fa44 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80023f0:	2008      	movs	r0, #8
 80023f2:	f7fe fa65 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80023f6:	203a      	movs	r0, #58	; 0x3a
 80023f8:	f7fe fa3e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80023fc:	2055      	movs	r0, #85	; 0x55
 80023fe:	f7fe fa5f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002402:	202b      	movs	r0, #43	; 0x2b
 8002404:	f7fe fa38 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe fa59 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe fa56 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe fa53 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800241a:	203f      	movs	r0, #63	; 0x3f
 800241c:	f7fe fa50 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002420:	202a      	movs	r0, #42	; 0x2a
 8002422:	f7fe fa29 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002426:	2000      	movs	r0, #0
 8002428:	f7fe fa4a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fa47 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002432:	2001      	movs	r0, #1
 8002434:	f7fe fa44 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002438:	20df      	movs	r0, #223	; 0xdf
 800243a:	f7fe fa41 	bl	80008c0 <LCD_WR_DATAX>
		HAL_Delay(120);
 800243e:	2078      	movs	r0, #120	; 0x78
 8002440:	f003 ffe2 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002444:	2029      	movs	r0, #41	; 0x29
 8002446:	f7fe fa17 	bl	8000878 <LCD_WR_REG>
 800244a:	f003 bc27 	b.w	8005c9c <LCD_Init+0x3e34>
 800244e:	bf00      	nop
 8002450:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5310) {
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <LCD_Init+0x5fc>)
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	f245 3210 	movw	r2, #21264	; 0x5310
 800245c:	4293      	cmp	r3, r2
 800245e:	f040 877c 	bne.w	800335a <LCD_Init+0x14f2>
 8002462:	e001      	b.n	8002468 <LCD_Init+0x600>
 8002464:	20000080 	.word	0x20000080
		LCD_WR_REG(0xED);
 8002468:	20ed      	movs	r0, #237	; 0xed
 800246a:	f7fe fa05 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800246e:	2001      	movs	r0, #1
 8002470:	f7fe fa26 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002474:	20fe      	movs	r0, #254	; 0xfe
 8002476:	f7fe fa23 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800247a:	20ee      	movs	r0, #238	; 0xee
 800247c:	f7fe f9fc 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002480:	20de      	movs	r0, #222	; 0xde
 8002482:	f7fe fa1d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002486:	2021      	movs	r0, #33	; 0x21
 8002488:	f7fe fa1a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800248c:	20f1      	movs	r0, #241	; 0xf1
 800248e:	f7fe f9f3 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002492:	2001      	movs	r0, #1
 8002494:	f7fe fa14 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002498:	20df      	movs	r0, #223	; 0xdf
 800249a:	f7fe f9ed 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800249e:	2010      	movs	r0, #16
 80024a0:	f7fe fa0e 	bl	80008c0 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80024a4:	20c4      	movs	r0, #196	; 0xc4
 80024a6:	f7fe f9e7 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80024aa:	208f      	movs	r0, #143	; 0x8f
 80024ac:	f7fe fa08 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80024b0:	20c6      	movs	r0, #198	; 0xc6
 80024b2:	f7fe f9e1 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe fa02 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80024bc:	20e2      	movs	r0, #226	; 0xe2
 80024be:	f7fe f9ff 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80024c2:	20e2      	movs	r0, #226	; 0xe2
 80024c4:	f7fe f9fc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80024c8:	20e2      	movs	r0, #226	; 0xe2
 80024ca:	f7fe f9f9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80024ce:	20bf      	movs	r0, #191	; 0xbf
 80024d0:	f7fe f9d2 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80024d4:	20aa      	movs	r0, #170	; 0xaa
 80024d6:	f7fe f9f3 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80024da:	20b0      	movs	r0, #176	; 0xb0
 80024dc:	f7fe f9cc 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80024e0:	200d      	movs	r0, #13
 80024e2:	f7fe f9ed 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7fe f9ea 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80024ec:	200d      	movs	r0, #13
 80024ee:	f7fe f9e7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe f9e4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80024f8:	2011      	movs	r0, #17
 80024fa:	f7fe f9e1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe f9de 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002504:	2019      	movs	r0, #25
 8002506:	f7fe f9db 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe f9d8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002510:	2021      	movs	r0, #33	; 0x21
 8002512:	f7fe f9d5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe f9d2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800251c:	202d      	movs	r0, #45	; 0x2d
 800251e:	f7fe f9cf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe f9cc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002528:	203d      	movs	r0, #61	; 0x3d
 800252a:	f7fe f9c9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe f9c6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002534:	205d      	movs	r0, #93	; 0x5d
 8002536:	f7fe f9c3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe f9c0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002540:	205d      	movs	r0, #93	; 0x5d
 8002542:	f7fe f9bd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe f9ba 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800254c:	20b1      	movs	r0, #177	; 0xb1
 800254e:	f7fe f993 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002552:	2080      	movs	r0, #128	; 0x80
 8002554:	f7fe f9b4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe f9b1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800255e:	208b      	movs	r0, #139	; 0x8b
 8002560:	f7fe f9ae 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe f9ab 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800256a:	2096      	movs	r0, #150	; 0x96
 800256c:	f7fe f9a8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe f9a5 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002576:	20b2      	movs	r0, #178	; 0xb2
 8002578:	f7fe f97e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7fe f99f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe f99c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002588:	2002      	movs	r0, #2
 800258a:	f7fe f999 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe f996 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002594:	2003      	movs	r0, #3
 8002596:	f7fe f993 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe f990 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80025a0:	20b3      	movs	r0, #179	; 0xb3
 80025a2:	f7fe f969 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe f98a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe f987 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe f984 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe f981 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe f97e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe f97b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe f978 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe f975 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe f972 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe f96f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe f96c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe f969 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe f966 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe f963 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe f960 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe f95d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe f95a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe f957 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe f954 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe f951 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe f94e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe f94b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe f948 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe f945 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002636:	20b4      	movs	r0, #180	; 0xb4
 8002638:	f7fe f91e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800263c:	208b      	movs	r0, #139	; 0x8b
 800263e:	f7fe f93f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe f93c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002648:	2096      	movs	r0, #150	; 0x96
 800264a:	f7fe f939 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe f936 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002654:	20a1      	movs	r0, #161	; 0xa1
 8002656:	f7fe f933 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe f930 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002660:	20b5      	movs	r0, #181	; 0xb5
 8002662:	f7fe f909 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002666:	2002      	movs	r0, #2
 8002668:	f7fe f92a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe f927 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002672:	2003      	movs	r0, #3
 8002674:	f7fe f924 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe f921 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800267e:	2004      	movs	r0, #4
 8002680:	f7fe f91e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe f91b 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800268a:	20b6      	movs	r0, #182	; 0xb6
 800268c:	f7fe f8f4 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe f915 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe f912 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800269c:	20b7      	movs	r0, #183	; 0xb7
 800269e:	f7fe f8eb 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe f90c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe f909 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80026ae:	203f      	movs	r0, #63	; 0x3f
 80026b0:	f7fe f906 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe f903 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80026ba:	205e      	movs	r0, #94	; 0x5e
 80026bc:	f7fe f900 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe f8fd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80026c6:	2064      	movs	r0, #100	; 0x64
 80026c8:	f7fe f8fa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe f8f7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80026d2:	208c      	movs	r0, #140	; 0x8c
 80026d4:	f7fe f8f4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe f8f1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80026de:	20ac      	movs	r0, #172	; 0xac
 80026e0:	f7fe f8ee 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe f8eb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80026ea:	20dc      	movs	r0, #220	; 0xdc
 80026ec:	f7fe f8e8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe f8e5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80026f6:	2070      	movs	r0, #112	; 0x70
 80026f8:	f7fe f8e2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe f8df 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002702:	2090      	movs	r0, #144	; 0x90
 8002704:	f7fe f8dc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe f8d9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800270e:	20eb      	movs	r0, #235	; 0xeb
 8002710:	f7fe f8d6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe f8d3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800271a:	20dc      	movs	r0, #220	; 0xdc
 800271c:	f7fe f8d0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe f8cd 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002726:	20b8      	movs	r0, #184	; 0xb8
 8002728:	f7fe f8a6 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe f8c7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe f8c4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe f8c1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe f8be 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe f8bb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe f8b8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe f8b5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe f8b2 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800275c:	20ba      	movs	r0, #186	; 0xba
 800275e:	f7fe f88b 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002762:	2024      	movs	r0, #36	; 0x24
 8002764:	f7fe f8ac 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f8a9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe f8a6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f8a3 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800277a:	20c1      	movs	r0, #193	; 0xc1
 800277c:	f7fe f87c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002780:	2020      	movs	r0, #32
 8002782:	f7fe f89d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe f89a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800278c:	2054      	movs	r0, #84	; 0x54
 800278e:	f7fe f897 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe f894 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002798:	20ff      	movs	r0, #255	; 0xff
 800279a:	f7fe f891 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe f88e 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80027a4:	20c2      	movs	r0, #194	; 0xc2
 80027a6:	f7fe f867 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80027aa:	200a      	movs	r0, #10
 80027ac:	f7fe f888 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe f885 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80027b6:	2004      	movs	r0, #4
 80027b8:	f7fe f882 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe f87f 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80027c2:	20c3      	movs	r0, #195	; 0xc3
 80027c4:	f7fe f858 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80027c8:	203c      	movs	r0, #60	; 0x3c
 80027ca:	f7fe f879 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe f876 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80027d4:	203a      	movs	r0, #58	; 0x3a
 80027d6:	f7fe f873 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7fe f870 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80027e0:	2039      	movs	r0, #57	; 0x39
 80027e2:	f7fe f86d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f86a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80027ec:	2037      	movs	r0, #55	; 0x37
 80027ee:	f7fe f867 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f864 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80027f8:	203c      	movs	r0, #60	; 0x3c
 80027fa:	f7fe f861 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f85e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002804:	2036      	movs	r0, #54	; 0x36
 8002806:	f7fe f85b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe f858 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002810:	2032      	movs	r0, #50	; 0x32
 8002812:	f7fe f855 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe f852 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800281c:	202f      	movs	r0, #47	; 0x2f
 800281e:	f7fe f84f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f84c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002828:	202c      	movs	r0, #44	; 0x2c
 800282a:	f7fe f849 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f846 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002834:	2029      	movs	r0, #41	; 0x29
 8002836:	f7fe f843 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f840 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002840:	2026      	movs	r0, #38	; 0x26
 8002842:	f7fe f83d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f83a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800284c:	2024      	movs	r0, #36	; 0x24
 800284e:	f7fe f837 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe f834 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002858:	2024      	movs	r0, #36	; 0x24
 800285a:	f7fe f831 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe f82e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002864:	2023      	movs	r0, #35	; 0x23
 8002866:	f7fe f82b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe f828 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002870:	203c      	movs	r0, #60	; 0x3c
 8002872:	f7fe f825 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe f822 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800287c:	2036      	movs	r0, #54	; 0x36
 800287e:	f7fe f81f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe f81c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002888:	2032      	movs	r0, #50	; 0x32
 800288a:	f7fe f819 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe f816 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002894:	202f      	movs	r0, #47	; 0x2f
 8002896:	f7fe f813 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe f810 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80028a0:	202c      	movs	r0, #44	; 0x2c
 80028a2:	f7fe f80d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe f80a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80028ac:	2029      	movs	r0, #41	; 0x29
 80028ae:	f7fe f807 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe f804 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80028b8:	2026      	movs	r0, #38	; 0x26
 80028ba:	f7fe f801 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fd fffe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80028c4:	2024      	movs	r0, #36	; 0x24
 80028c6:	f7fd fffb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fd fff8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80028d0:	2024      	movs	r0, #36	; 0x24
 80028d2:	f7fd fff5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fd fff2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80028dc:	2023      	movs	r0, #35	; 0x23
 80028de:	f7fd ffef 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fd ffec 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80028e8:	20c4      	movs	r0, #196	; 0xc4
 80028ea:	f7fd ffc5 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80028ee:	2062      	movs	r0, #98	; 0x62
 80028f0:	f7fd ffe6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fd ffe3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80028fa:	2005      	movs	r0, #5
 80028fc:	f7fd ffe0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fd ffdd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002906:	2084      	movs	r0, #132	; 0x84
 8002908:	f7fd ffda 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fd ffd7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002912:	20f0      	movs	r0, #240	; 0xf0
 8002914:	f7fd ffd4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fd ffd1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800291e:	2018      	movs	r0, #24
 8002920:	f7fd ffce 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f7fd ffcb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800292a:	20a4      	movs	r0, #164	; 0xa4
 800292c:	f7fd ffc8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002930:	2000      	movs	r0, #0
 8002932:	f7fd ffc5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002936:	2018      	movs	r0, #24
 8002938:	f7fd ffc2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fd ffbf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002942:	2050      	movs	r0, #80	; 0x50
 8002944:	f7fd ffbc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fd ffb9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800294e:	200c      	movs	r0, #12
 8002950:	f7fd ffb6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fd ffb3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800295a:	2017      	movs	r0, #23
 800295c:	f7fd ffb0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fd ffad 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002966:	2095      	movs	r0, #149	; 0x95
 8002968:	f7fd ffaa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fd ffa7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002972:	20f3      	movs	r0, #243	; 0xf3
 8002974:	f7fd ffa4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fd ffa1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 800297e:	20e6      	movs	r0, #230	; 0xe6
 8002980:	f7fd ff9e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fd ff9b 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800298a:	20c5      	movs	r0, #197	; 0xc5
 800298c:	f7fd ff74 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002990:	2032      	movs	r0, #50	; 0x32
 8002992:	f7fd ff95 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fd ff92 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800299c:	2044      	movs	r0, #68	; 0x44
 800299e:	f7fd ff8f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fd ff8c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80029a8:	2065      	movs	r0, #101	; 0x65
 80029aa:	f7fd ff89 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7fd ff86 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80029b4:	2076      	movs	r0, #118	; 0x76
 80029b6:	f7fd ff83 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7fd ff80 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80029c0:	2088      	movs	r0, #136	; 0x88
 80029c2:	f7fd ff7d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fd ff7a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80029cc:	20c6      	movs	r0, #198	; 0xc6
 80029ce:	f7fd ff53 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80029d2:	2020      	movs	r0, #32
 80029d4:	f7fd ff74 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fd ff71 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80029de:	2017      	movs	r0, #23
 80029e0:	f7fd ff6e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fd ff6b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7fd ff68 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fd ff65 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80029f6:	20c7      	movs	r0, #199	; 0xc7
 80029f8:	f7fd ff3e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fd ff5f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fd ff5c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fd ff59 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fd ff56 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002a14:	20c8      	movs	r0, #200	; 0xc8
 8002a16:	f7fd ff2f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fd ff50 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fd ff4d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fd ff4a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fd ff47 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002a32:	20c9      	movs	r0, #201	; 0xc9
 8002a34:	f7fd ff20 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fd ff41 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fd ff3e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fd ff3b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fd ff38 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fd ff35 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fd ff32 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fd ff2f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fd ff2c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fd ff29 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fd ff26 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fd ff23 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fd ff20 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fd ff1d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fd ff1a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fd ff17 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fd ff14 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002a98:	20e0      	movs	r0, #224	; 0xe0
 8002a9a:	f7fd feed 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002a9e:	2016      	movs	r0, #22
 8002aa0:	f7fd ff0e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fd ff0b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002aaa:	201c      	movs	r0, #28
 8002aac:	f7fd ff08 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fd ff05 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002ab6:	2021      	movs	r0, #33	; 0x21
 8002ab8:	f7fd ff02 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fd feff 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ac2:	2036      	movs	r0, #54	; 0x36
 8002ac4:	f7fd fefc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd fef9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002ace:	2046      	movs	r0, #70	; 0x46
 8002ad0:	f7fd fef6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fd fef3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002ada:	2052      	movs	r0, #82	; 0x52
 8002adc:	f7fd fef0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fd feed 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002ae6:	2064      	movs	r0, #100	; 0x64
 8002ae8:	f7fd feea 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fd fee7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002af2:	207a      	movs	r0, #122	; 0x7a
 8002af4:	f7fd fee4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fd fee1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002afe:	208b      	movs	r0, #139	; 0x8b
 8002b00:	f7fd fede 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd fedb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002b0a:	2099      	movs	r0, #153	; 0x99
 8002b0c:	f7fd fed8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd fed5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002b16:	20a8      	movs	r0, #168	; 0xa8
 8002b18:	f7fd fed2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd fecf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002b22:	20b9      	movs	r0, #185	; 0xb9
 8002b24:	f7fd fecc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fd fec9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b2e:	20c4      	movs	r0, #196	; 0xc4
 8002b30:	f7fd fec6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fd fec3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002b3a:	20ca      	movs	r0, #202	; 0xca
 8002b3c:	f7fd fec0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fd febd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002b46:	20d2      	movs	r0, #210	; 0xd2
 8002b48:	f7fd feba 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fd feb7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002b52:	20d9      	movs	r0, #217	; 0xd9
 8002b54:	f7fd feb4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fd feb1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002b5e:	20e0      	movs	r0, #224	; 0xe0
 8002b60:	f7fd feae 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fd feab 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b6a:	20f3      	movs	r0, #243	; 0xf3
 8002b6c:	f7fd fea8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fd fea5 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002b76:	20e1      	movs	r0, #225	; 0xe1
 8002b78:	f7fd fe7e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002b7c:	2016      	movs	r0, #22
 8002b7e:	f7fd fe9f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fd fe9c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002b88:	201c      	movs	r0, #28
 8002b8a:	f7fd fe99 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fd fe96 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002b94:	2022      	movs	r0, #34	; 0x22
 8002b96:	f7fd fe93 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fd fe90 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ba0:	2036      	movs	r0, #54	; 0x36
 8002ba2:	f7fd fe8d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fd fe8a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002bac:	2045      	movs	r0, #69	; 0x45
 8002bae:	f7fd fe87 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fd fe84 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002bb8:	2052      	movs	r0, #82	; 0x52
 8002bba:	f7fd fe81 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fd fe7e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	f7fd fe7b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fd fe78 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002bd0:	207a      	movs	r0, #122	; 0x7a
 8002bd2:	f7fd fe75 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fd fe72 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002bdc:	208b      	movs	r0, #139	; 0x8b
 8002bde:	f7fd fe6f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fd fe6c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002be8:	2099      	movs	r0, #153	; 0x99
 8002bea:	f7fd fe69 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fd fe66 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002bf4:	20a8      	movs	r0, #168	; 0xa8
 8002bf6:	f7fd fe63 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd fe60 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c00:	20b9      	movs	r0, #185	; 0xb9
 8002c02:	f7fd fe5d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fd fe5a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c0c:	20c4      	movs	r0, #196	; 0xc4
 8002c0e:	f7fd fe57 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fd fe54 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c18:	20ca      	movs	r0, #202	; 0xca
 8002c1a:	f7fd fe51 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fd fe4e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c24:	20d2      	movs	r0, #210	; 0xd2
 8002c26:	f7fd fe4b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fd fe48 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002c30:	20d8      	movs	r0, #216	; 0xd8
 8002c32:	f7fd fe45 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fd fe42 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c3c:	20e0      	movs	r0, #224	; 0xe0
 8002c3e:	f7fd fe3f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fd fe3c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c48:	20f3      	movs	r0, #243	; 0xf3
 8002c4a:	f7fd fe39 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fd fe36 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002c54:	20e2      	movs	r0, #226	; 0xe2
 8002c56:	f7fd fe0f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002c5a:	2005      	movs	r0, #5
 8002c5c:	f7fd fe30 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fd fe2d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002c66:	200b      	movs	r0, #11
 8002c68:	f7fd fe2a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fd fe27 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002c72:	201b      	movs	r0, #27
 8002c74:	f7fd fe24 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fd fe21 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002c7e:	2034      	movs	r0, #52	; 0x34
 8002c80:	f7fd fe1e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd fe1b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c8a:	2044      	movs	r0, #68	; 0x44
 8002c8c:	f7fd fe18 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7fd fe15 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002c96:	204f      	movs	r0, #79	; 0x4f
 8002c98:	f7fd fe12 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fd fe0f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002ca2:	2061      	movs	r0, #97	; 0x61
 8002ca4:	f7fd fe0c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fd fe09 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002cae:	2079      	movs	r0, #121	; 0x79
 8002cb0:	f7fd fe06 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fd fe03 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002cba:	2088      	movs	r0, #136	; 0x88
 8002cbc:	f7fd fe00 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fd fdfd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002cc6:	2097      	movs	r0, #151	; 0x97
 8002cc8:	f7fd fdfa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fd fdf7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002cd2:	20a6      	movs	r0, #166	; 0xa6
 8002cd4:	f7fd fdf4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd fdf1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002cde:	20b7      	movs	r0, #183	; 0xb7
 8002ce0:	f7fd fdee 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd fdeb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002cea:	20c2      	movs	r0, #194	; 0xc2
 8002cec:	f7fd fde8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fd fde5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002cf6:	20c7      	movs	r0, #199	; 0xc7
 8002cf8:	f7fd fde2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fd fddf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002d02:	20d1      	movs	r0, #209	; 0xd1
 8002d04:	f7fd fddc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fd fdd9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002d0e:	20d6      	movs	r0, #214	; 0xd6
 8002d10:	f7fd fdd6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fd fdd3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002d1a:	20dd      	movs	r0, #221	; 0xdd
 8002d1c:	f7fd fdd0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fd fdcd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d26:	20f3      	movs	r0, #243	; 0xf3
 8002d28:	f7fd fdca 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fd fdc7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002d32:	20e3      	movs	r0, #227	; 0xe3
 8002d34:	f7fd fda0 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d38:	2005      	movs	r0, #5
 8002d3a:	f7fd fdc1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fd fdbe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002d44:	200a      	movs	r0, #10
 8002d46:	f7fd fdbb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fd fdb8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d50:	201c      	movs	r0, #28
 8002d52:	f7fd fdb5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7fd fdb2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002d5c:	2033      	movs	r0, #51	; 0x33
 8002d5e:	f7fd fdaf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fd fdac 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d68:	2044      	movs	r0, #68	; 0x44
 8002d6a:	f7fd fda9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fd fda6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002d74:	2050      	movs	r0, #80	; 0x50
 8002d76:	f7fd fda3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fd fda0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002d80:	2062      	movs	r0, #98	; 0x62
 8002d82:	f7fd fd9d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7fd fd9a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002d8c:	2078      	movs	r0, #120	; 0x78
 8002d8e:	f7fd fd97 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fd fd94 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d98:	2088      	movs	r0, #136	; 0x88
 8002d9a:	f7fd fd91 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fd fd8e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002da4:	2097      	movs	r0, #151	; 0x97
 8002da6:	f7fd fd8b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fd fd88 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002db0:	20a6      	movs	r0, #166	; 0xa6
 8002db2:	f7fd fd85 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fd fd82 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002dbc:	20b7      	movs	r0, #183	; 0xb7
 8002dbe:	f7fd fd7f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fd fd7c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002dc8:	20c2      	movs	r0, #194	; 0xc2
 8002dca:	f7fd fd79 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7fd fd76 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002dd4:	20c7      	movs	r0, #199	; 0xc7
 8002dd6:	f7fd fd73 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fd70 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002de0:	20d1      	movs	r0, #209	; 0xd1
 8002de2:	f7fd fd6d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fd fd6a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002dec:	20d5      	movs	r0, #213	; 0xd5
 8002dee:	f7fd fd67 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fd fd64 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002df8:	20dd      	movs	r0, #221	; 0xdd
 8002dfa:	f7fd fd61 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fd fd5e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e04:	20f3      	movs	r0, #243	; 0xf3
 8002e06:	f7fd fd5b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fd fd58 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002e10:	20e4      	movs	r0, #228	; 0xe4
 8002e12:	f7fd fd31 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fd fd52 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd fd4f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7fd fd4c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fd fd49 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002e2e:	2002      	movs	r0, #2
 8002e30:	f7fd fd46 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fd fd43 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002e3a:	202a      	movs	r0, #42	; 0x2a
 8002e3c:	f7fd fd40 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7fd fd3d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002e46:	203c      	movs	r0, #60	; 0x3c
 8002e48:	f7fd fd3a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fd fd37 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002e52:	204b      	movs	r0, #75	; 0x4b
 8002e54:	f7fd fd34 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fd fd31 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002e5e:	205d      	movs	r0, #93	; 0x5d
 8002e60:	f7fd fd2e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fd fd2b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002e6a:	2074      	movs	r0, #116	; 0x74
 8002e6c:	f7fd fd28 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fd25 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002e76:	2084      	movs	r0, #132	; 0x84
 8002e78:	f7fd fd22 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fd fd1f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002e82:	2093      	movs	r0, #147	; 0x93
 8002e84:	f7fd fd1c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fd fd19 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002e8e:	20a2      	movs	r0, #162	; 0xa2
 8002e90:	f7fd fd16 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fd fd13 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002e9a:	20b3      	movs	r0, #179	; 0xb3
 8002e9c:	f7fd fd10 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd fd0d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002ea6:	20be      	movs	r0, #190	; 0xbe
 8002ea8:	f7fd fd0a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fd fd07 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002eb2:	20c4      	movs	r0, #196	; 0xc4
 8002eb4:	f7fd fd04 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fd fd01 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002ebe:	20cd      	movs	r0, #205	; 0xcd
 8002ec0:	f7fd fcfe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fd fcfb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002eca:	20d3      	movs	r0, #211	; 0xd3
 8002ecc:	f7fd fcf8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd fcf5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002ed6:	20dd      	movs	r0, #221	; 0xdd
 8002ed8:	f7fd fcf2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fd fcef 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ee2:	20f3      	movs	r0, #243	; 0xf3
 8002ee4:	f7fd fcec 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fd fce9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002eee:	20e5      	movs	r0, #229	; 0xe5
 8002ef0:	f7fd fcc2 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fd fce3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7fd fce0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fd fcdd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fd fcda 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f7fd fcd7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7fd fcd4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002f18:	2029      	movs	r0, #41	; 0x29
 8002f1a:	f7fd fcd1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fd fcce 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f24:	203c      	movs	r0, #60	; 0x3c
 8002f26:	f7fd fccb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7fd fcc8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f30:	204b      	movs	r0, #75	; 0x4b
 8002f32:	f7fd fcc5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fd fcc2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f3c:	205d      	movs	r0, #93	; 0x5d
 8002f3e:	f7fd fcbf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fd fcbc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f48:	2074      	movs	r0, #116	; 0x74
 8002f4a:	f7fd fcb9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fd fcb6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f54:	2084      	movs	r0, #132	; 0x84
 8002f56:	f7fd fcb3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fd fcb0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f60:	2093      	movs	r0, #147	; 0x93
 8002f62:	f7fd fcad 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fd fcaa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f6c:	20a2      	movs	r0, #162	; 0xa2
 8002f6e:	f7fd fca7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd fca4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002f78:	20b3      	movs	r0, #179	; 0xb3
 8002f7a:	f7fd fca1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd fc9e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002f84:	20be      	movs	r0, #190	; 0xbe
 8002f86:	f7fd fc9b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fd fc98 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f90:	20c4      	movs	r0, #196	; 0xc4
 8002f92:	f7fd fc95 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fd fc92 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002f9c:	20cd      	movs	r0, #205	; 0xcd
 8002f9e:	f7fd fc8f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fd fc8c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002fa8:	20d3      	movs	r0, #211	; 0xd3
 8002faa:	f7fd fc89 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fd fc86 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002fb4:	20dc      	movs	r0, #220	; 0xdc
 8002fb6:	f7fd fc83 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fd fc80 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fc0:	20f3      	movs	r0, #243	; 0xf3
 8002fc2:	f7fd fc7d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd fc7a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002fcc:	20e6      	movs	r0, #230	; 0xe6
 8002fce:	f7fd fc53 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002fd2:	2011      	movs	r0, #17
 8002fd4:	f7fd fc74 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fd fc71 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002fde:	2034      	movs	r0, #52	; 0x34
 8002fe0:	f7fd fc6e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fd fc6b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002fea:	2056      	movs	r0, #86	; 0x56
 8002fec:	f7fd fc68 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fd fc65 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002ff6:	2076      	movs	r0, #118	; 0x76
 8002ff8:	f7fd fc62 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7fd fc5f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003002:	2077      	movs	r0, #119	; 0x77
 8003004:	f7fd fc5c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f7fd fc59 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800300e:	2066      	movs	r0, #102	; 0x66
 8003010:	f7fd fc56 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003014:	2000      	movs	r0, #0
 8003016:	f7fd fc53 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800301a:	2088      	movs	r0, #136	; 0x88
 800301c:	f7fd fc50 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f7fd fc4d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003026:	2099      	movs	r0, #153	; 0x99
 8003028:	f7fd fc4a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f7fd fc47 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003032:	20bb      	movs	r0, #187	; 0xbb
 8003034:	f7fd fc44 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd fc41 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800303e:	2099      	movs	r0, #153	; 0x99
 8003040:	f7fd fc3e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003044:	2000      	movs	r0, #0
 8003046:	f7fd fc3b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800304a:	2066      	movs	r0, #102	; 0x66
 800304c:	f7fd fc38 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fd fc35 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003056:	2055      	movs	r0, #85	; 0x55
 8003058:	f7fd fc32 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305c:	2000      	movs	r0, #0
 800305e:	f7fd fc2f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003062:	2055      	movs	r0, #85	; 0x55
 8003064:	f7fd fc2c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003068:	2000      	movs	r0, #0
 800306a:	f7fd fc29 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800306e:	2045      	movs	r0, #69	; 0x45
 8003070:	f7fd fc26 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003074:	2000      	movs	r0, #0
 8003076:	f7fd fc23 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800307a:	2043      	movs	r0, #67	; 0x43
 800307c:	f7fd fc20 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003080:	2000      	movs	r0, #0
 8003082:	f7fd fc1d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003086:	2044      	movs	r0, #68	; 0x44
 8003088:	f7fd fc1a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308c:	2000      	movs	r0, #0
 800308e:	f7fd fc17 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003092:	20e7      	movs	r0, #231	; 0xe7
 8003094:	f7fd fbf0 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003098:	2032      	movs	r0, #50	; 0x32
 800309a:	f7fd fc11 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309e:	2000      	movs	r0, #0
 80030a0:	f7fd fc0e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80030a4:	2055      	movs	r0, #85	; 0x55
 80030a6:	f7fd fc0b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fd fc08 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80030b0:	2076      	movs	r0, #118	; 0x76
 80030b2:	f7fd fc05 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7fd fc02 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80030bc:	2066      	movs	r0, #102	; 0x66
 80030be:	f7fd fbff 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7fd fbfc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80030c8:	2067      	movs	r0, #103	; 0x67
 80030ca:	f7fd fbf9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fd fbf6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80030d4:	2067      	movs	r0, #103	; 0x67
 80030d6:	f7fd fbf3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030da:	2000      	movs	r0, #0
 80030dc:	f7fd fbf0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80030e0:	2087      	movs	r0, #135	; 0x87
 80030e2:	f7fd fbed 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f7fd fbea 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80030ec:	2099      	movs	r0, #153	; 0x99
 80030ee:	f7fd fbe7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fd fbe4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80030f8:	20bb      	movs	r0, #187	; 0xbb
 80030fa:	f7fd fbe1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd fbde 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003104:	2099      	movs	r0, #153	; 0x99
 8003106:	f7fd fbdb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fd fbd8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003110:	2077      	movs	r0, #119	; 0x77
 8003112:	f7fd fbd5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fd fbd2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800311c:	2044      	movs	r0, #68	; 0x44
 800311e:	f7fd fbcf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003122:	2000      	movs	r0, #0
 8003124:	f7fd fbcc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003128:	2056      	movs	r0, #86	; 0x56
 800312a:	f7fd fbc9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312e:	2000      	movs	r0, #0
 8003130:	f7fd fbc6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003134:	2023      	movs	r0, #35	; 0x23
 8003136:	f7fd fbc3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313a:	2000      	movs	r0, #0
 800313c:	f7fd fbc0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003140:	2033      	movs	r0, #51	; 0x33
 8003142:	f7fd fbbd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003146:	2000      	movs	r0, #0
 8003148:	f7fd fbba 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800314c:	2045      	movs	r0, #69	; 0x45
 800314e:	f7fd fbb7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003152:	2000      	movs	r0, #0
 8003154:	f7fd fbb4 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003158:	20e8      	movs	r0, #232	; 0xe8
 800315a:	f7fd fb8d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800315e:	2000      	movs	r0, #0
 8003160:	f7fd fbae 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003164:	2000      	movs	r0, #0
 8003166:	f7fd fbab 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800316a:	2099      	movs	r0, #153	; 0x99
 800316c:	f7fd fba8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003170:	2000      	movs	r0, #0
 8003172:	f7fd fba5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003176:	2087      	movs	r0, #135	; 0x87
 8003178:	f7fd fba2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317c:	2000      	movs	r0, #0
 800317e:	f7fd fb9f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003182:	2088      	movs	r0, #136	; 0x88
 8003184:	f7fd fb9c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003188:	2000      	movs	r0, #0
 800318a:	f7fd fb99 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800318e:	2077      	movs	r0, #119	; 0x77
 8003190:	f7fd fb96 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003194:	2000      	movs	r0, #0
 8003196:	f7fd fb93 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800319a:	2066      	movs	r0, #102	; 0x66
 800319c:	f7fd fb90 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7fd fb8d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80031a6:	2088      	movs	r0, #136	; 0x88
 80031a8:	f7fd fb8a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7fd fb87 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80031b2:	20aa      	movs	r0, #170	; 0xaa
 80031b4:	f7fd fb84 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7fd fb81 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80031be:	20bb      	movs	r0, #187	; 0xbb
 80031c0:	f7fd fb7e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fd fb7b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031ca:	2099      	movs	r0, #153	; 0x99
 80031cc:	f7fd fb78 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fd fb75 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031d6:	2066      	movs	r0, #102	; 0x66
 80031d8:	f7fd fb72 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031dc:	2000      	movs	r0, #0
 80031de:	f7fd fb6f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031e2:	2055      	movs	r0, #85	; 0x55
 80031e4:	f7fd fb6c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7fd fb69 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031ee:	2055      	movs	r0, #85	; 0x55
 80031f0:	f7fd fb66 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd fb63 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80031fa:	2044      	movs	r0, #68	; 0x44
 80031fc:	f7fd fb60 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003200:	2000      	movs	r0, #0
 8003202:	f7fd fb5d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003206:	2044      	movs	r0, #68	; 0x44
 8003208:	f7fd fb5a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd fb57 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003212:	2055      	movs	r0, #85	; 0x55
 8003214:	f7fd fb54 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd fb51 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800321e:	20e9      	movs	r0, #233	; 0xe9
 8003220:	f7fd fb2a 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003224:	20aa      	movs	r0, #170	; 0xaa
 8003226:	f7fd fb4b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322a:	2000      	movs	r0, #0
 800322c:	f7fd fb48 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fb45 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003236:	2000      	movs	r0, #0
 8003238:	f7fd fb42 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fb1b 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003242:	20aa      	movs	r0, #170	; 0xaa
 8003244:	f7fd fb3c 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003248:	20cf      	movs	r0, #207	; 0xcf
 800324a:	f7fd fb15 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800324e:	2000      	movs	r0, #0
 8003250:	f7fd fb36 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fb33 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325a:	2000      	movs	r0, #0
 800325c:	f7fd fb30 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fb2d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003266:	2000      	movs	r0, #0
 8003268:	f7fd fb2a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326c:	2000      	movs	r0, #0
 800326e:	f7fd fb27 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd fb24 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd fb21 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f7fd fb1e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fd fb1b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328a:	2000      	movs	r0, #0
 800328c:	f7fd fb18 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003290:	2000      	movs	r0, #0
 8003292:	f7fd fb15 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd fb12 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329c:	2000      	movs	r0, #0
 800329e:	f7fd fb0f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fd fb0c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7fd fb09 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7fd fb06 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80032b4:	20f0      	movs	r0, #240	; 0xf0
 80032b6:	f7fd fadf 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fd fb00 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80032c0:	2050      	movs	r0, #80	; 0x50
 80032c2:	f7fd fafd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7fd fafa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fd faf7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fd faf4 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80032d8:	20f3      	movs	r0, #243	; 0xf3
 80032da:	f7fd facd 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd faee 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80032e4:	20f9      	movs	r0, #249	; 0xf9
 80032e6:	f7fd fac7 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80032ea:	2006      	movs	r0, #6
 80032ec:	f7fd fae8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80032f0:	2010      	movs	r0, #16
 80032f2:	f7fd fae5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80032f6:	2029      	movs	r0, #41	; 0x29
 80032f8:	f7fd fae2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd fadf 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003302:	203a      	movs	r0, #58	; 0x3a
 8003304:	f7fd fab8 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003308:	2055      	movs	r0, #85	; 0x55
 800330a:	f7fd fad9 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800330e:	2011      	movs	r0, #17
 8003310:	f7fd fab2 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(100);
 8003314:	2064      	movs	r0, #100	; 0x64
 8003316:	f003 f877 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0x29);
 800331a:	2029      	movs	r0, #41	; 0x29
 800331c:	f7fd faac 	bl	8000878 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003320:	2035      	movs	r0, #53	; 0x35
 8003322:	f7fd faa9 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd faca 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800332c:	2051      	movs	r0, #81	; 0x51
 800332e:	f7fd faa3 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003332:	20ff      	movs	r0, #255	; 0xff
 8003334:	f7fd fac4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003338:	2053      	movs	r0, #83	; 0x53
 800333a:	f7fd fa9d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800333e:	202c      	movs	r0, #44	; 0x2c
 8003340:	f7fd fabe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003344:	2055      	movs	r0, #85	; 0x55
 8003346:	f7fd fa97 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800334a:	2082      	movs	r0, #130	; 0x82
 800334c:	f7fd fab8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003350:	202c      	movs	r0, #44	; 0x2c
 8003352:	f7fd fa91 	bl	8000878 <LCD_WR_REG>
 8003356:	f002 bca1 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <LCD_Init+0x1504>)
 800335c:	889b      	ldrh	r3, [r3, #4]
 800335e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003362:	4293      	cmp	r3, r2
 8003364:	f040 8782 	bne.w	800426c <LCD_Init+0x2404>
 8003368:	e002      	b.n	8003370 <LCD_Init+0x1508>
 800336a:	bf00      	nop
 800336c:	20000080 	.word	0x20000080
		LCD_WriteReg(0xF000, 0x55);
 8003370:	2155      	movs	r1, #85	; 0x55
 8003372:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003376:	f7fd fb0b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800337a:	21aa      	movs	r1, #170	; 0xaa
 800337c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003380:	f7fd fb06 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003384:	2152      	movs	r1, #82	; 0x52
 8003386:	f24f 0002 	movw	r0, #61442	; 0xf002
 800338a:	f7fd fb01 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800338e:	2108      	movs	r1, #8
 8003390:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003394:	f7fd fafc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003398:	2101      	movs	r1, #1
 800339a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800339e:	f7fd faf7 	bl	8000990 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80033a2:	210d      	movs	r1, #13
 80033a4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80033a8:	f7fd faf2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80033ac:	210d      	movs	r1, #13
 80033ae:	f24b 0001 	movw	r0, #45057	; 0xb001
 80033b2:	f7fd faed 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80033b6:	210d      	movs	r1, #13
 80033b8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80033bc:	f7fd fae8 	bl	8000990 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80033c0:	2134      	movs	r1, #52	; 0x34
 80033c2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80033c6:	f7fd fae3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80033ca:	2134      	movs	r1, #52	; 0x34
 80033cc:	f24b 6001 	movw	r0, #46593	; 0xb601
 80033d0:	f7fd fade 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80033d4:	2134      	movs	r1, #52	; 0x34
 80033d6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80033da:	f7fd fad9 	bl	8000990 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80033de:	210d      	movs	r1, #13
 80033e0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80033e4:	f7fd fad4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80033e8:	210d      	movs	r1, #13
 80033ea:	f24b 1001 	movw	r0, #45313	; 0xb101
 80033ee:	f7fd facf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80033f2:	210d      	movs	r1, #13
 80033f4:	f24b 1002 	movw	r0, #45314	; 0xb102
 80033f8:	f7fd faca 	bl	8000990 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80033fc:	2134      	movs	r1, #52	; 0x34
 80033fe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003402:	f7fd fac5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003406:	2134      	movs	r1, #52	; 0x34
 8003408:	f24b 7001 	movw	r0, #46849	; 0xb701
 800340c:	f7fd fac0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003410:	2134      	movs	r1, #52	; 0x34
 8003412:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003416:	f7fd fabb 	bl	8000990 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800341a:	2100      	movs	r1, #0
 800341c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003420:	f7fd fab6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003424:	2100      	movs	r1, #0
 8003426:	f24b 2001 	movw	r0, #45569	; 0xb201
 800342a:	f7fd fab1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800342e:	2100      	movs	r1, #0
 8003430:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003434:	f7fd faac 	bl	8000990 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003438:	2124      	movs	r1, #36	; 0x24
 800343a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800343e:	f7fd faa7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003442:	2124      	movs	r1, #36	; 0x24
 8003444:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003448:	f7fd faa2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800344c:	2124      	movs	r1, #36	; 0x24
 800344e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003452:	f7fd fa9d 	bl	8000990 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003456:	2101      	movs	r1, #1
 8003458:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800345c:	f7fd fa98 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003460:	210f      	movs	r1, #15
 8003462:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003466:	f7fd fa93 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800346a:	210f      	movs	r1, #15
 800346c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003470:	f7fd fa8e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003474:	210f      	movs	r1, #15
 8003476:	f24b 3002 	movw	r0, #45826	; 0xb302
 800347a:	f7fd fa89 	bl	8000990 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800347e:	2134      	movs	r1, #52	; 0x34
 8003480:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003484:	f7fd fa84 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003488:	2134      	movs	r1, #52	; 0x34
 800348a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800348e:	f7fd fa7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003492:	2134      	movs	r1, #52	; 0x34
 8003494:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003498:	f7fd fa7a 	bl	8000990 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800349c:	2108      	movs	r1, #8
 800349e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80034a2:	f7fd fa75 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80034a6:	2108      	movs	r1, #8
 80034a8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80034ac:	f7fd fa70 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80034b0:	2108      	movs	r1, #8
 80034b2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80034b6:	f7fd fa6b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80034ba:	2103      	movs	r1, #3
 80034bc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80034c0:	f7fd fa66 	bl	8000990 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80034c4:	2124      	movs	r1, #36	; 0x24
 80034c6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80034ca:	f7fd fa61 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80034ce:	2124      	movs	r1, #36	; 0x24
 80034d0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80034d4:	f7fd fa5c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80034d8:	2124      	movs	r1, #36	; 0x24
 80034da:	f64b 2002 	movw	r0, #47618	; 0xba02
 80034de:	f7fd fa57 	bl	8000990 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80034e2:	2100      	movs	r1, #0
 80034e4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80034e8:	f7fd fa52 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80034ec:	2178      	movs	r1, #120	; 0x78
 80034ee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80034f2:	f7fd fa4d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80034f6:	2100      	movs	r1, #0
 80034f8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80034fc:	f7fd fa48 	bl	8000990 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003500:	2100      	movs	r1, #0
 8003502:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003506:	f7fd fa43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800350a:	2178      	movs	r1, #120	; 0x78
 800350c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003510:	f7fd fa3e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003514:	2100      	movs	r1, #0
 8003516:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800351a:	f7fd fa39 	bl	8000990 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800351e:	2100      	movs	r1, #0
 8003520:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003524:	f7fd fa34 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003528:	2164      	movs	r1, #100	; 0x64
 800352a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800352e:	f7fd fa2f 	bl	8000990 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003532:	2100      	movs	r1, #0
 8003534:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003538:	f7fd fa2a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800353c:	2133      	movs	r1, #51	; 0x33
 800353e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003542:	f7fd fa25 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003546:	2100      	movs	r1, #0
 8003548:	f24d 1002 	movw	r0, #53506	; 0xd102
 800354c:	f7fd fa20 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003550:	2134      	movs	r1, #52	; 0x34
 8003552:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003556:	f7fd fa1b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800355a:	2100      	movs	r1, #0
 800355c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003560:	f7fd fa16 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003564:	213a      	movs	r1, #58	; 0x3a
 8003566:	f24d 1005 	movw	r0, #53509	; 0xd105
 800356a:	f7fd fa11 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800356e:	2100      	movs	r1, #0
 8003570:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003574:	f7fd fa0c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003578:	214a      	movs	r1, #74	; 0x4a
 800357a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800357e:	f7fd fa07 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003582:	2100      	movs	r1, #0
 8003584:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003588:	f7fd fa02 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800358c:	215c      	movs	r1, #92	; 0x5c
 800358e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003592:	f7fd f9fd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003596:	2100      	movs	r1, #0
 8003598:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800359c:	f7fd f9f8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80035a0:	2181      	movs	r1, #129	; 0x81
 80035a2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80035a6:	f7fd f9f3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80035aa:	2100      	movs	r1, #0
 80035ac:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80035b0:	f7fd f9ee 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80035b4:	21a6      	movs	r1, #166	; 0xa6
 80035b6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80035ba:	f7fd f9e9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80035be:	2100      	movs	r1, #0
 80035c0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80035c4:	f7fd f9e4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80035c8:	21e5      	movs	r1, #229	; 0xe5
 80035ca:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80035ce:	f7fd f9df 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80035d2:	2101      	movs	r1, #1
 80035d4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80035d8:	f7fd f9da 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80035dc:	2113      	movs	r1, #19
 80035de:	f24d 1011 	movw	r0, #53521	; 0xd111
 80035e2:	f7fd f9d5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80035e6:	2101      	movs	r1, #1
 80035e8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80035ec:	f7fd f9d0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80035f0:	2154      	movs	r1, #84	; 0x54
 80035f2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80035f6:	f7fd f9cb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80035fa:	2101      	movs	r1, #1
 80035fc:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003600:	f7fd f9c6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003604:	2182      	movs	r1, #130	; 0x82
 8003606:	f24d 1015 	movw	r0, #53525	; 0xd115
 800360a:	f7fd f9c1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800360e:	2101      	movs	r1, #1
 8003610:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003614:	f7fd f9bc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003618:	21ca      	movs	r1, #202	; 0xca
 800361a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800361e:	f7fd f9b7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003622:	2102      	movs	r1, #2
 8003624:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003628:	f7fd f9b2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800362c:	2100      	movs	r1, #0
 800362e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003632:	f7fd f9ad 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003636:	2102      	movs	r1, #2
 8003638:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800363c:	f7fd f9a8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003640:	2101      	movs	r1, #1
 8003642:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003646:	f7fd f9a3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800364a:	2102      	movs	r1, #2
 800364c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003650:	f7fd f99e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003654:	2134      	movs	r1, #52	; 0x34
 8003656:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800365a:	f7fd f999 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800365e:	2102      	movs	r1, #2
 8003660:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003664:	f7fd f994 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003668:	2167      	movs	r1, #103	; 0x67
 800366a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800366e:	f7fd f98f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003672:	2102      	movs	r1, #2
 8003674:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003678:	f7fd f98a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800367c:	2184      	movs	r1, #132	; 0x84
 800367e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003682:	f7fd f985 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003686:	2102      	movs	r1, #2
 8003688:	f24d 1022 	movw	r0, #53538	; 0xd122
 800368c:	f7fd f980 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003690:	21a4      	movs	r1, #164	; 0xa4
 8003692:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003696:	f7fd f97b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800369a:	2102      	movs	r1, #2
 800369c:	f24d 1024 	movw	r0, #53540	; 0xd124
 80036a0:	f7fd f976 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80036a4:	21b7      	movs	r1, #183	; 0xb7
 80036a6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80036aa:	f7fd f971 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80036ae:	2102      	movs	r1, #2
 80036b0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80036b4:	f7fd f96c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80036b8:	21cf      	movs	r1, #207	; 0xcf
 80036ba:	f24d 1027 	movw	r0, #53543	; 0xd127
 80036be:	f7fd f967 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80036c2:	2102      	movs	r1, #2
 80036c4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80036c8:	f7fd f962 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80036cc:	21de      	movs	r1, #222	; 0xde
 80036ce:	f24d 1029 	movw	r0, #53545	; 0xd129
 80036d2:	f7fd f95d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80036d6:	2102      	movs	r1, #2
 80036d8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80036dc:	f7fd f958 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80036e0:	21f2      	movs	r1, #242	; 0xf2
 80036e2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80036e6:	f7fd f953 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80036ea:	2102      	movs	r1, #2
 80036ec:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80036f0:	f7fd f94e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80036f4:	21fe      	movs	r1, #254	; 0xfe
 80036f6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80036fa:	f7fd f949 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80036fe:	2103      	movs	r1, #3
 8003700:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003704:	f7fd f944 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003708:	2110      	movs	r1, #16
 800370a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800370e:	f7fd f93f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003712:	2103      	movs	r1, #3
 8003714:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003718:	f7fd f93a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800371c:	2133      	movs	r1, #51	; 0x33
 800371e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003722:	f7fd f935 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003726:	2103      	movs	r1, #3
 8003728:	f24d 1032 	movw	r0, #53554	; 0xd132
 800372c:	f7fd f930 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003730:	216d      	movs	r1, #109	; 0x6d
 8003732:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003736:	f7fd f92b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800373a:	2100      	movs	r1, #0
 800373c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003740:	f7fd f926 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003744:	2133      	movs	r1, #51	; 0x33
 8003746:	f24d 2001 	movw	r0, #53761	; 0xd201
 800374a:	f7fd f921 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800374e:	2100      	movs	r1, #0
 8003750:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003754:	f7fd f91c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003758:	2134      	movs	r1, #52	; 0x34
 800375a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800375e:	f7fd f917 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003762:	2100      	movs	r1, #0
 8003764:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003768:	f7fd f912 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800376c:	213a      	movs	r1, #58	; 0x3a
 800376e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003772:	f7fd f90d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003776:	2100      	movs	r1, #0
 8003778:	f24d 2006 	movw	r0, #53766	; 0xd206
 800377c:	f7fd f908 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003780:	214a      	movs	r1, #74	; 0x4a
 8003782:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003786:	f7fd f903 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800378a:	2100      	movs	r1, #0
 800378c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003790:	f7fd f8fe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003794:	215c      	movs	r1, #92	; 0x5c
 8003796:	f24d 2009 	movw	r0, #53769	; 0xd209
 800379a:	f7fd f8f9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800379e:	2100      	movs	r1, #0
 80037a0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80037a4:	f7fd f8f4 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80037a8:	2181      	movs	r1, #129	; 0x81
 80037aa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80037ae:	f7fd f8ef 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80037b2:	2100      	movs	r1, #0
 80037b4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80037b8:	f7fd f8ea 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80037bc:	21a6      	movs	r1, #166	; 0xa6
 80037be:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80037c2:	f7fd f8e5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80037c6:	2100      	movs	r1, #0
 80037c8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80037cc:	f7fd f8e0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80037d0:	21e5      	movs	r1, #229	; 0xe5
 80037d2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80037d6:	f7fd f8db 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80037da:	2101      	movs	r1, #1
 80037dc:	f24d 2010 	movw	r0, #53776	; 0xd210
 80037e0:	f7fd f8d6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80037e4:	2113      	movs	r1, #19
 80037e6:	f24d 2011 	movw	r0, #53777	; 0xd211
 80037ea:	f7fd f8d1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80037ee:	2101      	movs	r1, #1
 80037f0:	f24d 2012 	movw	r0, #53778	; 0xd212
 80037f4:	f7fd f8cc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80037f8:	2154      	movs	r1, #84	; 0x54
 80037fa:	f24d 2013 	movw	r0, #53779	; 0xd213
 80037fe:	f7fd f8c7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003802:	2101      	movs	r1, #1
 8003804:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003808:	f7fd f8c2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800380c:	2182      	movs	r1, #130	; 0x82
 800380e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003812:	f7fd f8bd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003816:	2101      	movs	r1, #1
 8003818:	f24d 2016 	movw	r0, #53782	; 0xd216
 800381c:	f7fd f8b8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003820:	21ca      	movs	r1, #202	; 0xca
 8003822:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003826:	f7fd f8b3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800382a:	2102      	movs	r1, #2
 800382c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003830:	f7fd f8ae 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003834:	2100      	movs	r1, #0
 8003836:	f24d 2019 	movw	r0, #53785	; 0xd219
 800383a:	f7fd f8a9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800383e:	2102      	movs	r1, #2
 8003840:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003844:	f7fd f8a4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003848:	2101      	movs	r1, #1
 800384a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800384e:	f7fd f89f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003852:	2102      	movs	r1, #2
 8003854:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003858:	f7fd f89a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800385c:	2134      	movs	r1, #52	; 0x34
 800385e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003862:	f7fd f895 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003866:	2102      	movs	r1, #2
 8003868:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800386c:	f7fd f890 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003870:	2167      	movs	r1, #103	; 0x67
 8003872:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003876:	f7fd f88b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800387a:	2102      	movs	r1, #2
 800387c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003880:	f7fd f886 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003884:	2184      	movs	r1, #132	; 0x84
 8003886:	f24d 2021 	movw	r0, #53793	; 0xd221
 800388a:	f7fd f881 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800388e:	2102      	movs	r1, #2
 8003890:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003894:	f7fd f87c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003898:	21a4      	movs	r1, #164	; 0xa4
 800389a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800389e:	f7fd f877 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80038a2:	2102      	movs	r1, #2
 80038a4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80038a8:	f7fd f872 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80038ac:	21b7      	movs	r1, #183	; 0xb7
 80038ae:	f24d 2025 	movw	r0, #53797	; 0xd225
 80038b2:	f7fd f86d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80038b6:	2102      	movs	r1, #2
 80038b8:	f24d 2026 	movw	r0, #53798	; 0xd226
 80038bc:	f7fd f868 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80038c0:	21cf      	movs	r1, #207	; 0xcf
 80038c2:	f24d 2027 	movw	r0, #53799	; 0xd227
 80038c6:	f7fd f863 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80038ca:	2102      	movs	r1, #2
 80038cc:	f24d 2028 	movw	r0, #53800	; 0xd228
 80038d0:	f7fd f85e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80038d4:	21de      	movs	r1, #222	; 0xde
 80038d6:	f24d 2029 	movw	r0, #53801	; 0xd229
 80038da:	f7fd f859 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80038de:	2102      	movs	r1, #2
 80038e0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80038e4:	f7fd f854 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80038e8:	21f2      	movs	r1, #242	; 0xf2
 80038ea:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80038ee:	f7fd f84f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80038f2:	2102      	movs	r1, #2
 80038f4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80038f8:	f7fd f84a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80038fc:	21fe      	movs	r1, #254	; 0xfe
 80038fe:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003902:	f7fd f845 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003906:	2103      	movs	r1, #3
 8003908:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800390c:	f7fd f840 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003910:	2110      	movs	r1, #16
 8003912:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003916:	f7fd f83b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800391a:	2103      	movs	r1, #3
 800391c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003920:	f7fd f836 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003924:	2133      	movs	r1, #51	; 0x33
 8003926:	f24d 2031 	movw	r0, #53809	; 0xd231
 800392a:	f7fd f831 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800392e:	2103      	movs	r1, #3
 8003930:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003934:	f7fd f82c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003938:	216d      	movs	r1, #109	; 0x6d
 800393a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800393e:	f7fd f827 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003942:	2100      	movs	r1, #0
 8003944:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003948:	f7fd f822 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800394c:	2133      	movs	r1, #51	; 0x33
 800394e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003952:	f7fd f81d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003956:	2100      	movs	r1, #0
 8003958:	f24d 3002 	movw	r0, #54018	; 0xd302
 800395c:	f7fd f818 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003960:	2134      	movs	r1, #52	; 0x34
 8003962:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003966:	f7fd f813 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 800396a:	2100      	movs	r1, #0
 800396c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003970:	f7fd f80e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003974:	213a      	movs	r1, #58	; 0x3a
 8003976:	f24d 3005 	movw	r0, #54021	; 0xd305
 800397a:	f7fd f809 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 800397e:	2100      	movs	r1, #0
 8003980:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003984:	f7fd f804 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003988:	214a      	movs	r1, #74	; 0x4a
 800398a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800398e:	f7fc ffff 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003992:	2100      	movs	r1, #0
 8003994:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003998:	f7fc fffa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800399c:	215c      	movs	r1, #92	; 0x5c
 800399e:	f24d 3009 	movw	r0, #54025	; 0xd309
 80039a2:	f7fc fff5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80039a6:	2100      	movs	r1, #0
 80039a8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80039ac:	f7fc fff0 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 80039b0:	2181      	movs	r1, #129	; 0x81
 80039b2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80039b6:	f7fc ffeb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 80039ba:	2100      	movs	r1, #0
 80039bc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80039c0:	f7fc ffe6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 80039c4:	21a6      	movs	r1, #166	; 0xa6
 80039c6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80039ca:	f7fc ffe1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 80039ce:	2100      	movs	r1, #0
 80039d0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80039d4:	f7fc ffdc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 80039d8:	21e5      	movs	r1, #229	; 0xe5
 80039da:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80039de:	f7fc ffd7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80039e2:	2101      	movs	r1, #1
 80039e4:	f24d 3010 	movw	r0, #54032	; 0xd310
 80039e8:	f7fc ffd2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80039ec:	2113      	movs	r1, #19
 80039ee:	f24d 3011 	movw	r0, #54033	; 0xd311
 80039f2:	f7fc ffcd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80039f6:	2101      	movs	r1, #1
 80039f8:	f24d 3012 	movw	r0, #54034	; 0xd312
 80039fc:	f7fc ffc8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003a00:	2154      	movs	r1, #84	; 0x54
 8003a02:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003a06:	f7fc ffc3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003a10:	f7fc ffbe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003a14:	2182      	movs	r1, #130	; 0x82
 8003a16:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003a1a:	f7fc ffb9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003a1e:	2101      	movs	r1, #1
 8003a20:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003a24:	f7fc ffb4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003a28:	21ca      	movs	r1, #202	; 0xca
 8003a2a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003a2e:	f7fc ffaf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003a32:	2102      	movs	r1, #2
 8003a34:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003a38:	f7fc ffaa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003a42:	f7fc ffa5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003a46:	2102      	movs	r1, #2
 8003a48:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003a4c:	f7fc ffa0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003a50:	2101      	movs	r1, #1
 8003a52:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003a56:	f7fc ff9b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003a60:	f7fc ff96 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003a64:	2134      	movs	r1, #52	; 0x34
 8003a66:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003a6a:	f7fc ff91 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003a6e:	2102      	movs	r1, #2
 8003a70:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003a74:	f7fc ff8c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003a78:	2167      	movs	r1, #103	; 0x67
 8003a7a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003a7e:	f7fc ff87 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003a82:	2102      	movs	r1, #2
 8003a84:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003a88:	f7fc ff82 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003a8c:	2184      	movs	r1, #132	; 0x84
 8003a8e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003a92:	f7fc ff7d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003a96:	2102      	movs	r1, #2
 8003a98:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003a9c:	f7fc ff78 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003aa0:	21a4      	movs	r1, #164	; 0xa4
 8003aa2:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003aa6:	f7fc ff73 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003aaa:	2102      	movs	r1, #2
 8003aac:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003ab0:	f7fc ff6e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003ab4:	21b7      	movs	r1, #183	; 0xb7
 8003ab6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003aba:	f7fc ff69 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003abe:	2102      	movs	r1, #2
 8003ac0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003ac4:	f7fc ff64 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003ac8:	21cf      	movs	r1, #207	; 0xcf
 8003aca:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003ace:	f7fc ff5f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003ad8:	f7fc ff5a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003adc:	21de      	movs	r1, #222	; 0xde
 8003ade:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003ae2:	f7fc ff55 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003aec:	f7fc ff50 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003af0:	21f2      	movs	r1, #242	; 0xf2
 8003af2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003af6:	f7fc ff4b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003afa:	2102      	movs	r1, #2
 8003afc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003b00:	f7fc ff46 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003b04:	21fe      	movs	r1, #254	; 0xfe
 8003b06:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003b0a:	f7fc ff41 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003b0e:	2103      	movs	r1, #3
 8003b10:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003b14:	f7fc ff3c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003b18:	2110      	movs	r1, #16
 8003b1a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003b1e:	f7fc ff37 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003b22:	2103      	movs	r1, #3
 8003b24:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003b28:	f7fc ff32 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003b2c:	2133      	movs	r1, #51	; 0x33
 8003b2e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003b32:	f7fc ff2d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003b36:	2103      	movs	r1, #3
 8003b38:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003b3c:	f7fc ff28 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003b40:	216d      	movs	r1, #109	; 0x6d
 8003b42:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003b46:	f7fc ff23 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003b50:	f7fc ff1e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003b54:	2133      	movs	r1, #51	; 0x33
 8003b56:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003b5a:	f7fc ff19 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003b64:	f7fc ff14 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003b68:	2134      	movs	r1, #52	; 0x34
 8003b6a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003b6e:	f7fc ff0f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003b72:	2100      	movs	r1, #0
 8003b74:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003b78:	f7fc ff0a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003b7c:	213a      	movs	r1, #58	; 0x3a
 8003b7e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003b82:	f7fc ff05 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003b86:	2100      	movs	r1, #0
 8003b88:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003b8c:	f7fc ff00 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003b90:	214a      	movs	r1, #74	; 0x4a
 8003b92:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003b96:	f7fc fefb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003ba0:	f7fc fef6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003ba4:	215c      	movs	r1, #92	; 0x5c
 8003ba6:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003baa:	f7fc fef1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003bae:	2100      	movs	r1, #0
 8003bb0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003bb4:	f7fc feec 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003bb8:	2181      	movs	r1, #129	; 0x81
 8003bba:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003bbe:	f7fc fee7 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003bc8:	f7fc fee2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003bcc:	21a6      	movs	r1, #166	; 0xa6
 8003bce:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003bd2:	f7fc fedd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003bdc:	f7fc fed8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003be0:	21e5      	movs	r1, #229	; 0xe5
 8003be2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003be6:	f7fc fed3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003bea:	2101      	movs	r1, #1
 8003bec:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003bf0:	f7fc fece 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003bf4:	2113      	movs	r1, #19
 8003bf6:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003bfa:	f7fc fec9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003c04:	f7fc fec4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003c08:	2154      	movs	r1, #84	; 0x54
 8003c0a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003c0e:	f7fc febf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003c12:	2101      	movs	r1, #1
 8003c14:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003c18:	f7fc feba 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003c1c:	2182      	movs	r1, #130	; 0x82
 8003c1e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003c22:	f7fc feb5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003c26:	2101      	movs	r1, #1
 8003c28:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003c2c:	f7fc feb0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003c30:	21ca      	movs	r1, #202	; 0xca
 8003c32:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003c36:	f7fc feab 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003c40:	f7fc fea6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003c44:	2100      	movs	r1, #0
 8003c46:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003c4a:	f7fc fea1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003c4e:	2102      	movs	r1, #2
 8003c50:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003c54:	f7fc fe9c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003c58:	2101      	movs	r1, #1
 8003c5a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003c5e:	f7fc fe97 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003c62:	2102      	movs	r1, #2
 8003c64:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003c68:	f7fc fe92 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003c6c:	2134      	movs	r1, #52	; 0x34
 8003c6e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003c72:	f7fc fe8d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003c76:	2102      	movs	r1, #2
 8003c78:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003c7c:	f7fc fe88 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003c80:	2167      	movs	r1, #103	; 0x67
 8003c82:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003c86:	f7fc fe83 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003c90:	f7fc fe7e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003c94:	2184      	movs	r1, #132	; 0x84
 8003c96:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003c9a:	f7fc fe79 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003ca4:	f7fc fe74 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003ca8:	21a4      	movs	r1, #164	; 0xa4
 8003caa:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003cae:	f7fc fe6f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003cb8:	f7fc fe6a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003cbc:	21b7      	movs	r1, #183	; 0xb7
 8003cbe:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003cc2:	f7fc fe65 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003ccc:	f7fc fe60 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003cd0:	21cf      	movs	r1, #207	; 0xcf
 8003cd2:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003cd6:	f7fc fe5b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003cda:	2102      	movs	r1, #2
 8003cdc:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003ce0:	f7fc fe56 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003ce4:	21de      	movs	r1, #222	; 0xde
 8003ce6:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003cea:	f7fc fe51 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003cee:	2102      	movs	r1, #2
 8003cf0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003cf4:	f7fc fe4c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003cf8:	21f2      	movs	r1, #242	; 0xf2
 8003cfa:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003cfe:	f7fc fe47 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003d02:	2102      	movs	r1, #2
 8003d04:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003d08:	f7fc fe42 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003d0c:	21fe      	movs	r1, #254	; 0xfe
 8003d0e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003d12:	f7fc fe3d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003d16:	2103      	movs	r1, #3
 8003d18:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003d1c:	f7fc fe38 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003d20:	2110      	movs	r1, #16
 8003d22:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003d26:	f7fc fe33 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003d30:	f7fc fe2e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003d34:	2133      	movs	r1, #51	; 0x33
 8003d36:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003d3a:	f7fc fe29 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003d3e:	2103      	movs	r1, #3
 8003d40:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003d44:	f7fc fe24 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003d48:	216d      	movs	r1, #109	; 0x6d
 8003d4a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003d4e:	f7fc fe1f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003d52:	2100      	movs	r1, #0
 8003d54:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003d58:	f7fc fe1a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003d5c:	2133      	movs	r1, #51	; 0x33
 8003d5e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003d62:	f7fc fe15 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003d66:	2100      	movs	r1, #0
 8003d68:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003d6c:	f7fc fe10 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003d70:	2134      	movs	r1, #52	; 0x34
 8003d72:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003d76:	f7fc fe0b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003d80:	f7fc fe06 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003d84:	213a      	movs	r1, #58	; 0x3a
 8003d86:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003d8a:	f7fc fe01 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003d8e:	2100      	movs	r1, #0
 8003d90:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003d94:	f7fc fdfc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003d98:	214a      	movs	r1, #74	; 0x4a
 8003d9a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003d9e:	f7fc fdf7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003da2:	2100      	movs	r1, #0
 8003da4:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003da8:	f7fc fdf2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003dac:	215c      	movs	r1, #92	; 0x5c
 8003dae:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003db2:	f7fc fded 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003db6:	2100      	movs	r1, #0
 8003db8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003dbc:	f7fc fde8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003dc0:	2181      	movs	r1, #129	; 0x81
 8003dc2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003dc6:	f7fc fde3 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003dd0:	f7fc fdde 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003dd4:	21a6      	movs	r1, #166	; 0xa6
 8003dd6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003dda:	f7fc fdd9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003dde:	2100      	movs	r1, #0
 8003de0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003de4:	f7fc fdd4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003de8:	21e5      	movs	r1, #229	; 0xe5
 8003dea:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003dee:	f7fc fdcf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003df2:	2101      	movs	r1, #1
 8003df4:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003df8:	f7fc fdca 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003dfc:	2113      	movs	r1, #19
 8003dfe:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003e02:	f7fc fdc5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003e06:	2101      	movs	r1, #1
 8003e08:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003e0c:	f7fc fdc0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003e10:	2154      	movs	r1, #84	; 0x54
 8003e12:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003e16:	f7fc fdbb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003e20:	f7fc fdb6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003e24:	2182      	movs	r1, #130	; 0x82
 8003e26:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003e2a:	f7fc fdb1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003e2e:	2101      	movs	r1, #1
 8003e30:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003e34:	f7fc fdac 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003e38:	21ca      	movs	r1, #202	; 0xca
 8003e3a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003e3e:	f7fc fda7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003e42:	2102      	movs	r1, #2
 8003e44:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003e48:	f7fc fda2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003e52:	f7fc fd9d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003e56:	2102      	movs	r1, #2
 8003e58:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003e5c:	f7fc fd98 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003e60:	2101      	movs	r1, #1
 8003e62:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003e66:	f7fc fd93 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003e70:	f7fc fd8e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003e74:	2134      	movs	r1, #52	; 0x34
 8003e76:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003e7a:	f7fc fd89 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003e7e:	2102      	movs	r1, #2
 8003e80:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003e84:	f7fc fd84 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003e88:	2167      	movs	r1, #103	; 0x67
 8003e8a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003e8e:	f7fc fd7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003e92:	2102      	movs	r1, #2
 8003e94:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003e98:	f7fc fd7a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003e9c:	2184      	movs	r1, #132	; 0x84
 8003e9e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003ea2:	f7fc fd75 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003eac:	f7fc fd70 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003eb0:	21a4      	movs	r1, #164	; 0xa4
 8003eb2:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003eb6:	f7fc fd6b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003eba:	2102      	movs	r1, #2
 8003ebc:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003ec0:	f7fc fd66 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003ec4:	21b7      	movs	r1, #183	; 0xb7
 8003ec6:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003eca:	f7fc fd61 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003ece:	2102      	movs	r1, #2
 8003ed0:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003ed4:	f7fc fd5c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003ed8:	21cf      	movs	r1, #207	; 0xcf
 8003eda:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003ede:	f7fc fd57 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003ee8:	f7fc fd52 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003eec:	21de      	movs	r1, #222	; 0xde
 8003eee:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003ef2:	f7fc fd4d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003efc:	f7fc fd48 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003f00:	21f2      	movs	r1, #242	; 0xf2
 8003f02:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003f06:	f7fc fd43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003f10:	f7fc fd3e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003f14:	21fe      	movs	r1, #254	; 0xfe
 8003f16:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003f1a:	f7fc fd39 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003f1e:	2103      	movs	r1, #3
 8003f20:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003f24:	f7fc fd34 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003f28:	2110      	movs	r1, #16
 8003f2a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003f2e:	f7fc fd2f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003f32:	2103      	movs	r1, #3
 8003f34:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003f38:	f7fc fd2a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003f3c:	2133      	movs	r1, #51	; 0x33
 8003f3e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003f42:	f7fc fd25 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003f46:	2103      	movs	r1, #3
 8003f48:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003f4c:	f7fc fd20 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003f50:	216d      	movs	r1, #109	; 0x6d
 8003f52:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003f56:	f7fc fd1b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003f60:	f7fc fd16 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003f64:	2133      	movs	r1, #51	; 0x33
 8003f66:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003f6a:	f7fc fd11 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003f74:	f7fc fd0c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003f78:	2134      	movs	r1, #52	; 0x34
 8003f7a:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003f7e:	f7fc fd07 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003f82:	2100      	movs	r1, #0
 8003f84:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003f88:	f7fc fd02 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003f8c:	213a      	movs	r1, #58	; 0x3a
 8003f8e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003f92:	f7fc fcfd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003f96:	2100      	movs	r1, #0
 8003f98:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003f9c:	f7fc fcf8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003fa0:	214a      	movs	r1, #74	; 0x4a
 8003fa2:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003fa6:	f7fc fcf3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003faa:	2100      	movs	r1, #0
 8003fac:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003fb0:	f7fc fcee 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003fb4:	215c      	movs	r1, #92	; 0x5c
 8003fb6:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003fba:	f7fc fce9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003fc4:	f7fc fce4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003fc8:	2181      	movs	r1, #129	; 0x81
 8003fca:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003fce:	f7fc fcdf 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003fd8:	f7fc fcda 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003fdc:	21a6      	movs	r1, #166	; 0xa6
 8003fde:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003fe2:	f7fc fcd5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003fec:	f7fc fcd0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003ff0:	21e5      	movs	r1, #229	; 0xe5
 8003ff2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003ff6:	f7fc fccb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004000:	f7fc fcc6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004004:	2113      	movs	r1, #19
 8004006:	f24d 6011 	movw	r0, #54801	; 0xd611
 800400a:	f7fc fcc1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800400e:	2101      	movs	r1, #1
 8004010:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004014:	f7fc fcbc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004018:	2154      	movs	r1, #84	; 0x54
 800401a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800401e:	f7fc fcb7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004022:	2101      	movs	r1, #1
 8004024:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004028:	f7fc fcb2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800402c:	2182      	movs	r1, #130	; 0x82
 800402e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004032:	f7fc fcad 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004036:	2101      	movs	r1, #1
 8004038:	f24d 6016 	movw	r0, #54806	; 0xd616
 800403c:	f7fc fca8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004040:	21ca      	movs	r1, #202	; 0xca
 8004042:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004046:	f7fc fca3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800404a:	2102      	movs	r1, #2
 800404c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004050:	f7fc fc9e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004054:	2100      	movs	r1, #0
 8004056:	f24d 6019 	movw	r0, #54809	; 0xd619
 800405a:	f7fc fc99 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800405e:	2102      	movs	r1, #2
 8004060:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004064:	f7fc fc94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004068:	2101      	movs	r1, #1
 800406a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800406e:	f7fc fc8f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004072:	2102      	movs	r1, #2
 8004074:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004078:	f7fc fc8a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800407c:	2134      	movs	r1, #52	; 0x34
 800407e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004082:	f7fc fc85 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004086:	2102      	movs	r1, #2
 8004088:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800408c:	f7fc fc80 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004090:	2167      	movs	r1, #103	; 0x67
 8004092:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004096:	f7fc fc7b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800409a:	2102      	movs	r1, #2
 800409c:	f24d 6020 	movw	r0, #54816	; 0xd620
 80040a0:	f7fc fc76 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80040a4:	2184      	movs	r1, #132	; 0x84
 80040a6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80040aa:	f7fc fc71 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80040ae:	2102      	movs	r1, #2
 80040b0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80040b4:	f7fc fc6c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80040b8:	21a4      	movs	r1, #164	; 0xa4
 80040ba:	f24d 6023 	movw	r0, #54819	; 0xd623
 80040be:	f7fc fc67 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80040c2:	2102      	movs	r1, #2
 80040c4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80040c8:	f7fc fc62 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80040cc:	21b7      	movs	r1, #183	; 0xb7
 80040ce:	f24d 6025 	movw	r0, #54821	; 0xd625
 80040d2:	f7fc fc5d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80040d6:	2102      	movs	r1, #2
 80040d8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80040dc:	f7fc fc58 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80040e0:	21cf      	movs	r1, #207	; 0xcf
 80040e2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80040e6:	f7fc fc53 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80040ea:	2102      	movs	r1, #2
 80040ec:	f24d 6028 	movw	r0, #54824	; 0xd628
 80040f0:	f7fc fc4e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80040f4:	21de      	movs	r1, #222	; 0xde
 80040f6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80040fa:	f7fc fc49 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80040fe:	2102      	movs	r1, #2
 8004100:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004104:	f7fc fc44 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004108:	21f2      	movs	r1, #242	; 0xf2
 800410a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800410e:	f7fc fc3f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004112:	2102      	movs	r1, #2
 8004114:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004118:	f7fc fc3a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800411c:	21fe      	movs	r1, #254	; 0xfe
 800411e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004122:	f7fc fc35 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004126:	2103      	movs	r1, #3
 8004128:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800412c:	f7fc fc30 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004130:	2110      	movs	r1, #16
 8004132:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004136:	f7fc fc2b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800413a:	2103      	movs	r1, #3
 800413c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004140:	f7fc fc26 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004144:	2133      	movs	r1, #51	; 0x33
 8004146:	f24d 6031 	movw	r0, #54833	; 0xd631
 800414a:	f7fc fc21 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800414e:	2103      	movs	r1, #3
 8004150:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004154:	f7fc fc1c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004158:	216d      	movs	r1, #109	; 0x6d
 800415a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800415e:	f7fc fc17 	bl	8000990 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004162:	2155      	movs	r1, #85	; 0x55
 8004164:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004168:	f7fc fc12 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800416c:	21aa      	movs	r1, #170	; 0xaa
 800416e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004172:	f7fc fc0d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004176:	2152      	movs	r1, #82	; 0x52
 8004178:	f24f 0002 	movw	r0, #61442	; 0xf002
 800417c:	f7fc fc08 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004180:	2108      	movs	r1, #8
 8004182:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004186:	f7fc fc03 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800418a:	2100      	movs	r1, #0
 800418c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004190:	f7fc fbfe 	bl	8000990 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004194:	21cc      	movs	r1, #204	; 0xcc
 8004196:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800419a:	f7fc fbf9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800419e:	2100      	movs	r1, #0
 80041a0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80041a4:	f7fc fbf4 	bl	8000990 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80041a8:	2105      	movs	r1, #5
 80041aa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80041ae:	f7fc fbef 	bl	8000990 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80041b2:	2170      	movs	r1, #112	; 0x70
 80041b4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80041b8:	f7fc fbea 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80041bc:	2170      	movs	r1, #112	; 0x70
 80041be:	f24b 7001 	movw	r0, #46849	; 0xb701
 80041c2:	f7fc fbe5 	bl	8000990 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80041c6:	2101      	movs	r1, #1
 80041c8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80041cc:	f7fc fbe0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80041d0:	2103      	movs	r1, #3
 80041d2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80041d6:	f7fc fbdb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80041da:	2103      	movs	r1, #3
 80041dc:	f64b 0002 	movw	r0, #47106	; 0xb802
 80041e0:	f7fc fbd6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80041e4:	2103      	movs	r1, #3
 80041e6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80041ea:	f7fc fbd1 	bl	8000990 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80041ee:	2102      	movs	r1, #2
 80041f0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80041f4:	f7fc fbcc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80041f8:	2100      	movs	r1, #0
 80041fa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80041fe:	f7fc fbc7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004202:	2100      	movs	r1, #0
 8004204:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004208:	f7fc fbc2 	bl	8000990 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800420c:	21d0      	movs	r1, #208	; 0xd0
 800420e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004212:	f7fc fbbd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004216:	2102      	movs	r1, #2
 8004218:	f64c 1001 	movw	r0, #51457	; 0xc901
 800421c:	f7fc fbb8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004220:	2150      	movs	r1, #80	; 0x50
 8004222:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004226:	f7fc fbb3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800422a:	2150      	movs	r1, #80	; 0x50
 800422c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004230:	f7fc fbae 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004234:	2150      	movs	r1, #80	; 0x50
 8004236:	f64c 1004 	movw	r0, #51460	; 0xc904
 800423a:	f7fc fba9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800423e:	2100      	movs	r1, #0
 8004240:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004244:	f7fc fba4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004248:	2155      	movs	r1, #85	; 0x55
 800424a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800424e:	f7fc fb9f 	bl	8000990 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004252:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004256:	f7fc fb0f 	bl	8000878 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800425a:	2001      	movs	r0, #1
 800425c:	f002 f8d4 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004260:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004264:	f7fc fb08 	bl	8000878 <LCD_WR_REG>
 8004268:	f001 bd18 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800426c:	4bec      	ldr	r3, [pc, #944]	; (8004620 <LCD_Init+0x27b8>)
 800426e:	889b      	ldrh	r3, [r3, #4]
 8004270:	f249 3225 	movw	r2, #37669	; 0x9325
 8004274:	4293      	cmp	r3, r2
 8004276:	f040 80d7 	bne.w	8004428 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800427a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800427e:	20e5      	movs	r0, #229	; 0xe5
 8004280:	f7fc fb86 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004288:	2001      	movs	r0, #1
 800428a:	f7fc fb81 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800428e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004292:	2002      	movs	r0, #2
 8004294:	f7fc fb7c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004298:	f241 0130 	movw	r1, #4144	; 0x1030
 800429c:	2003      	movs	r0, #3
 800429e:	f7fc fb77 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80042a2:	2100      	movs	r1, #0
 80042a4:	2004      	movs	r0, #4
 80042a6:	f7fc fb73 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80042aa:	f240 2102 	movw	r1, #514	; 0x202
 80042ae:	2008      	movs	r0, #8
 80042b0:	f7fc fb6e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80042b4:	2100      	movs	r1, #0
 80042b6:	2009      	movs	r0, #9
 80042b8:	f7fc fb6a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80042bc:	2100      	movs	r1, #0
 80042be:	200a      	movs	r0, #10
 80042c0:	f7fc fb66 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80042c4:	2100      	movs	r1, #0
 80042c6:	200c      	movs	r0, #12
 80042c8:	f7fc fb62 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80042cc:	2100      	movs	r1, #0
 80042ce:	200d      	movs	r0, #13
 80042d0:	f7fc fb5e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80042d4:	2100      	movs	r1, #0
 80042d6:	200f      	movs	r0, #15
 80042d8:	f7fc fb5a 	bl	8000990 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80042dc:	2100      	movs	r1, #0
 80042de:	2010      	movs	r0, #16
 80042e0:	f7fc fb56 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80042e4:	2107      	movs	r1, #7
 80042e6:	2011      	movs	r0, #17
 80042e8:	f7fc fb52 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80042ec:	2100      	movs	r1, #0
 80042ee:	2012      	movs	r0, #18
 80042f0:	f7fc fb4e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80042f4:	2100      	movs	r1, #0
 80042f6:	2013      	movs	r0, #19
 80042f8:	f7fc fb4a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80042fc:	2100      	movs	r1, #0
 80042fe:	2007      	movs	r0, #7
 8004300:	f7fc fb46 	bl	8000990 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004304:	f241 6190 	movw	r1, #5776	; 0x1690
 8004308:	2010      	movs	r0, #16
 800430a:	f7fc fb41 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800430e:	f240 2127 	movw	r1, #551	; 0x227
 8004312:	2011      	movs	r0, #17
 8004314:	f7fc fb3c 	bl	8000990 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004318:	219d      	movs	r1, #157	; 0x9d
 800431a:	2012      	movs	r0, #18
 800431c:	f7fc fb38 	bl	8000990 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004320:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004324:	2013      	movs	r0, #19
 8004326:	f7fc fb33 	bl	8000990 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800432a:	2125      	movs	r1, #37	; 0x25
 800432c:	2029      	movs	r0, #41	; 0x29
 800432e:	f7fc fb2f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004332:	210d      	movs	r1, #13
 8004334:	202b      	movs	r0, #43	; 0x2b
 8004336:	f7fc fb2b 	bl	8000990 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800433a:	2107      	movs	r1, #7
 800433c:	2030      	movs	r0, #48	; 0x30
 800433e:	f7fc fb27 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004342:	f240 3103 	movw	r1, #771	; 0x303
 8004346:	2031      	movs	r0, #49	; 0x31
 8004348:	f7fc fb22 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800434c:	2103      	movs	r1, #3
 800434e:	2032      	movs	r0, #50	; 0x32
 8004350:	f7fc fb1e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004354:	f240 2106 	movw	r1, #518	; 0x206
 8004358:	2035      	movs	r0, #53	; 0x35
 800435a:	f7fc fb19 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800435e:	2108      	movs	r1, #8
 8004360:	2036      	movs	r0, #54	; 0x36
 8004362:	f7fc fb15 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004366:	f240 4106 	movw	r1, #1030	; 0x406
 800436a:	2037      	movs	r0, #55	; 0x37
 800436c:	f7fc fb10 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004370:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004374:	2038      	movs	r0, #56	; 0x38
 8004376:	f7fc fb0b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800437a:	2107      	movs	r1, #7
 800437c:	2039      	movs	r0, #57	; 0x39
 800437e:	f7fc fb07 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004382:	f240 6102 	movw	r1, #1538	; 0x602
 8004386:	203c      	movs	r0, #60	; 0x3c
 8004388:	f7fc fb02 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800438c:	2108      	movs	r1, #8
 800438e:	203d      	movs	r0, #61	; 0x3d
 8004390:	f7fc fafe 	bl	8000990 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004394:	2100      	movs	r1, #0
 8004396:	2050      	movs	r0, #80	; 0x50
 8004398:	f7fc fafa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800439c:	21ef      	movs	r1, #239	; 0xef
 800439e:	2051      	movs	r0, #81	; 0x51
 80043a0:	f7fc faf6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80043a4:	2100      	movs	r1, #0
 80043a6:	2052      	movs	r0, #82	; 0x52
 80043a8:	f7fc faf2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80043ac:	f240 113f 	movw	r1, #319	; 0x13f
 80043b0:	2053      	movs	r0, #83	; 0x53
 80043b2:	f7fc faed 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80043b6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80043ba:	2060      	movs	r0, #96	; 0x60
 80043bc:	f7fc fae8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80043c0:	2101      	movs	r1, #1
 80043c2:	2061      	movs	r0, #97	; 0x61
 80043c4:	f7fc fae4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80043c8:	2100      	movs	r1, #0
 80043ca:	206a      	movs	r0, #106	; 0x6a
 80043cc:	f7fc fae0 	bl	8000990 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80043d0:	2100      	movs	r1, #0
 80043d2:	2080      	movs	r0, #128	; 0x80
 80043d4:	f7fc fadc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80043d8:	2100      	movs	r1, #0
 80043da:	2081      	movs	r0, #129	; 0x81
 80043dc:	f7fc fad8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80043e0:	2100      	movs	r1, #0
 80043e2:	2082      	movs	r0, #130	; 0x82
 80043e4:	f7fc fad4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80043e8:	2100      	movs	r1, #0
 80043ea:	2083      	movs	r0, #131	; 0x83
 80043ec:	f7fc fad0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80043f0:	2100      	movs	r1, #0
 80043f2:	2084      	movs	r0, #132	; 0x84
 80043f4:	f7fc facc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80043f8:	2100      	movs	r1, #0
 80043fa:	2085      	movs	r0, #133	; 0x85
 80043fc:	f7fc fac8 	bl	8000990 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004400:	2110      	movs	r1, #16
 8004402:	2090      	movs	r0, #144	; 0x90
 8004404:	f7fc fac4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004408:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800440c:	2092      	movs	r0, #146	; 0x92
 800440e:	f7fc fabf 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004412:	f240 1133 	movw	r1, #307	; 0x133
 8004416:	2007      	movs	r0, #7
 8004418:	f7fc faba 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800441c:	2122      	movs	r1, #34	; 0x22
 800441e:	2000      	movs	r0, #0
 8004420:	f7fc fab6 	bl	8000990 <LCD_WriteReg>
 8004424:	f001 bc3a 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004428:	4b7d      	ldr	r3, [pc, #500]	; (8004620 <LCD_Init+0x27b8>)
 800442a:	889b      	ldrh	r3, [r3, #4]
 800442c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004430:	4293      	cmp	r3, r2
 8004432:	f040 80f7 	bne.w	8004624 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004436:	f241 018f 	movw	r1, #4239	; 0x108f
 800443a:	20ec      	movs	r0, #236	; 0xec
 800443c:	f7fc faa8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004440:	f241 2134 	movw	r1, #4660	; 0x1234
 8004444:	20ef      	movs	r0, #239	; 0xef
 8004446:	f7fc faa3 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800444a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800444e:	2001      	movs	r0, #1
 8004450:	f7fc fa9e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004454:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004458:	2002      	movs	r0, #2
 800445a:	f7fc fa99 	bl	8000990 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800445e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004462:	2003      	movs	r0, #3
 8004464:	f7fc fa94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004468:	2100      	movs	r1, #0
 800446a:	2004      	movs	r0, #4
 800446c:	f7fc fa90 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004470:	f240 2102 	movw	r1, #514	; 0x202
 8004474:	2008      	movs	r0, #8
 8004476:	f7fc fa8b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800447a:	2100      	movs	r1, #0
 800447c:	2009      	movs	r0, #9
 800447e:	f7fc fa87 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004482:	2100      	movs	r1, #0
 8004484:	200a      	movs	r0, #10
 8004486:	f7fc fa83 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800448a:	2101      	movs	r1, #1
 800448c:	200c      	movs	r0, #12
 800448e:	f7fc fa7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004492:	2100      	movs	r1, #0
 8004494:	200d      	movs	r0, #13
 8004496:	f7fc fa7b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800449a:	2100      	movs	r1, #0
 800449c:	200f      	movs	r0, #15
 800449e:	f7fc fa77 	bl	8000990 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80044a2:	2100      	movs	r1, #0
 80044a4:	2010      	movs	r0, #16
 80044a6:	f7fc fa73 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80044aa:	2107      	movs	r1, #7
 80044ac:	2011      	movs	r0, #17
 80044ae:	f7fc fa6f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80044b2:	2100      	movs	r1, #0
 80044b4:	2012      	movs	r0, #18
 80044b6:	f7fc fa6b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80044ba:	2100      	movs	r1, #0
 80044bc:	2013      	movs	r0, #19
 80044be:	f7fc fa67 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80044c2:	2101      	movs	r1, #1
 80044c4:	2007      	movs	r0, #7
 80044c6:	f7fc fa63 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 80044ca:	2032      	movs	r0, #50	; 0x32
 80044cc:	f001 ff9c 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80044d0:	f241 4190 	movw	r1, #5264	; 0x1490
 80044d4:	2010      	movs	r0, #16
 80044d6:	f7fc fa5b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80044da:	f240 2127 	movw	r1, #551	; 0x227
 80044de:	2011      	movs	r0, #17
 80044e0:	f7fc fa56 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 80044e4:	2032      	movs	r0, #50	; 0x32
 80044e6:	f001 ff8f 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80044ea:	218a      	movs	r1, #138	; 0x8a
 80044ec:	2012      	movs	r0, #18
 80044ee:	f7fc fa4f 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 80044f2:	2032      	movs	r0, #50	; 0x32
 80044f4:	f001 ff88 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80044f8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80044fc:	2013      	movs	r0, #19
 80044fe:	f7fc fa47 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004502:	2106      	movs	r1, #6
 8004504:	2029      	movs	r0, #41	; 0x29
 8004506:	f7fc fa43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800450a:	210d      	movs	r1, #13
 800450c:	202b      	movs	r0, #43	; 0x2b
 800450e:	f7fc fa3f 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004512:	2032      	movs	r0, #50	; 0x32
 8004514:	f001 ff78 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004518:	2100      	movs	r1, #0
 800451a:	2020      	movs	r0, #32
 800451c:	f7fc fa38 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004520:	2100      	movs	r1, #0
 8004522:	2021      	movs	r0, #33	; 0x21
 8004524:	f7fc fa34 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004528:	2032      	movs	r0, #50	; 0x32
 800452a:	f001 ff6d 	bl	8006408 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800452e:	2100      	movs	r1, #0
 8004530:	2030      	movs	r0, #48	; 0x30
 8004532:	f7fc fa2d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004536:	f240 6104 	movw	r1, #1540	; 0x604
 800453a:	2031      	movs	r0, #49	; 0x31
 800453c:	f7fc fa28 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004540:	f240 3105 	movw	r1, #773	; 0x305
 8004544:	2032      	movs	r0, #50	; 0x32
 8004546:	f7fc fa23 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800454a:	2100      	movs	r1, #0
 800454c:	2035      	movs	r0, #53	; 0x35
 800454e:	f7fc fa1f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004552:	f640 4109 	movw	r1, #3081	; 0xc09
 8004556:	2036      	movs	r0, #54	; 0x36
 8004558:	f7fc fa1a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800455c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004560:	2037      	movs	r0, #55	; 0x37
 8004562:	f7fc fa15 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004566:	f240 3101 	movw	r1, #769	; 0x301
 800456a:	2038      	movs	r0, #56	; 0x38
 800456c:	f7fc fa10 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004570:	f240 7107 	movw	r1, #1799	; 0x707
 8004574:	2039      	movs	r0, #57	; 0x39
 8004576:	f7fc fa0b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800457a:	2100      	movs	r1, #0
 800457c:	203c      	movs	r0, #60	; 0x3c
 800457e:	f7fc fa07 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004582:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004586:	203d      	movs	r0, #61	; 0x3d
 8004588:	f7fc fa02 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 800458c:	2032      	movs	r0, #50	; 0x32
 800458e:	f001 ff3b 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004592:	2100      	movs	r1, #0
 8004594:	2050      	movs	r0, #80	; 0x50
 8004596:	f7fc f9fb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800459a:	21ef      	movs	r1, #239	; 0xef
 800459c:	2051      	movs	r0, #81	; 0x51
 800459e:	f7fc f9f7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80045a2:	2100      	movs	r1, #0
 80045a4:	2052      	movs	r0, #82	; 0x52
 80045a6:	f7fc f9f3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80045aa:	f240 113f 	movw	r1, #319	; 0x13f
 80045ae:	2053      	movs	r0, #83	; 0x53
 80045b0:	f7fc f9ee 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80045b4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80045b8:	2060      	movs	r0, #96	; 0x60
 80045ba:	f7fc f9e9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80045be:	2101      	movs	r1, #1
 80045c0:	2061      	movs	r0, #97	; 0x61
 80045c2:	f7fc f9e5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80045c6:	2100      	movs	r1, #0
 80045c8:	206a      	movs	r0, #106	; 0x6a
 80045ca:	f7fc f9e1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80045ce:	2100      	movs	r1, #0
 80045d0:	2080      	movs	r0, #128	; 0x80
 80045d2:	f7fc f9dd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80045d6:	2100      	movs	r1, #0
 80045d8:	2081      	movs	r0, #129	; 0x81
 80045da:	f7fc f9d9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80045de:	2100      	movs	r1, #0
 80045e0:	2082      	movs	r0, #130	; 0x82
 80045e2:	f7fc f9d5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80045e6:	2100      	movs	r1, #0
 80045e8:	2083      	movs	r0, #131	; 0x83
 80045ea:	f7fc f9d1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80045ee:	2100      	movs	r1, #0
 80045f0:	2084      	movs	r0, #132	; 0x84
 80045f2:	f7fc f9cd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80045f6:	2100      	movs	r1, #0
 80045f8:	2085      	movs	r0, #133	; 0x85
 80045fa:	f7fc f9c9 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80045fe:	2110      	movs	r1, #16
 8004600:	2090      	movs	r0, #144	; 0x90
 8004602:	f7fc f9c5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004606:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800460a:	2092      	movs	r0, #146	; 0x92
 800460c:	f7fc f9c0 	bl	8000990 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004610:	f240 1133 	movw	r1, #307	; 0x133
 8004614:	2007      	movs	r0, #7
 8004616:	f7fc f9bb 	bl	8000990 <LCD_WriteReg>
 800461a:	f001 bb3f 	b.w	8005c9c <LCD_Init+0x3e34>
 800461e:	bf00      	nop
 8004620:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x9320) //测试OK.
 8004624:	4bce      	ldr	r3, [pc, #824]	; (8004960 <LCD_Init+0x2af8>)
 8004626:	889b      	ldrh	r3, [r3, #4]
 8004628:	f249 3220 	movw	r2, #37664	; 0x9320
 800462c:	4293      	cmp	r3, r2
 800462e:	f040 80ad 	bne.w	800478c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004632:	2100      	movs	r1, #0
 8004634:	2000      	movs	r0, #0
 8004636:	f7fc f9ab 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800463a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800463e:	2001      	movs	r0, #1
 8004640:	f7fc f9a6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004644:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004648:	2002      	movs	r0, #2
 800464a:	f7fc f9a1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800464e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004652:	2003      	movs	r0, #3
 8004654:	f7fc f99c 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004658:	2100      	movs	r1, #0
 800465a:	2004      	movs	r0, #4
 800465c:	f7fc f998 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004660:	f240 2102 	movw	r1, #514	; 0x202
 8004664:	2008      	movs	r0, #8
 8004666:	f7fc f993 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800466a:	2100      	movs	r1, #0
 800466c:	2009      	movs	r0, #9
 800466e:	f7fc f98f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004672:	2100      	movs	r1, #0
 8004674:	200a      	movs	r0, #10
 8004676:	f7fc f98b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800467a:	2101      	movs	r1, #1
 800467c:	200c      	movs	r0, #12
 800467e:	f7fc f987 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004682:	2100      	movs	r1, #0
 8004684:	200d      	movs	r0, #13
 8004686:	f7fc f983 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800468a:	2100      	movs	r1, #0
 800468c:	200f      	movs	r0, #15
 800468e:	f7fc f97f 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004692:	2032      	movs	r0, #50	; 0x32
 8004694:	f001 feb8 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004698:	f240 1101 	movw	r1, #257	; 0x101
 800469c:	2007      	movs	r0, #7
 800469e:	f7fc f977 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 80046a2:	2032      	movs	r0, #50	; 0x32
 80046a4:	f001 feb0 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80046a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80046ac:	2010      	movs	r0, #16
 80046ae:	f7fc f96f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80046b2:	2107      	movs	r1, #7
 80046b4:	2011      	movs	r0, #17
 80046b6:	f7fc f96b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80046ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80046be:	2012      	movs	r0, #18
 80046c0:	f7fc f966 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80046c4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80046c8:	2013      	movs	r0, #19
 80046ca:	f7fc f961 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80046ce:	2100      	movs	r1, #0
 80046d0:	2029      	movs	r0, #41	; 0x29
 80046d2:	f7fc f95d 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80046d6:	f244 0110 	movw	r1, #16400	; 0x4010
 80046da:	202b      	movs	r0, #43	; 0x2b
 80046dc:	f7fc f958 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80046e0:	2100      	movs	r1, #0
 80046e2:	2050      	movs	r0, #80	; 0x50
 80046e4:	f7fc f954 	bl	8000990 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80046e8:	21ef      	movs	r1, #239	; 0xef
 80046ea:	2051      	movs	r0, #81	; 0x51
 80046ec:	f7fc f950 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80046f0:	2100      	movs	r1, #0
 80046f2:	2052      	movs	r0, #82	; 0x52
 80046f4:	f7fc f94c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80046f8:	f240 113f 	movw	r1, #319	; 0x13f
 80046fc:	2053      	movs	r0, #83	; 0x53
 80046fe:	f7fc f947 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004702:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004706:	2060      	movs	r0, #96	; 0x60
 8004708:	f7fc f942 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800470c:	2101      	movs	r1, #1
 800470e:	2061      	movs	r0, #97	; 0x61
 8004710:	f7fc f93e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004714:	2100      	movs	r1, #0
 8004716:	206a      	movs	r0, #106	; 0x6a
 8004718:	f7fc f93a 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800471c:	2100      	movs	r1, #0
 800471e:	2080      	movs	r0, #128	; 0x80
 8004720:	f7fc f936 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004724:	2100      	movs	r1, #0
 8004726:	2081      	movs	r0, #129	; 0x81
 8004728:	f7fc f932 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800472c:	2100      	movs	r1, #0
 800472e:	2082      	movs	r0, #130	; 0x82
 8004730:	f7fc f92e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004734:	2100      	movs	r1, #0
 8004736:	2083      	movs	r0, #131	; 0x83
 8004738:	f7fc f92a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800473c:	2100      	movs	r1, #0
 800473e:	2084      	movs	r0, #132	; 0x84
 8004740:	f7fc f926 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004744:	2100      	movs	r1, #0
 8004746:	2085      	movs	r0, #133	; 0x85
 8004748:	f7fc f922 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800474c:	2110      	movs	r1, #16
 800474e:	2090      	movs	r0, #144	; 0x90
 8004750:	f7fc f91e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004754:	2100      	movs	r1, #0
 8004756:	2092      	movs	r0, #146	; 0x92
 8004758:	f7fc f91a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800475c:	2101      	movs	r1, #1
 800475e:	2093      	movs	r0, #147	; 0x93
 8004760:	f7fc f916 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004764:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004768:	2095      	movs	r0, #149	; 0x95
 800476a:	f7fc f911 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800476e:	2100      	movs	r1, #0
 8004770:	2097      	movs	r0, #151	; 0x97
 8004772:	f7fc f90d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004776:	2100      	movs	r1, #0
 8004778:	2098      	movs	r0, #152	; 0x98
 800477a:	f7fc f909 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800477e:	f240 1173 	movw	r1, #371	; 0x173
 8004782:	2007      	movs	r0, #7
 8004784:	f7fc f904 	bl	8000990 <LCD_WriteReg>
 8004788:	f001 ba88 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800478c:	4b74      	ldr	r3, [pc, #464]	; (8004960 <LCD_Init+0x2af8>)
 800478e:	889b      	ldrh	r3, [r3, #4]
 8004790:	f249 3231 	movw	r2, #37681	; 0x9331
 8004794:	4293      	cmp	r3, r2
 8004796:	f040 80e5 	bne.w	8004964 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800479a:	f241 0114 	movw	r1, #4116	; 0x1014
 800479e:	20e7      	movs	r0, #231	; 0xe7
 80047a0:	f7fc f8f6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80047a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7fc f8f1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80047ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047b2:	2002      	movs	r0, #2
 80047b4:	f7fc f8ec 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80047b8:	f241 0138 	movw	r1, #4152	; 0x1038
 80047bc:	2003      	movs	r0, #3
 80047be:	f7fc f8e7 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80047c2:	f240 2102 	movw	r1, #514	; 0x202
 80047c6:	2008      	movs	r0, #8
 80047c8:	f7fc f8e2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80047cc:	2100      	movs	r1, #0
 80047ce:	2009      	movs	r0, #9
 80047d0:	f7fc f8de 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80047d4:	2100      	movs	r1, #0
 80047d6:	200a      	movs	r0, #10
 80047d8:	f7fc f8da 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80047dc:	2100      	movs	r1, #0
 80047de:	200c      	movs	r0, #12
 80047e0:	f7fc f8d6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80047e4:	2100      	movs	r1, #0
 80047e6:	200d      	movs	r0, #13
 80047e8:	f7fc f8d2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80047ec:	2100      	movs	r1, #0
 80047ee:	200f      	movs	r0, #15
 80047f0:	f7fc f8ce 	bl	8000990 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80047f4:	2100      	movs	r1, #0
 80047f6:	2010      	movs	r0, #16
 80047f8:	f7fc f8ca 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80047fc:	2107      	movs	r1, #7
 80047fe:	2011      	movs	r0, #17
 8004800:	f7fc f8c6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004804:	2100      	movs	r1, #0
 8004806:	2012      	movs	r0, #18
 8004808:	f7fc f8c2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800480c:	2100      	movs	r1, #0
 800480e:	2013      	movs	r0, #19
 8004810:	f7fc f8be 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004814:	20c8      	movs	r0, #200	; 0xc8
 8004816:	f001 fdf7 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800481a:	f241 6190 	movw	r1, #5776	; 0x1690
 800481e:	2010      	movs	r0, #16
 8004820:	f7fc f8b6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004824:	f240 2127 	movw	r1, #551	; 0x227
 8004828:	2011      	movs	r0, #17
 800482a:	f7fc f8b1 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800482e:	2032      	movs	r0, #50	; 0x32
 8004830:	f001 fdea 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004834:	210c      	movs	r1, #12
 8004836:	2012      	movs	r0, #18
 8004838:	f7fc f8aa 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800483c:	2032      	movs	r0, #50	; 0x32
 800483e:	f001 fde3 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004846:	2013      	movs	r0, #19
 8004848:	f7fc f8a2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800484c:	2111      	movs	r1, #17
 800484e:	2029      	movs	r0, #41	; 0x29
 8004850:	f7fc f89e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004854:	210b      	movs	r1, #11
 8004856:	202b      	movs	r0, #43	; 0x2b
 8004858:	f7fc f89a 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800485c:	2032      	movs	r0, #50	; 0x32
 800485e:	f001 fdd3 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004862:	2100      	movs	r1, #0
 8004864:	2020      	movs	r0, #32
 8004866:	f7fc f893 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800486a:	f240 113f 	movw	r1, #319	; 0x13f
 800486e:	2021      	movs	r0, #33	; 0x21
 8004870:	f7fc f88e 	bl	8000990 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004874:	2100      	movs	r1, #0
 8004876:	2030      	movs	r0, #48	; 0x30
 8004878:	f7fc f88a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800487c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004880:	2031      	movs	r0, #49	; 0x31
 8004882:	f7fc f885 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004886:	2100      	movs	r1, #0
 8004888:	2032      	movs	r0, #50	; 0x32
 800488a:	f7fc f881 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800488e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004892:	2035      	movs	r0, #53	; 0x35
 8004894:	f7fc f87c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004898:	f241 610a 	movw	r1, #5642	; 0x160a
 800489c:	2036      	movs	r0, #54	; 0x36
 800489e:	f7fc f877 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80048a2:	f240 7107 	movw	r1, #1799	; 0x707
 80048a6:	2037      	movs	r0, #55	; 0x37
 80048a8:	f7fc f872 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80048ac:	f44f 7183 	mov.w	r1, #262	; 0x106
 80048b0:	2038      	movs	r0, #56	; 0x38
 80048b2:	f7fc f86d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80048b6:	f240 7107 	movw	r1, #1799	; 0x707
 80048ba:	2039      	movs	r0, #57	; 0x39
 80048bc:	f7fc f868 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80048c0:	f240 4102 	movw	r1, #1026	; 0x402
 80048c4:	203c      	movs	r0, #60	; 0x3c
 80048c6:	f7fc f863 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80048ca:	f640 410f 	movw	r1, #3087	; 0xc0f
 80048ce:	203d      	movs	r0, #61	; 0x3d
 80048d0:	f7fc f85e 	bl	8000990 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80048d4:	2100      	movs	r1, #0
 80048d6:	2050      	movs	r0, #80	; 0x50
 80048d8:	f7fc f85a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80048dc:	21ef      	movs	r1, #239	; 0xef
 80048de:	2051      	movs	r0, #81	; 0x51
 80048e0:	f7fc f856 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80048e4:	2100      	movs	r1, #0
 80048e6:	2052      	movs	r0, #82	; 0x52
 80048e8:	f7fc f852 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80048ec:	f240 113f 	movw	r1, #319	; 0x13f
 80048f0:	2053      	movs	r0, #83	; 0x53
 80048f2:	f7fc f84d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80048f6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80048fa:	2060      	movs	r0, #96	; 0x60
 80048fc:	f7fc f848 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004900:	2101      	movs	r1, #1
 8004902:	2061      	movs	r0, #97	; 0x61
 8004904:	f7fc f844 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004908:	2100      	movs	r1, #0
 800490a:	206a      	movs	r0, #106	; 0x6a
 800490c:	f7fc f840 	bl	8000990 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004910:	2100      	movs	r1, #0
 8004912:	2080      	movs	r0, #128	; 0x80
 8004914:	f7fc f83c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004918:	2100      	movs	r1, #0
 800491a:	2081      	movs	r0, #129	; 0x81
 800491c:	f7fc f838 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004920:	2100      	movs	r1, #0
 8004922:	2082      	movs	r0, #130	; 0x82
 8004924:	f7fc f834 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004928:	2100      	movs	r1, #0
 800492a:	2083      	movs	r0, #131	; 0x83
 800492c:	f7fc f830 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004930:	2100      	movs	r1, #0
 8004932:	2084      	movs	r0, #132	; 0x84
 8004934:	f7fc f82c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004938:	2100      	movs	r1, #0
 800493a:	2085      	movs	r0, #133	; 0x85
 800493c:	f7fc f828 	bl	8000990 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004940:	2110      	movs	r1, #16
 8004942:	2090      	movs	r0, #144	; 0x90
 8004944:	f7fc f824 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004948:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800494c:	2092      	movs	r0, #146	; 0x92
 800494e:	f7fc f81f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004952:	f240 1133 	movw	r1, #307	; 0x133
 8004956:	2007      	movs	r0, #7
 8004958:	f7fc f81a 	bl	8000990 <LCD_WriteReg>
 800495c:	f001 b99e 	b.w	8005c9c <LCD_Init+0x3e34>
 8004960:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5408) {
 8004964:	4be2      	ldr	r3, [pc, #904]	; (8004cf0 <LCD_Init+0x2e88>)
 8004966:	889b      	ldrh	r3, [r3, #4]
 8004968:	f245 4208 	movw	r2, #21512	; 0x5408
 800496c:	4293      	cmp	r3, r2
 800496e:	f040 80a3 	bne.w	8004ab8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004976:	2001      	movs	r0, #1
 8004978:	f7fc f80a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 800497c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004980:	2002      	movs	r0, #2
 8004982:	f7fc f805 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004986:	f241 0130 	movw	r1, #4144	; 0x1030
 800498a:	2003      	movs	r0, #3
 800498c:	f7fc f800 	bl	8000990 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004990:	2100      	movs	r1, #0
 8004992:	2004      	movs	r0, #4
 8004994:	f7fb fffc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004998:	f240 2107 	movw	r1, #519	; 0x207
 800499c:	2008      	movs	r0, #8
 800499e:	f7fb fff7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80049a2:	2100      	movs	r1, #0
 80049a4:	2009      	movs	r0, #9
 80049a6:	f7fb fff3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80049aa:	2100      	movs	r1, #0
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7fb ffef 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 80049b2:	2100      	movs	r1, #0
 80049b4:	200c      	movs	r0, #12
 80049b6:	f7fb ffeb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 80049ba:	2100      	movs	r1, #0
 80049bc:	200d      	movs	r0, #13
 80049be:	f7fb ffe7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 80049c2:	2100      	movs	r1, #0
 80049c4:	200f      	movs	r0, #15
 80049c6:	f7fb ffe3 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 80049ca:	2014      	movs	r0, #20
 80049cc:	f001 fd1c 	bl	8006408 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 80049d0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80049d4:	2010      	movs	r0, #16
 80049d6:	f7fb ffdb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 80049da:	2101      	movs	r1, #1
 80049dc:	2011      	movs	r0, #17
 80049de:	f7fb ffd7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80049e2:	2101      	movs	r1, #1
 80049e4:	2017      	movs	r0, #23
 80049e6:	f7fb ffd3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80049ea:	f44f 719c 	mov.w	r1, #312	; 0x138
 80049ee:	2012      	movs	r0, #18
 80049f0:	f7fb ffce 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80049f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049f8:	2013      	movs	r0, #19
 80049fa:	f7fb ffc9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80049fe:	2109      	movs	r1, #9
 8004a00:	2029      	movs	r0, #41	; 0x29
 8004a02:	f7fb ffc5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004a06:	2109      	movs	r1, #9
 8004a08:	202a      	movs	r0, #42	; 0x2a
 8004a0a:	f7fb ffc1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	20a4      	movs	r0, #164	; 0xa4
 8004a12:	f7fb ffbd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004a16:	2100      	movs	r1, #0
 8004a18:	2050      	movs	r0, #80	; 0x50
 8004a1a:	f7fb ffb9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004a1e:	21ef      	movs	r1, #239	; 0xef
 8004a20:	2051      	movs	r0, #81	; 0x51
 8004a22:	f7fb ffb5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004a26:	2100      	movs	r1, #0
 8004a28:	2052      	movs	r0, #82	; 0x52
 8004a2a:	f7fb ffb1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004a2e:	f240 113f 	movw	r1, #319	; 0x13f
 8004a32:	2053      	movs	r0, #83	; 0x53
 8004a34:	f7fb ffac 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004a38:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a3c:	2060      	movs	r0, #96	; 0x60
 8004a3e:	f7fb ffa7 	bl	8000990 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004a42:	2101      	movs	r1, #1
 8004a44:	2061      	movs	r0, #97	; 0x61
 8004a46:	f7fb ffa3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	206a      	movs	r0, #106	; 0x6a
 8004a4e:	f7fb ff9f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004a52:	2100      	movs	r1, #0
 8004a54:	2080      	movs	r0, #128	; 0x80
 8004a56:	f7fb ff9b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2081      	movs	r0, #129	; 0x81
 8004a5e:	f7fb ff97 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004a62:	2100      	movs	r1, #0
 8004a64:	2082      	movs	r0, #130	; 0x82
 8004a66:	f7fb ff93 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	2083      	movs	r0, #131	; 0x83
 8004a6e:	f7fb ff8f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004a72:	2100      	movs	r1, #0
 8004a74:	2084      	movs	r0, #132	; 0x84
 8004a76:	f7fb ff8b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	2085      	movs	r0, #133	; 0x85
 8004a7e:	f7fb ff87 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004a82:	2113      	movs	r1, #19
 8004a84:	2090      	movs	r0, #144	; 0x90
 8004a86:	f7fb ff83 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	2092      	movs	r0, #146	; 0x92
 8004a8e:	f7fb ff7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004a92:	2103      	movs	r1, #3
 8004a94:	2093      	movs	r0, #147	; 0x93
 8004a96:	f7fb ff7b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004a9a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a9e:	2095      	movs	r0, #149	; 0x95
 8004aa0:	f7fb ff76 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004aa4:	f240 1173 	movw	r1, #371	; 0x173
 8004aa8:	2007      	movs	r0, #7
 8004aaa:	f7fb ff71 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004aae:	2032      	movs	r0, #50	; 0x32
 8004ab0:	f001 fcaa 	bl	8006408 <HAL_Delay>
 8004ab4:	f001 b8f2 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004ab8:	4b8d      	ldr	r3, [pc, #564]	; (8004cf0 <LCD_Init+0x2e88>)
 8004aba:	889b      	ldrh	r3, [r3, #4]
 8004abc:	f241 5205 	movw	r2, #5381	; 0x1505
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	f040 8117 	bne.w	8004cf4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	2007      	movs	r0, #7
 8004aca:	f7fb ff61 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004ace:	2032      	movs	r0, #50	; 0x32
 8004ad0:	f001 fc9a 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004ad4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004ad8:	2012      	movs	r0, #18
 8004ada:	f7fb ff59 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004ade:	2101      	movs	r1, #1
 8004ae0:	20a4      	movs	r0, #164	; 0xa4
 8004ae2:	f7fb ff55 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004ae6:	210f      	movs	r1, #15
 8004ae8:	2008      	movs	r0, #8
 8004aea:	f7fb ff51 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004aee:	2108      	movs	r1, #8
 8004af0:	200a      	movs	r0, #10
 8004af2:	f7fb ff4d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004af6:	2108      	movs	r1, #8
 8004af8:	200d      	movs	r0, #13
 8004afa:	f7fb ff49 	bl	8000990 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004afe:	f240 7107 	movw	r1, #1799	; 0x707
 8004b02:	2030      	movs	r0, #48	; 0x30
 8004b04:	f7fb ff44 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004b08:	2107      	movs	r1, #7
 8004b0a:	2031      	movs	r0, #49	; 0x31
 8004b0c:	f7fb ff40 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004b10:	f240 6103 	movw	r1, #1539	; 0x603
 8004b14:	2032      	movs	r0, #50	; 0x32
 8004b16:	f7fb ff3b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004b1a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b1e:	2033      	movs	r0, #51	; 0x33
 8004b20:	f7fb ff36 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004b24:	f240 2102 	movw	r1, #514	; 0x202
 8004b28:	2034      	movs	r0, #52	; 0x34
 8004b2a:	f7fb ff31 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004b2e:	2102      	movs	r1, #2
 8004b30:	2035      	movs	r0, #53	; 0x35
 8004b32:	f7fb ff2d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004b36:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004b3a:	2036      	movs	r0, #54	; 0x36
 8004b3c:	f7fb ff28 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004b40:	f240 7107 	movw	r1, #1799	; 0x707
 8004b44:	2037      	movs	r0, #55	; 0x37
 8004b46:	f7fb ff23 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2038      	movs	r0, #56	; 0x38
 8004b4e:	f7fb ff1f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004b52:	2100      	movs	r1, #0
 8004b54:	2039      	movs	r0, #57	; 0x39
 8004b56:	f7fb ff1b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004b5a:	f240 7107 	movw	r1, #1799	; 0x707
 8004b5e:	203a      	movs	r0, #58	; 0x3a
 8004b60:	f7fb ff16 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004b64:	2100      	movs	r1, #0
 8004b66:	203b      	movs	r0, #59	; 0x3b
 8004b68:	f7fb ff12 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004b6c:	2107      	movs	r1, #7
 8004b6e:	203c      	movs	r0, #60	; 0x3c
 8004b70:	f7fb ff0e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004b74:	2100      	movs	r1, #0
 8004b76:	203d      	movs	r0, #61	; 0x3d
 8004b78:	f7fb ff0a 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004b7c:	2032      	movs	r0, #50	; 0x32
 8004b7e:	f001 fc43 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004b82:	2101      	movs	r1, #1
 8004b84:	2007      	movs	r0, #7
 8004b86:	f7fb ff03 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	2017      	movs	r0, #23
 8004b8e:	f7fb feff 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004b92:	2032      	movs	r0, #50	; 0x32
 8004b94:	f001 fc38 	bl	8006408 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004b98:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004b9c:	2010      	movs	r0, #16
 8004b9e:	f7fb fef7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004ba2:	f240 2117 	movw	r1, #535	; 0x217
 8004ba6:	2011      	movs	r0, #17
 8004ba8:	f7fb fef2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004bac:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004bb0:	2012      	movs	r0, #18
 8004bb2:	f7fb feed 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004bb6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004bba:	2013      	movs	r0, #19
 8004bbc:	f7fb fee8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	202a      	movs	r0, #42	; 0x2a
 8004bc4:	f7fb fee4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004bc8:	210a      	movs	r1, #10
 8004bca:	2029      	movs	r0, #41	; 0x29
 8004bcc:	f7fb fee0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004bd0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004bd4:	2012      	movs	r0, #18
 8004bd6:	f7fb fedb 	bl	8000990 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004bda:	2100      	movs	r1, #0
 8004bdc:	2050      	movs	r0, #80	; 0x50
 8004bde:	f7fb fed7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004be2:	21ef      	movs	r1, #239	; 0xef
 8004be4:	2051      	movs	r0, #81	; 0x51
 8004be6:	f7fb fed3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004bea:	2100      	movs	r1, #0
 8004bec:	2052      	movs	r0, #82	; 0x52
 8004bee:	f7fb fecf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004bf2:	f240 113f 	movw	r1, #319	; 0x13f
 8004bf6:	2053      	movs	r0, #83	; 0x53
 8004bf8:	f7fb feca 	bl	8000990 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004bfc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c00:	2060      	movs	r0, #96	; 0x60
 8004c02:	f7fb fec5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004c06:	2101      	movs	r1, #1
 8004c08:	2061      	movs	r0, #97	; 0x61
 8004c0a:	f7fb fec1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	206a      	movs	r0, #106	; 0x6a
 8004c12:	f7fb febd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004c16:	2100      	movs	r1, #0
 8004c18:	2080      	movs	r0, #128	; 0x80
 8004c1a:	f7fb feb9 	bl	8000990 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	2081      	movs	r0, #129	; 0x81
 8004c22:	f7fb feb5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c26:	2100      	movs	r1, #0
 8004c28:	2082      	movs	r0, #130	; 0x82
 8004c2a:	f7fb feb1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c2e:	2100      	movs	r1, #0
 8004c30:	2083      	movs	r0, #131	; 0x83
 8004c32:	f7fb fead 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c36:	2100      	movs	r1, #0
 8004c38:	2084      	movs	r0, #132	; 0x84
 8004c3a:	f7fb fea9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c3e:	2100      	movs	r1, #0
 8004c40:	2085      	movs	r0, #133	; 0x85
 8004c42:	f7fb fea5 	bl	8000990 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004c46:	2113      	movs	r1, #19
 8004c48:	2090      	movs	r0, #144	; 0x90
 8004c4a:	f7fb fea1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004c4e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c52:	2092      	movs	r0, #146	; 0x92
 8004c54:	f7fb fe9c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004c58:	2105      	movs	r1, #5
 8004c5a:	2093      	movs	r0, #147	; 0x93
 8004c5c:	f7fb fe98 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004c60:	2100      	movs	r1, #0
 8004c62:	2095      	movs	r0, #149	; 0x95
 8004c64:	f7fb fe94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2097      	movs	r0, #151	; 0x97
 8004c6c:	f7fb fe90 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004c70:	2100      	movs	r1, #0
 8004c72:	2098      	movs	r0, #152	; 0x98
 8004c74:	f7fb fe8c 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f7fb fe87 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004c82:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c86:	2002      	movs	r0, #2
 8004c88:	f7fb fe82 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004c8c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004c90:	2003      	movs	r0, #3
 8004c92:	f7fb fe7d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004c96:	2100      	movs	r1, #0
 8004c98:	2004      	movs	r0, #4
 8004c9a:	f7fb fe79 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	200c      	movs	r0, #12
 8004ca2:	f7fb fe75 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	200f      	movs	r0, #15
 8004caa:	f7fb fe71 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	2020      	movs	r0, #32
 8004cb2:	f7fb fe6d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	2021      	movs	r0, #33	; 0x21
 8004cba:	f7fb fe69 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004cbe:	2121      	movs	r1, #33	; 0x21
 8004cc0:	2007      	movs	r0, #7
 8004cc2:	f7fb fe65 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004cc6:	2014      	movs	r0, #20
 8004cc8:	f001 fb9e 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004ccc:	2161      	movs	r1, #97	; 0x61
 8004cce:	2007      	movs	r0, #7
 8004cd0:	f7fb fe5e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004cd4:	2014      	movs	r0, #20
 8004cd6:	f001 fb97 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004cda:	f240 1173 	movw	r1, #371	; 0x173
 8004cde:	2007      	movs	r0, #7
 8004ce0:	f7fb fe56 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004ce4:	2014      	movs	r0, #20
 8004ce6:	f001 fb8f 	bl	8006408 <HAL_Delay>
 8004cea:	f000 bfd7 	b.w	8005c9c <LCD_Init+0x3e34>
 8004cee:	bf00      	nop
 8004cf0:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0xB505) {
 8004cf4:	4bf0      	ldr	r3, [pc, #960]	; (80050b8 <LCD_Init+0x3250>)
 8004cf6:	889b      	ldrh	r3, [r3, #4]
 8004cf8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	f040 8103 	bne.w	8004f08 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004d02:	2100      	movs	r1, #0
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7fb fe43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fb fe3f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d12:	2100      	movs	r1, #0
 8004d14:	2000      	movs	r0, #0
 8004d16:	f7fb fe3b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f7fb fe37 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004d22:	2101      	movs	r1, #1
 8004d24:	20a4      	movs	r0, #164	; 0xa4
 8004d26:	f7fb fe33 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004d2a:	2014      	movs	r0, #20
 8004d2c:	f001 fb6c 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004d30:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d34:	2060      	movs	r0, #96	; 0x60
 8004d36:	f7fb fe2b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004d3a:	f240 2102 	movw	r1, #514	; 0x202
 8004d3e:	2008      	movs	r0, #8
 8004d40:	f7fb fe26 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004d44:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004d48:	2030      	movs	r0, #48	; 0x30
 8004d4a:	f7fb fe21 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004d4e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004d52:	2031      	movs	r0, #49	; 0x31
 8004d54:	f7fb fe1c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004d58:	f240 6104 	movw	r1, #1540	; 0x604
 8004d5c:	2032      	movs	r0, #50	; 0x32
 8004d5e:	f7fb fe17 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004d62:	f640 6116 	movw	r1, #3606	; 0xe16
 8004d66:	2033      	movs	r0, #51	; 0x33
 8004d68:	f7fb fe12 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004d6c:	f242 2111 	movw	r1, #8721	; 0x2211
 8004d70:	2034      	movs	r0, #52	; 0x34
 8004d72:	f7fb fe0d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004d76:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004d7a:	2035      	movs	r0, #53	; 0x35
 8004d7c:	f7fb fe08 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004d80:	f248 5107 	movw	r1, #34055	; 0x8507
 8004d84:	2036      	movs	r0, #54	; 0x36
 8004d86:	f7fb fe03 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004d8a:	f241 4107 	movw	r1, #5127	; 0x1407
 8004d8e:	2037      	movs	r0, #55	; 0x37
 8004d90:	f7fb fdfe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004d94:	f241 4103 	movw	r1, #5123	; 0x1403
 8004d98:	2038      	movs	r0, #56	; 0x38
 8004d9a:	f7fb fdf9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004d9e:	2120      	movs	r1, #32
 8004da0:	2039      	movs	r0, #57	; 0x39
 8004da2:	f7fb fdf5 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004da6:	211a      	movs	r1, #26
 8004da8:	2090      	movs	r0, #144	; 0x90
 8004daa:	f7fb fdf1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004dae:	2100      	movs	r1, #0
 8004db0:	2010      	movs	r0, #16
 8004db2:	f7fb fded 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004db6:	2107      	movs	r1, #7
 8004db8:	2011      	movs	r0, #17
 8004dba:	f7fb fde9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2012      	movs	r0, #18
 8004dc2:	f7fb fde5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2013      	movs	r0, #19
 8004dca:	f7fb fde1 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004dce:	2014      	movs	r0, #20
 8004dd0:	f001 fb1a 	bl	8006408 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004dd4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004dd8:	2010      	movs	r0, #16
 8004dda:	f7fb fdd9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004dde:	f240 1137 	movw	r1, #311	; 0x137
 8004de2:	2011      	movs	r0, #17
 8004de4:	f7fb fdd4 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004de8:	2014      	movs	r0, #20
 8004dea:	f001 fb0d 	bl	8006408 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004dee:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004df2:	2012      	movs	r0, #18
 8004df4:	f7fb fdcc 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004df8:	2014      	movs	r0, #20
 8004dfa:	f001 fb05 	bl	8006408 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004dfe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004e02:	2013      	movs	r0, #19
 8004e04:	f7fb fdc4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004e08:	2180      	movs	r1, #128	; 0x80
 8004e0a:	202a      	movs	r0, #42	; 0x2a
 8004e0c:	f7fb fdc0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004e10:	2148      	movs	r1, #72	; 0x48
 8004e12:	2029      	movs	r0, #41	; 0x29
 8004e14:	f7fb fdbc 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004e18:	2014      	movs	r0, #20
 8004e1a:	f001 faf5 	bl	8006408 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e22:	2001      	movs	r0, #1
 8004e24:	f7fb fdb4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004e28:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	f7fb fdaf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004e32:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e36:	2003      	movs	r0, #3
 8004e38:	f7fb fdaa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e3c:	f240 2102 	movw	r1, #514	; 0x202
 8004e40:	2008      	movs	r0, #8
 8004e42:	f7fb fda5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004e46:	2100      	movs	r1, #0
 8004e48:	200a      	movs	r0, #10
 8004e4a:	f7fb fda1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004e4e:	2100      	movs	r1, #0
 8004e50:	200c      	movs	r0, #12
 8004e52:	f7fb fd9d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004e56:	2100      	movs	r1, #0
 8004e58:	200d      	movs	r0, #13
 8004e5a:	f7fb fd99 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004e5e:	2130      	movs	r1, #48	; 0x30
 8004e60:	200e      	movs	r0, #14
 8004e62:	f7fb fd95 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004e66:	2100      	movs	r1, #0
 8004e68:	2050      	movs	r0, #80	; 0x50
 8004e6a:	f7fb fd91 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004e6e:	21ef      	movs	r1, #239	; 0xef
 8004e70:	2051      	movs	r0, #81	; 0x51
 8004e72:	f7fb fd8d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004e76:	2100      	movs	r1, #0
 8004e78:	2052      	movs	r0, #82	; 0x52
 8004e7a:	f7fb fd89 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004e7e:	f240 113f 	movw	r1, #319	; 0x13f
 8004e82:	2053      	movs	r0, #83	; 0x53
 8004e84:	f7fb fd84 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004e88:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e8c:	2060      	movs	r0, #96	; 0x60
 8004e8e:	f7fb fd7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004e92:	2101      	movs	r1, #1
 8004e94:	2061      	movs	r0, #97	; 0x61
 8004e96:	f7fb fd7b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	206a      	movs	r0, #106	; 0x6a
 8004e9e:	f7fb fd77 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004ea2:	2111      	movs	r1, #17
 8004ea4:	2090      	movs	r0, #144	; 0x90
 8004ea6:	f7fb fd73 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004eaa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004eae:	2092      	movs	r0, #146	; 0x92
 8004eb0:	f7fb fd6e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004eb4:	f240 4102 	movw	r1, #1026	; 0x402
 8004eb8:	2093      	movs	r0, #147	; 0x93
 8004eba:	f7fb fd69 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	2094      	movs	r0, #148	; 0x94
 8004ec2:	f7fb fd65 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004ec6:	2014      	movs	r0, #20
 8004ec8:	f001 fa9e 	bl	8006408 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004ecc:	2101      	movs	r1, #1
 8004ece:	2007      	movs	r0, #7
 8004ed0:	f7fb fd5e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004ed4:	2014      	movs	r0, #20
 8004ed6:	f001 fa97 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004eda:	2161      	movs	r1, #97	; 0x61
 8004edc:	2007      	movs	r0, #7
 8004ede:	f7fb fd57 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004ee2:	f240 1173 	movw	r1, #371	; 0x173
 8004ee6:	2007      	movs	r0, #7
 8004ee8:	f7fb fd52 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004eec:	2100      	movs	r1, #0
 8004eee:	2020      	movs	r0, #32
 8004ef0:	f7fb fd4e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	2021      	movs	r0, #33	; 0x21
 8004ef8:	f7fb fd4a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004efc:	2122      	movs	r1, #34	; 0x22
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fb fd46 	bl	8000990 <LCD_WriteReg>
 8004f04:	f000 beca 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004f08:	4b6b      	ldr	r3, [pc, #428]	; (80050b8 <LCD_Init+0x3250>)
 8004f0a:	889b      	ldrh	r3, [r3, #4]
 8004f0c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f040 80d3 	bne.w	80050bc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004f16:	2100      	movs	r1, #0
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7fb fd39 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	2000      	movs	r0, #0
 8004f22:	f7fb fd35 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004f26:	2014      	movs	r0, #20
 8004f28:	f001 fa6e 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7fb fd2e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f34:	2100      	movs	r1, #0
 8004f36:	2000      	movs	r0, #0
 8004f38:	f7fb fd2a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f7fb fd26 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f44:	2100      	movs	r1, #0
 8004f46:	2000      	movs	r0, #0
 8004f48:	f7fb fd22 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	20a4      	movs	r0, #164	; 0xa4
 8004f50:	f7fb fd1e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004f54:	2014      	movs	r0, #20
 8004f56:	f001 fa57 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004f5a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f5e:	2060      	movs	r0, #96	; 0x60
 8004f60:	f7fb fd16 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004f64:	f640 0106 	movw	r1, #2054	; 0x806
 8004f68:	2008      	movs	r0, #8
 8004f6a:	f7fb fd11 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004f6e:	f240 7103 	movw	r1, #1795	; 0x703
 8004f72:	2030      	movs	r0, #48	; 0x30
 8004f74:	f7fb fd0c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004f78:	2101      	movs	r1, #1
 8004f7a:	2031      	movs	r0, #49	; 0x31
 8004f7c:	f7fb fd08 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004f80:	2104      	movs	r1, #4
 8004f82:	2032      	movs	r0, #50	; 0x32
 8004f84:	f7fb fd04 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004f88:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004f8c:	2033      	movs	r0, #51	; 0x33
 8004f8e:	f7fb fcff 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004f92:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f96:	2034      	movs	r0, #52	; 0x34
 8004f98:	f7fb fcfa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004f9c:	f240 1103 	movw	r1, #259	; 0x103
 8004fa0:	2035      	movs	r0, #53	; 0x35
 8004fa2:	f7fb fcf5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004fa6:	211f      	movs	r1, #31
 8004fa8:	2036      	movs	r0, #54	; 0x36
 8004faa:	f7fb fcf1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004fae:	f240 7103 	movw	r1, #1795	; 0x703
 8004fb2:	2037      	movs	r0, #55	; 0x37
 8004fb4:	f7fb fcec 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	2038      	movs	r0, #56	; 0x38
 8004fbc:	f7fb fce8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	2039      	movs	r0, #57	; 0x39
 8004fc4:	f7fb fce4 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004fc8:	2115      	movs	r1, #21
 8004fca:	2090      	movs	r0, #144	; 0x90
 8004fcc:	f7fb fce0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004fd0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004fd4:	2010      	movs	r0, #16
 8004fd6:	f7fb fcdb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004fda:	f240 2147 	movw	r1, #583	; 0x247
 8004fde:	2011      	movs	r0, #17
 8004fe0:	f7fb fcd6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004fe4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004fe8:	2012      	movs	r0, #18
 8004fea:	f7fb fcd1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004fee:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004ff2:	2013      	movs	r0, #19
 8004ff4:	f7fb fccc 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(120);
 8004ff8:	2078      	movs	r0, #120	; 0x78
 8004ffa:	f001 fa05 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005002:	2001      	movs	r0, #1
 8005004:	f7fb fcc4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800500c:	2002      	movs	r0, #2
 800500e:	f7fb fcbf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005012:	f241 0130 	movw	r1, #4144	; 0x1030
 8005016:	2003      	movs	r0, #3
 8005018:	f7fb fcba 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800501c:	2108      	movs	r1, #8
 800501e:	200a      	movs	r0, #10
 8005020:	f7fb fcb6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005024:	2100      	movs	r1, #0
 8005026:	200c      	movs	r0, #12
 8005028:	f7fb fcb2 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800502c:	2120      	movs	r1, #32
 800502e:	200e      	movs	r0, #14
 8005030:	f7fb fcae 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005034:	2100      	movs	r1, #0
 8005036:	200f      	movs	r0, #15
 8005038:	f7fb fcaa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800503c:	2100      	movs	r1, #0
 800503e:	2020      	movs	r0, #32
 8005040:	f7fb fca6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005044:	2100      	movs	r1, #0
 8005046:	2021      	movs	r0, #33	; 0x21
 8005048:	f7fb fca2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800504c:	213d      	movs	r1, #61	; 0x3d
 800504e:	202a      	movs	r0, #42	; 0x2a
 8005050:	f7fb fc9e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8005054:	2014      	movs	r0, #20
 8005056:	f001 f9d7 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800505a:	212d      	movs	r1, #45	; 0x2d
 800505c:	2029      	movs	r0, #41	; 0x29
 800505e:	f7fb fc97 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005062:	2100      	movs	r1, #0
 8005064:	2050      	movs	r0, #80	; 0x50
 8005066:	f7fb fc93 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800506a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800506e:	2051      	movs	r0, #81	; 0x51
 8005070:	f7fb fc8e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005074:	2100      	movs	r1, #0
 8005076:	2052      	movs	r0, #82	; 0x52
 8005078:	f7fb fc8a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800507c:	f240 113f 	movw	r1, #319	; 0x13f
 8005080:	2053      	movs	r0, #83	; 0x53
 8005082:	f7fb fc85 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005086:	2100      	movs	r1, #0
 8005088:	2061      	movs	r0, #97	; 0x61
 800508a:	f7fb fc81 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800508e:	2100      	movs	r1, #0
 8005090:	206a      	movs	r0, #106	; 0x6a
 8005092:	f7fb fc7d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005096:	f44f 7140 	mov.w	r1, #768	; 0x300
 800509a:	2092      	movs	r0, #146	; 0x92
 800509c:	f7fb fc78 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80050a0:	2105      	movs	r1, #5
 80050a2:	2093      	movs	r0, #147	; 0x93
 80050a4:	f7fb fc74 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80050a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ac:	2007      	movs	r0, #7
 80050ae:	f7fb fc6f 	bl	8000990 <LCD_WriteReg>
 80050b2:	f000 bdf3 	b.w	8005c9c <LCD_Init+0x3e34>
 80050b6:	bf00      	nop
 80050b8:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80050bc:	4bc2      	ldr	r3, [pc, #776]	; (80053c8 <LCD_Init+0x3560>)
 80050be:	889b      	ldrh	r3, [r3, #4]
 80050c0:	f648 1289 	movw	r2, #35209	; 0x8989
 80050c4:	4293      	cmp	r3, r2
 80050c6:	f040 80bc 	bne.w	8005242 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80050ca:	2101      	movs	r1, #1
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7fb fc5f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80050d2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80050d6:	2003      	movs	r0, #3
 80050d8:	f7fb fc5a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80050dc:	2100      	movs	r1, #0
 80050de:	200c      	movs	r0, #12
 80050e0:	f7fb fc56 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80050e4:	f640 010c 	movw	r1, #2060	; 0x80c
 80050e8:	200d      	movs	r0, #13
 80050ea:	f7fb fc51 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80050ee:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80050f2:	200e      	movs	r0, #14
 80050f4:	f7fb fc4c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80050f8:	21b0      	movs	r1, #176	; 0xb0
 80050fa:	201e      	movs	r0, #30
 80050fc:	f7fb fc48 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005100:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005104:	2001      	movs	r0, #1
 8005106:	f7fb fc43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800510a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800510e:	2002      	movs	r0, #2
 8005110:	f7fb fc3e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005114:	2100      	movs	r1, #0
 8005116:	2010      	movs	r0, #16
 8005118:	f7fb fc3a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800511c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005120:	2011      	movs	r0, #17
 8005122:	f7fb fc35 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005126:	2100      	movs	r1, #0
 8005128:	2005      	movs	r0, #5
 800512a:	f7fb fc31 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800512e:	2100      	movs	r1, #0
 8005130:	2006      	movs	r0, #6
 8005132:	f7fb fc2d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005136:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800513a:	2016      	movs	r0, #22
 800513c:	f7fb fc28 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005140:	2103      	movs	r1, #3
 8005142:	2017      	movs	r0, #23
 8005144:	f7fb fc24 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005148:	f240 2133 	movw	r1, #563	; 0x233
 800514c:	2007      	movs	r0, #7
 800514e:	f7fb fc1f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005152:	2100      	movs	r1, #0
 8005154:	200b      	movs	r0, #11
 8005156:	f7fb fc1b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800515a:	2100      	movs	r1, #0
 800515c:	200f      	movs	r0, #15
 800515e:	f7fb fc17 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005162:	2100      	movs	r1, #0
 8005164:	2041      	movs	r0, #65	; 0x41
 8005166:	f7fb fc13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800516a:	2100      	movs	r1, #0
 800516c:	2042      	movs	r0, #66	; 0x42
 800516e:	f7fb fc0f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005172:	2100      	movs	r1, #0
 8005174:	2048      	movs	r0, #72	; 0x48
 8005176:	f7fb fc0b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800517a:	f240 113f 	movw	r1, #319	; 0x13f
 800517e:	2049      	movs	r0, #73	; 0x49
 8005180:	f7fb fc06 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005184:	2100      	movs	r1, #0
 8005186:	204a      	movs	r0, #74	; 0x4a
 8005188:	f7fb fc02 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800518c:	2100      	movs	r1, #0
 800518e:	204b      	movs	r0, #75	; 0x4b
 8005190:	f7fb fbfe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005194:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005198:	2044      	movs	r0, #68	; 0x44
 800519a:	f7fb fbf9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800519e:	2100      	movs	r1, #0
 80051a0:	2045      	movs	r0, #69	; 0x45
 80051a2:	f7fb fbf5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80051a6:	f240 113f 	movw	r1, #319	; 0x13f
 80051aa:	2046      	movs	r0, #70	; 0x46
 80051ac:	f7fb fbf0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80051b0:	f240 7107 	movw	r1, #1799	; 0x707
 80051b4:	2030      	movs	r0, #48	; 0x30
 80051b6:	f7fb fbeb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80051ba:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051be:	2031      	movs	r0, #49	; 0x31
 80051c0:	f7fb fbe6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80051c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051c8:	2032      	movs	r0, #50	; 0x32
 80051ca:	f7fb fbe1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80051ce:	f240 5102 	movw	r1, #1282	; 0x502
 80051d2:	2033      	movs	r0, #51	; 0x33
 80051d4:	f7fb fbdc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80051d8:	f240 5107 	movw	r1, #1287	; 0x507
 80051dc:	2034      	movs	r0, #52	; 0x34
 80051de:	f7fb fbd7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80051e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051e6:	2035      	movs	r0, #53	; 0x35
 80051e8:	f7fb fbd2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80051ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051f0:	2036      	movs	r0, #54	; 0x36
 80051f2:	f7fb fbcd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80051f6:	f240 5102 	movw	r1, #1282	; 0x502
 80051fa:	2037      	movs	r0, #55	; 0x37
 80051fc:	f7fb fbc8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005200:	f240 3102 	movw	r1, #770	; 0x302
 8005204:	203a      	movs	r0, #58	; 0x3a
 8005206:	f7fb fbc3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800520a:	f240 3102 	movw	r1, #770	; 0x302
 800520e:	203b      	movs	r0, #59	; 0x3b
 8005210:	f7fb fbbe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005214:	2100      	movs	r1, #0
 8005216:	2023      	movs	r0, #35	; 0x23
 8005218:	f7fb fbba 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800521c:	2100      	movs	r1, #0
 800521e:	2024      	movs	r0, #36	; 0x24
 8005220:	f7fb fbb6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005228:	2025      	movs	r0, #37	; 0x25
 800522a:	f7fb fbb1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800522e:	2100      	movs	r1, #0
 8005230:	204f      	movs	r0, #79	; 0x4f
 8005232:	f7fb fbad 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005236:	2100      	movs	r1, #0
 8005238:	204e      	movs	r0, #78	; 0x4e
 800523a:	f7fb fba9 	bl	8000990 <LCD_WriteReg>
 800523e:	f000 bd2d 	b.w	8005c9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005242:	4b61      	ldr	r3, [pc, #388]	; (80053c8 <LCD_Init+0x3560>)
 8005244:	889b      	ldrh	r3, [r3, #4]
 8005246:	f244 5231 	movw	r2, #17713	; 0x4531
 800524a:	4293      	cmp	r3, r2
 800524c:	f040 80be 	bne.w	80053cc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005250:	2101      	movs	r1, #1
 8005252:	2000      	movs	r0, #0
 8005254:	f7fb fb9c 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 8005258:	200a      	movs	r0, #10
 800525a:	f001 f8d5 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800525e:	f241 6128 	movw	r1, #5672	; 0x1628
 8005262:	2010      	movs	r0, #16
 8005264:	f7fb fb94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005268:	210e      	movs	r1, #14
 800526a:	2012      	movs	r0, #18
 800526c:	f7fb fb90 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005270:	f640 2139 	movw	r1, #2617	; 0xa39
 8005274:	2013      	movs	r0, #19
 8005276:	f7fb fb8b 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 800527a:	200a      	movs	r0, #10
 800527c:	f001 f8c4 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005280:	2140      	movs	r1, #64	; 0x40
 8005282:	2011      	movs	r0, #17
 8005284:	f7fb fb84 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005288:	2150      	movs	r1, #80	; 0x50
 800528a:	2015      	movs	r0, #21
 800528c:	f7fb fb80 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 8005290:	200a      	movs	r0, #10
 8005292:	f001 f8b9 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005296:	211e      	movs	r1, #30
 8005298:	2012      	movs	r0, #18
 800529a:	f7fb fb79 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 800529e:	200a      	movs	r0, #10
 80052a0:	f001 f8b2 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80052a4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80052a8:	2010      	movs	r0, #16
 80052aa:	f7fb fb71 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80052ae:	f642 2139 	movw	r1, #10809	; 0x2a39
 80052b2:	2013      	movs	r0, #19
 80052b4:	f7fb fb6c 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 80052b8:	200a      	movs	r0, #10
 80052ba:	f001 f8a5 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80052be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052c2:	2001      	movs	r0, #1
 80052c4:	f7fb fb64 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80052c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052cc:	2002      	movs	r0, #2
 80052ce:	f7fb fb5f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80052d2:	f241 0138 	movw	r1, #4152	; 0x1038
 80052d6:	2003      	movs	r0, #3
 80052d8:	f7fb fb5a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80052dc:	f240 2102 	movw	r1, #514	; 0x202
 80052e0:	2008      	movs	r0, #8
 80052e2:	f7fb fb55 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80052e6:	2108      	movs	r1, #8
 80052e8:	200a      	movs	r0, #10
 80052ea:	f7fb fb51 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80052ee:	2100      	movs	r1, #0
 80052f0:	2030      	movs	r0, #48	; 0x30
 80052f2:	f7fb fb4d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80052f6:	f240 4102 	movw	r1, #1026	; 0x402
 80052fa:	2031      	movs	r0, #49	; 0x31
 80052fc:	f7fb fb48 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005300:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005304:	2032      	movs	r0, #50	; 0x32
 8005306:	f7fb fb43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800530a:	f240 5103 	movw	r1, #1283	; 0x503
 800530e:	2033      	movs	r0, #51	; 0x33
 8005310:	f7fb fb3e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005314:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005318:	2034      	movs	r0, #52	; 0x34
 800531a:	f7fb fb39 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800531e:	f240 3101 	movw	r1, #769	; 0x301
 8005322:	2035      	movs	r0, #53	; 0x35
 8005324:	f7fb fb34 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005328:	f240 7107 	movw	r1, #1799	; 0x707
 800532c:	2036      	movs	r0, #54	; 0x36
 800532e:	f7fb fb2f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005332:	f240 3105 	movw	r1, #773	; 0x305
 8005336:	2037      	movs	r0, #55	; 0x37
 8005338:	f7fb fb2a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800533c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005340:	2038      	movs	r0, #56	; 0x38
 8005342:	f7fb fb25 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005346:	f640 710b 	movw	r1, #3851	; 0xf0b
 800534a:	2039      	movs	r0, #57	; 0x39
 800534c:	f7fb fb20 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005350:	2102      	movs	r1, #2
 8005352:	2041      	movs	r0, #65	; 0x41
 8005354:	f7fb fb1c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005358:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800535c:	2060      	movs	r0, #96	; 0x60
 800535e:	f7fb fb17 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005362:	2101      	movs	r1, #1
 8005364:	2061      	movs	r0, #97	; 0x61
 8005366:	f7fb fb13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800536a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800536e:	2090      	movs	r0, #144	; 0x90
 8005370:	f7fb fb0e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005374:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005378:	2092      	movs	r0, #146	; 0x92
 800537a:	f7fb fb09 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800537e:	2104      	movs	r1, #4
 8005380:	2093      	movs	r0, #147	; 0x93
 8005382:	f7fb fb05 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800538a:	20a0      	movs	r0, #160	; 0xa0
 800538c:	f7fb fb00 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005390:	2101      	movs	r1, #1
 8005392:	2007      	movs	r0, #7
 8005394:	f7fb fafc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005398:	2121      	movs	r1, #33	; 0x21
 800539a:	2007      	movs	r0, #7
 800539c:	f7fb faf8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80053a0:	2123      	movs	r1, #35	; 0x23
 80053a2:	2007      	movs	r0, #7
 80053a4:	f7fb faf4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80053a8:	2133      	movs	r1, #51	; 0x33
 80053aa:	2007      	movs	r0, #7
 80053ac:	f7fb faf0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80053b0:	f240 1133 	movw	r1, #307	; 0x133
 80053b4:	2007      	movs	r0, #7
 80053b6:	f7fb faeb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80053ba:	2100      	movs	r1, #0
 80053bc:	20a0      	movs	r0, #160	; 0xa0
 80053be:	f7fb fae7 	bl	8000990 <LCD_WriteReg>
 80053c2:	f000 bc6b 	b.w	8005c9c <LCD_Init+0x3e34>
 80053c6:	bf00      	nop
 80053c8:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x4535) {
 80053cc:	4b5b      	ldr	r3, [pc, #364]	; (800553c <LCD_Init+0x36d4>)
 80053ce:	889b      	ldrh	r3, [r3, #4]
 80053d0:	f244 5235 	movw	r2, #17717	; 0x4535
 80053d4:	4293      	cmp	r3, r2
 80053d6:	f040 80b3 	bne.w	8005540 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80053da:	2130      	movs	r1, #48	; 0x30
 80053dc:	2015      	movs	r0, #21
 80053de:	f7fb fad7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80053e2:	2110      	movs	r1, #16
 80053e4:	209a      	movs	r0, #154	; 0x9a
 80053e6:	f7fb fad3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80053ea:	2120      	movs	r1, #32
 80053ec:	2011      	movs	r0, #17
 80053ee:	f7fb facf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80053f2:	f243 4128 	movw	r1, #13352	; 0x3428
 80053f6:	2010      	movs	r0, #16
 80053f8:	f7fb faca 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80053fc:	2102      	movs	r1, #2
 80053fe:	2012      	movs	r0, #18
 8005400:	f7fb fac6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005404:	f241 0138 	movw	r1, #4152	; 0x1038
 8005408:	2013      	movs	r0, #19
 800540a:	f7fb fac1 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(40);
 800540e:	2028      	movs	r0, #40	; 0x28
 8005410:	f000 fffa 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005414:	2112      	movs	r1, #18
 8005416:	2012      	movs	r0, #18
 8005418:	f7fb faba 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(40);
 800541c:	2028      	movs	r0, #40	; 0x28
 800541e:	f000 fff3 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005422:	f243 4120 	movw	r1, #13344	; 0x3420
 8005426:	2010      	movs	r0, #16
 8005428:	f7fb fab2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800542c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005430:	2013      	movs	r0, #19
 8005432:	f7fb faad 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(70);
 8005436:	2046      	movs	r0, #70	; 0x46
 8005438:	f000 ffe6 	bl	8006408 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800543c:	2100      	movs	r1, #0
 800543e:	2030      	movs	r0, #48	; 0x30
 8005440:	f7fb faa6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005444:	f240 4102 	movw	r1, #1026	; 0x402
 8005448:	2031      	movs	r0, #49	; 0x31
 800544a:	f7fb faa1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800544e:	f240 3107 	movw	r1, #775	; 0x307
 8005452:	2032      	movs	r0, #50	; 0x32
 8005454:	f7fb fa9c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005458:	f44f 7141 	mov.w	r1, #772	; 0x304
 800545c:	2033      	movs	r0, #51	; 0x33
 800545e:	f7fb fa97 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005462:	2104      	movs	r1, #4
 8005464:	2034      	movs	r0, #52	; 0x34
 8005466:	f7fb fa93 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800546a:	f240 4101 	movw	r1, #1025	; 0x401
 800546e:	2035      	movs	r0, #53	; 0x35
 8005470:	f7fb fa8e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005474:	f240 7107 	movw	r1, #1799	; 0x707
 8005478:	2036      	movs	r0, #54	; 0x36
 800547a:	f7fb fa89 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800547e:	f240 3105 	movw	r1, #773	; 0x305
 8005482:	2037      	movs	r0, #55	; 0x37
 8005484:	f7fb fa84 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005488:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800548c:	2038      	movs	r0, #56	; 0x38
 800548e:	f7fb fa7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005492:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005496:	2039      	movs	r0, #57	; 0x39
 8005498:	f7fb fa7a 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800549c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054a0:	2001      	movs	r0, #1
 80054a2:	f7fb fa75 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80054a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054aa:	2002      	movs	r0, #2
 80054ac:	f7fb fa70 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80054b0:	f241 0130 	movw	r1, #4144	; 0x1030
 80054b4:	2003      	movs	r0, #3
 80054b6:	f7fb fa6b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80054ba:	f640 0108 	movw	r1, #2056	; 0x808
 80054be:	2008      	movs	r0, #8
 80054c0:	f7fb fa66 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80054c4:	2108      	movs	r1, #8
 80054c6:	200a      	movs	r0, #10
 80054c8:	f7fb fa62 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80054cc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80054d0:	2060      	movs	r0, #96	; 0x60
 80054d2:	f7fb fa5d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80054d6:	2101      	movs	r1, #1
 80054d8:	2061      	movs	r0, #97	; 0x61
 80054da:	f7fb fa59 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80054de:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80054e2:	2090      	movs	r0, #144	; 0x90
 80054e4:	f7fb fa54 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80054e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ec:	2092      	movs	r0, #146	; 0x92
 80054ee:	f7fb fa4f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80054f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054f6:	2093      	movs	r0, #147	; 0x93
 80054f8:	f7fb fa4a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80054fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005500:	20a0      	movs	r0, #160	; 0xa0
 8005502:	f7fb fa45 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005506:	2110      	movs	r1, #16
 8005508:	20a3      	movs	r0, #163	; 0xa3
 800550a:	f7fb fa41 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800550e:	2101      	movs	r1, #1
 8005510:	2007      	movs	r0, #7
 8005512:	f7fb fa3d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005516:	2121      	movs	r1, #33	; 0x21
 8005518:	2007      	movs	r0, #7
 800551a:	f7fb fa39 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800551e:	2123      	movs	r1, #35	; 0x23
 8005520:	2007      	movs	r0, #7
 8005522:	f7fb fa35 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005526:	2133      	movs	r1, #51	; 0x33
 8005528:	2007      	movs	r0, #7
 800552a:	f7fb fa31 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800552e:	f240 1133 	movw	r1, #307	; 0x133
 8005532:	2007      	movs	r0, #7
 8005534:	f7fb fa2c 	bl	8000990 <LCD_WriteReg>
 8005538:	e3b0      	b.n	8005c9c <LCD_Init+0x3e34>
 800553a:	bf00      	nop
 800553c:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0X1963) {
 8005540:	4ba8      	ldr	r3, [pc, #672]	; (80057e4 <LCD_Init+0x397c>)
 8005542:	889b      	ldrh	r3, [r3, #4]
 8005544:	f641 1263 	movw	r2, #6499	; 0x1963
 8005548:	4293      	cmp	r3, r2
 800554a:	f040 83a7 	bne.w	8005c9c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800554e:	20e2      	movs	r0, #226	; 0xe2
 8005550:	f7fb f992 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005554:	4ba4      	ldr	r3, [pc, #656]	; (80057e8 <LCD_Init+0x3980>)
 8005556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555a:	611a      	str	r2, [r3, #16]
 800555c:	4ba2      	ldr	r3, [pc, #648]	; (80057e8 <LCD_Init+0x3980>)
 800555e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005562:	615a      	str	r2, [r3, #20]
 8005564:	4ba1      	ldr	r3, [pc, #644]	; (80057ec <LCD_Init+0x3984>)
 8005566:	221d      	movs	r2, #29
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	4b9f      	ldr	r3, [pc, #636]	; (80057e8 <LCD_Init+0x3980>)
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	615a      	str	r2, [r3, #20]
 8005570:	4b9d      	ldr	r3, [pc, #628]	; (80057e8 <LCD_Init+0x3980>)
 8005572:	2280      	movs	r2, #128	; 0x80
 8005574:	611a      	str	r2, [r3, #16]
 8005576:	4b9c      	ldr	r3, [pc, #624]	; (80057e8 <LCD_Init+0x3980>)
 8005578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800557e:	4b9a      	ldr	r3, [pc, #616]	; (80057e8 <LCD_Init+0x3980>)
 8005580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005584:	611a      	str	r2, [r3, #16]
 8005586:	4b98      	ldr	r3, [pc, #608]	; (80057e8 <LCD_Init+0x3980>)
 8005588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800558c:	615a      	str	r2, [r3, #20]
 800558e:	4b97      	ldr	r3, [pc, #604]	; (80057ec <LCD_Init+0x3984>)
 8005590:	2202      	movs	r2, #2
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	4b94      	ldr	r3, [pc, #592]	; (80057e8 <LCD_Init+0x3980>)
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	615a      	str	r2, [r3, #20]
 800559a:	4b93      	ldr	r3, [pc, #588]	; (80057e8 <LCD_Init+0x3980>)
 800559c:	2280      	movs	r2, #128	; 0x80
 800559e:	611a      	str	r2, [r3, #16]
 80055a0:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <LCD_Init+0x3980>)
 80055a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80055a8:	4b8f      	ldr	r3, [pc, #572]	; (80057e8 <LCD_Init+0x3980>)
 80055aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ae:	611a      	str	r2, [r3, #16]
 80055b0:	4b8d      	ldr	r3, [pc, #564]	; (80057e8 <LCD_Init+0x3980>)
 80055b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b6:	615a      	str	r2, [r3, #20]
 80055b8:	4b8c      	ldr	r3, [pc, #560]	; (80057ec <LCD_Init+0x3984>)
 80055ba:	2204      	movs	r2, #4
 80055bc:	60da      	str	r2, [r3, #12]
 80055be:	4b8a      	ldr	r3, [pc, #552]	; (80057e8 <LCD_Init+0x3980>)
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	615a      	str	r2, [r3, #20]
 80055c4:	4b88      	ldr	r3, [pc, #544]	; (80057e8 <LCD_Init+0x3980>)
 80055c6:	2280      	movs	r2, #128	; 0x80
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	4b87      	ldr	r3, [pc, #540]	; (80057e8 <LCD_Init+0x3980>)
 80055cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80055d2:	2001      	movs	r0, #1
 80055d4:	f000 ff18 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80055d8:	20e0      	movs	r0, #224	; 0xe0
 80055da:	f7fb f94d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80055de:	4b82      	ldr	r3, [pc, #520]	; (80057e8 <LCD_Init+0x3980>)
 80055e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e4:	611a      	str	r2, [r3, #16]
 80055e6:	4b80      	ldr	r3, [pc, #512]	; (80057e8 <LCD_Init+0x3980>)
 80055e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ec:	615a      	str	r2, [r3, #20]
 80055ee:	4b7f      	ldr	r3, [pc, #508]	; (80057ec <LCD_Init+0x3984>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	4b7c      	ldr	r3, [pc, #496]	; (80057e8 <LCD_Init+0x3980>)
 80055f6:	2280      	movs	r2, #128	; 0x80
 80055f8:	615a      	str	r2, [r3, #20]
 80055fa:	4b7b      	ldr	r3, [pc, #492]	; (80057e8 <LCD_Init+0x3980>)
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	611a      	str	r2, [r3, #16]
 8005600:	4b79      	ldr	r3, [pc, #484]	; (80057e8 <LCD_Init+0x3980>)
 8005602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005606:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005608:	200a      	movs	r0, #10
 800560a:	f000 fefd 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800560e:	20e0      	movs	r0, #224	; 0xe0
 8005610:	f7fb f932 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005614:	4b74      	ldr	r3, [pc, #464]	; (80057e8 <LCD_Init+0x3980>)
 8005616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800561a:	611a      	str	r2, [r3, #16]
 800561c:	4b72      	ldr	r3, [pc, #456]	; (80057e8 <LCD_Init+0x3980>)
 800561e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005622:	615a      	str	r2, [r3, #20]
 8005624:	4b71      	ldr	r3, [pc, #452]	; (80057ec <LCD_Init+0x3984>)
 8005626:	2203      	movs	r2, #3
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	4b6f      	ldr	r3, [pc, #444]	; (80057e8 <LCD_Init+0x3980>)
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	615a      	str	r2, [r3, #20]
 8005630:	4b6d      	ldr	r3, [pc, #436]	; (80057e8 <LCD_Init+0x3980>)
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	611a      	str	r2, [r3, #16]
 8005636:	4b6c      	ldr	r3, [pc, #432]	; (80057e8 <LCD_Init+0x3980>)
 8005638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800563e:	200c      	movs	r0, #12
 8005640:	f000 fee2 	bl	8006408 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005644:	2001      	movs	r0, #1
 8005646:	f7fb f917 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(10);
 800564a:	200a      	movs	r0, #10
 800564c:	f000 fedc 	bl	8006408 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005650:	20e6      	movs	r0, #230	; 0xe6
 8005652:	f7fb f911 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005656:	4b64      	ldr	r3, [pc, #400]	; (80057e8 <LCD_Init+0x3980>)
 8005658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800565c:	611a      	str	r2, [r3, #16]
 800565e:	4b62      	ldr	r3, [pc, #392]	; (80057e8 <LCD_Init+0x3980>)
 8005660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005664:	615a      	str	r2, [r3, #20]
 8005666:	4b61      	ldr	r3, [pc, #388]	; (80057ec <LCD_Init+0x3984>)
 8005668:	222f      	movs	r2, #47	; 0x2f
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	4b5e      	ldr	r3, [pc, #376]	; (80057e8 <LCD_Init+0x3980>)
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	615a      	str	r2, [r3, #20]
 8005672:	4b5d      	ldr	r3, [pc, #372]	; (80057e8 <LCD_Init+0x3980>)
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	611a      	str	r2, [r3, #16]
 8005678:	4b5b      	ldr	r3, [pc, #364]	; (80057e8 <LCD_Init+0x3980>)
 800567a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005680:	4b59      	ldr	r3, [pc, #356]	; (80057e8 <LCD_Init+0x3980>)
 8005682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005686:	611a      	str	r2, [r3, #16]
 8005688:	4b57      	ldr	r3, [pc, #348]	; (80057e8 <LCD_Init+0x3980>)
 800568a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568e:	615a      	str	r2, [r3, #20]
 8005690:	4b56      	ldr	r3, [pc, #344]	; (80057ec <LCD_Init+0x3984>)
 8005692:	22ff      	movs	r2, #255	; 0xff
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	4b54      	ldr	r3, [pc, #336]	; (80057e8 <LCD_Init+0x3980>)
 8005698:	2280      	movs	r2, #128	; 0x80
 800569a:	615a      	str	r2, [r3, #20]
 800569c:	4b52      	ldr	r3, [pc, #328]	; (80057e8 <LCD_Init+0x3980>)
 800569e:	2280      	movs	r2, #128	; 0x80
 80056a0:	611a      	str	r2, [r3, #16]
 80056a2:	4b51      	ldr	r3, [pc, #324]	; (80057e8 <LCD_Init+0x3980>)
 80056a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80056aa:	4b4f      	ldr	r3, [pc, #316]	; (80057e8 <LCD_Init+0x3980>)
 80056ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056b0:	611a      	str	r2, [r3, #16]
 80056b2:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <LCD_Init+0x3980>)
 80056b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b8:	615a      	str	r2, [r3, #20]
 80056ba:	4b4c      	ldr	r3, [pc, #304]	; (80057ec <LCD_Init+0x3984>)
 80056bc:	22ff      	movs	r2, #255	; 0xff
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <LCD_Init+0x3980>)
 80056c2:	2280      	movs	r2, #128	; 0x80
 80056c4:	615a      	str	r2, [r3, #20]
 80056c6:	4b48      	ldr	r3, [pc, #288]	; (80057e8 <LCD_Init+0x3980>)
 80056c8:	2280      	movs	r2, #128	; 0x80
 80056ca:	611a      	str	r2, [r3, #16]
 80056cc:	4b46      	ldr	r3, [pc, #280]	; (80057e8 <LCD_Init+0x3980>)
 80056ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80056d4:	20b0      	movs	r0, #176	; 0xb0
 80056d6:	f7fb f8cf 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80056da:	4b43      	ldr	r3, [pc, #268]	; (80057e8 <LCD_Init+0x3980>)
 80056dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e0:	611a      	str	r2, [r3, #16]
 80056e2:	4b41      	ldr	r3, [pc, #260]	; (80057e8 <LCD_Init+0x3980>)
 80056e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e8:	615a      	str	r2, [r3, #20]
 80056ea:	4b40      	ldr	r3, [pc, #256]	; (80057ec <LCD_Init+0x3984>)
 80056ec:	2220      	movs	r2, #32
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <LCD_Init+0x3980>)
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	615a      	str	r2, [r3, #20]
 80056f6:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <LCD_Init+0x3980>)
 80056f8:	2280      	movs	r2, #128	; 0x80
 80056fa:	611a      	str	r2, [r3, #16]
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <LCD_Init+0x3980>)
 80056fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005702:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005704:	4b38      	ldr	r3, [pc, #224]	; (80057e8 <LCD_Init+0x3980>)
 8005706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <LCD_Init+0x3980>)
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	615a      	str	r2, [r3, #20]
 8005714:	4b35      	ldr	r3, [pc, #212]	; (80057ec <LCD_Init+0x3984>)
 8005716:	2200      	movs	r2, #0
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <LCD_Init+0x3980>)
 800571c:	2280      	movs	r2, #128	; 0x80
 800571e:	615a      	str	r2, [r3, #20]
 8005720:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <LCD_Init+0x3980>)
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <LCD_Init+0x3980>)
 8005728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <LCD_Init+0x3980>)
 8005730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005734:	611a      	str	r2, [r3, #16]
 8005736:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <LCD_Init+0x3980>)
 8005738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573c:	615a      	str	r2, [r3, #20]
 800573e:	4b2b      	ldr	r3, [pc, #172]	; (80057ec <LCD_Init+0x3984>)
 8005740:	2203      	movs	r2, #3
 8005742:	60da      	str	r2, [r3, #12]
 8005744:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <LCD_Init+0x3980>)
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	615a      	str	r2, [r3, #20]
 800574a:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <LCD_Init+0x3980>)
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	611a      	str	r2, [r3, #16]
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <LCD_Init+0x3980>)
 8005752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005756:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005758:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <LCD_Init+0x3980>)
 800575a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800575e:	611a      	str	r2, [r3, #16]
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <LCD_Init+0x3980>)
 8005762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005766:	615a      	str	r2, [r3, #20]
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <LCD_Init+0x3984>)
 800576a:	f240 321f 	movw	r2, #799	; 0x31f
 800576e:	60da      	str	r2, [r3, #12]
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <LCD_Init+0x3980>)
 8005772:	2280      	movs	r2, #128	; 0x80
 8005774:	615a      	str	r2, [r3, #20]
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <LCD_Init+0x3980>)
 8005778:	2280      	movs	r2, #128	; 0x80
 800577a:	611a      	str	r2, [r3, #16]
 800577c:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <LCD_Init+0x3980>)
 800577e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005782:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005784:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <LCD_Init+0x3980>)
 8005786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800578a:	611a      	str	r2, [r3, #16]
 800578c:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <LCD_Init+0x3980>)
 800578e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005792:	615a      	str	r2, [r3, #20]
 8005794:	4b15      	ldr	r3, [pc, #84]	; (80057ec <LCD_Init+0x3984>)
 8005796:	2201      	movs	r2, #1
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <LCD_Init+0x3980>)
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	615a      	str	r2, [r3, #20]
 80057a0:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <LCD_Init+0x3980>)
 80057a2:	2280      	movs	r2, #128	; 0x80
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <LCD_Init+0x3980>)
 80057a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <LCD_Init+0x3980>)
 80057b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b4:	611a      	str	r2, [r3, #16]
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <LCD_Init+0x3980>)
 80057b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057bc:	615a      	str	r2, [r3, #20]
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <LCD_Init+0x3984>)
 80057c0:	f240 12df 	movw	r2, #479	; 0x1df
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <LCD_Init+0x3980>)
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	615a      	str	r2, [r3, #20]
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <LCD_Init+0x3980>)
 80057ce:	2280      	movs	r2, #128	; 0x80
 80057d0:	611a      	str	r2, [r3, #16]
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <LCD_Init+0x3980>)
 80057d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80057da:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <LCD_Init+0x3980>)
 80057dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057e0:	e006      	b.n	80057f0 <LCD_Init+0x3988>
 80057e2:	bf00      	nop
 80057e4:	20000080 	.word	0x20000080
 80057e8:	40011000 	.word	0x40011000
 80057ec:	40010c00 	.word	0x40010c00
 80057f0:	611a      	str	r2, [r3, #16]
 80057f2:	4ba3      	ldr	r3, [pc, #652]	; (8005a80 <LCD_Init+0x3c18>)
 80057f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f8:	615a      	str	r2, [r3, #20]
 80057fa:	4ba2      	ldr	r3, [pc, #648]	; (8005a84 <LCD_Init+0x3c1c>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	4b9f      	ldr	r3, [pc, #636]	; (8005a80 <LCD_Init+0x3c18>)
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	615a      	str	r2, [r3, #20]
 8005806:	4b9e      	ldr	r3, [pc, #632]	; (8005a80 <LCD_Init+0x3c18>)
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	611a      	str	r2, [r3, #16]
 800580c:	4b9c      	ldr	r3, [pc, #624]	; (8005a80 <LCD_Init+0x3c18>)
 800580e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005812:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005814:	20b4      	movs	r0, #180	; 0xb4
 8005816:	f7fb f82f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800581a:	4b99      	ldr	r3, [pc, #612]	; (8005a80 <LCD_Init+0x3c18>)
 800581c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005820:	611a      	str	r2, [r3, #16]
 8005822:	4b97      	ldr	r3, [pc, #604]	; (8005a80 <LCD_Init+0x3c18>)
 8005824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005828:	615a      	str	r2, [r3, #20]
 800582a:	4b96      	ldr	r3, [pc, #600]	; (8005a84 <LCD_Init+0x3c1c>)
 800582c:	2204      	movs	r2, #4
 800582e:	60da      	str	r2, [r3, #12]
 8005830:	4b93      	ldr	r3, [pc, #588]	; (8005a80 <LCD_Init+0x3c18>)
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	615a      	str	r2, [r3, #20]
 8005836:	4b92      	ldr	r3, [pc, #584]	; (8005a80 <LCD_Init+0x3c18>)
 8005838:	2280      	movs	r2, #128	; 0x80
 800583a:	611a      	str	r2, [r3, #16]
 800583c:	4b90      	ldr	r3, [pc, #576]	; (8005a80 <LCD_Init+0x3c18>)
 800583e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005842:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005844:	4b8e      	ldr	r3, [pc, #568]	; (8005a80 <LCD_Init+0x3c18>)
 8005846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800584a:	611a      	str	r2, [r3, #16]
 800584c:	4b8c      	ldr	r3, [pc, #560]	; (8005a80 <LCD_Init+0x3c18>)
 800584e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005852:	615a      	str	r2, [r3, #20]
 8005854:	4b8b      	ldr	r3, [pc, #556]	; (8005a84 <LCD_Init+0x3c1c>)
 8005856:	f240 421f 	movw	r2, #1055	; 0x41f
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	4b88      	ldr	r3, [pc, #544]	; (8005a80 <LCD_Init+0x3c18>)
 800585e:	2280      	movs	r2, #128	; 0x80
 8005860:	615a      	str	r2, [r3, #20]
 8005862:	4b87      	ldr	r3, [pc, #540]	; (8005a80 <LCD_Init+0x3c18>)
 8005864:	2280      	movs	r2, #128	; 0x80
 8005866:	611a      	str	r2, [r3, #16]
 8005868:	4b85      	ldr	r3, [pc, #532]	; (8005a80 <LCD_Init+0x3c18>)
 800586a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800586e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005870:	4b83      	ldr	r3, [pc, #524]	; (8005a80 <LCD_Init+0x3c18>)
 8005872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005876:	611a      	str	r2, [r3, #16]
 8005878:	4b81      	ldr	r3, [pc, #516]	; (8005a80 <LCD_Init+0x3c18>)
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	615a      	str	r2, [r3, #20]
 8005880:	4b80      	ldr	r3, [pc, #512]	; (8005a84 <LCD_Init+0x3c1c>)
 8005882:	2200      	movs	r2, #0
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	4b7e      	ldr	r3, [pc, #504]	; (8005a80 <LCD_Init+0x3c18>)
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	615a      	str	r2, [r3, #20]
 800588c:	4b7c      	ldr	r3, [pc, #496]	; (8005a80 <LCD_Init+0x3c18>)
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	611a      	str	r2, [r3, #16]
 8005892:	4b7b      	ldr	r3, [pc, #492]	; (8005a80 <LCD_Init+0x3c18>)
 8005894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005898:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800589a:	4b79      	ldr	r3, [pc, #484]	; (8005a80 <LCD_Init+0x3c18>)
 800589c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a0:	611a      	str	r2, [r3, #16]
 80058a2:	4b77      	ldr	r3, [pc, #476]	; (8005a80 <LCD_Init+0x3c18>)
 80058a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a8:	615a      	str	r2, [r3, #20]
 80058aa:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <LCD_Init+0x3c1c>)
 80058ac:	222e      	movs	r2, #46	; 0x2e
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	4b73      	ldr	r3, [pc, #460]	; (8005a80 <LCD_Init+0x3c18>)
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	615a      	str	r2, [r3, #20]
 80058b6:	4b72      	ldr	r3, [pc, #456]	; (8005a80 <LCD_Init+0x3c18>)
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	611a      	str	r2, [r3, #16]
 80058bc:	4b70      	ldr	r3, [pc, #448]	; (8005a80 <LCD_Init+0x3c18>)
 80058be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80058c4:	4b6e      	ldr	r3, [pc, #440]	; (8005a80 <LCD_Init+0x3c18>)
 80058c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ca:	611a      	str	r2, [r3, #16]
 80058cc:	4b6c      	ldr	r3, [pc, #432]	; (8005a80 <LCD_Init+0x3c18>)
 80058ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d2:	615a      	str	r2, [r3, #20]
 80058d4:	4b6b      	ldr	r3, [pc, #428]	; (8005a84 <LCD_Init+0x3c1c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	4b69      	ldr	r3, [pc, #420]	; (8005a80 <LCD_Init+0x3c18>)
 80058dc:	2280      	movs	r2, #128	; 0x80
 80058de:	615a      	str	r2, [r3, #20]
 80058e0:	4b67      	ldr	r3, [pc, #412]	; (8005a80 <LCD_Init+0x3c18>)
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	4b66      	ldr	r3, [pc, #408]	; (8005a80 <LCD_Init+0x3c18>)
 80058e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058ee:	4b64      	ldr	r3, [pc, #400]	; (8005a80 <LCD_Init+0x3c18>)
 80058f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f4:	611a      	str	r2, [r3, #16]
 80058f6:	4b62      	ldr	r3, [pc, #392]	; (8005a80 <LCD_Init+0x3c18>)
 80058f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fc:	615a      	str	r2, [r3, #20]
 80058fe:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <LCD_Init+0x3c1c>)
 8005900:	2200      	movs	r2, #0
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	4b5e      	ldr	r3, [pc, #376]	; (8005a80 <LCD_Init+0x3c18>)
 8005906:	2280      	movs	r2, #128	; 0x80
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	4b5d      	ldr	r3, [pc, #372]	; (8005a80 <LCD_Init+0x3c18>)
 800590c:	2280      	movs	r2, #128	; 0x80
 800590e:	611a      	str	r2, [r3, #16]
 8005910:	4b5b      	ldr	r3, [pc, #364]	; (8005a80 <LCD_Init+0x3c18>)
 8005912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005916:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005918:	4b59      	ldr	r3, [pc, #356]	; (8005a80 <LCD_Init+0x3c18>)
 800591a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800591e:	611a      	str	r2, [r3, #16]
 8005920:	4b57      	ldr	r3, [pc, #348]	; (8005a80 <LCD_Init+0x3c18>)
 8005922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005926:	615a      	str	r2, [r3, #20]
 8005928:	4b56      	ldr	r3, [pc, #344]	; (8005a84 <LCD_Init+0x3c1c>)
 800592a:	2200      	movs	r2, #0
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	4b54      	ldr	r3, [pc, #336]	; (8005a80 <LCD_Init+0x3c18>)
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	615a      	str	r2, [r3, #20]
 8005934:	4b52      	ldr	r3, [pc, #328]	; (8005a80 <LCD_Init+0x3c18>)
 8005936:	2280      	movs	r2, #128	; 0x80
 8005938:	611a      	str	r2, [r3, #16]
 800593a:	4b51      	ldr	r3, [pc, #324]	; (8005a80 <LCD_Init+0x3c18>)
 800593c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005940:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005942:	4b4f      	ldr	r3, [pc, #316]	; (8005a80 <LCD_Init+0x3c18>)
 8005944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	4b4d      	ldr	r3, [pc, #308]	; (8005a80 <LCD_Init+0x3c18>)
 800594c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005950:	615a      	str	r2, [r3, #20]
 8005952:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <LCD_Init+0x3c1c>)
 8005954:	2200      	movs	r2, #0
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	4b49      	ldr	r3, [pc, #292]	; (8005a80 <LCD_Init+0x3c18>)
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	615a      	str	r2, [r3, #20]
 800595e:	4b48      	ldr	r3, [pc, #288]	; (8005a80 <LCD_Init+0x3c18>)
 8005960:	2280      	movs	r2, #128	; 0x80
 8005962:	611a      	str	r2, [r3, #16]
 8005964:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <LCD_Init+0x3c18>)
 8005966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 800596c:	20b6      	movs	r0, #182	; 0xb6
 800596e:	f7fa ff83 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005972:	4b43      	ldr	r3, [pc, #268]	; (8005a80 <LCD_Init+0x3c18>)
 8005974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005978:	611a      	str	r2, [r3, #16]
 800597a:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <LCD_Init+0x3c18>)
 800597c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005980:	615a      	str	r2, [r3, #20]
 8005982:	4b40      	ldr	r3, [pc, #256]	; (8005a84 <LCD_Init+0x3c1c>)
 8005984:	2202      	movs	r2, #2
 8005986:	60da      	str	r2, [r3, #12]
 8005988:	4b3d      	ldr	r3, [pc, #244]	; (8005a80 <LCD_Init+0x3c18>)
 800598a:	2280      	movs	r2, #128	; 0x80
 800598c:	615a      	str	r2, [r3, #20]
 800598e:	4b3c      	ldr	r3, [pc, #240]	; (8005a80 <LCD_Init+0x3c18>)
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	611a      	str	r2, [r3, #16]
 8005994:	4b3a      	ldr	r3, [pc, #232]	; (8005a80 <LCD_Init+0x3c18>)
 8005996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800599c:	4b38      	ldr	r3, [pc, #224]	; (8005a80 <LCD_Init+0x3c18>)
 800599e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a2:	611a      	str	r2, [r3, #16]
 80059a4:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <LCD_Init+0x3c18>)
 80059a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059aa:	615a      	str	r2, [r3, #20]
 80059ac:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <LCD_Init+0x3c1c>)
 80059ae:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	4b32      	ldr	r3, [pc, #200]	; (8005a80 <LCD_Init+0x3c18>)
 80059b6:	2280      	movs	r2, #128	; 0x80
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <LCD_Init+0x3c18>)
 80059bc:	2280      	movs	r2, #128	; 0x80
 80059be:	611a      	str	r2, [r3, #16]
 80059c0:	4b2f      	ldr	r3, [pc, #188]	; (8005a80 <LCD_Init+0x3c18>)
 80059c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 80059c8:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <LCD_Init+0x3c18>)
 80059ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ce:	611a      	str	r2, [r3, #16]
 80059d0:	4b2b      	ldr	r3, [pc, #172]	; (8005a80 <LCD_Init+0x3c18>)
 80059d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d6:	615a      	str	r2, [r3, #20]
 80059d8:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <LCD_Init+0x3c1c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	4b28      	ldr	r3, [pc, #160]	; (8005a80 <LCD_Init+0x3c18>)
 80059e0:	2280      	movs	r2, #128	; 0x80
 80059e2:	615a      	str	r2, [r3, #20]
 80059e4:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <LCD_Init+0x3c18>)
 80059e6:	2280      	movs	r2, #128	; 0x80
 80059e8:	611a      	str	r2, [r3, #16]
 80059ea:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <LCD_Init+0x3c18>)
 80059ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <LCD_Init+0x3c18>)
 80059f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f8:	611a      	str	r2, [r3, #16]
 80059fa:	4b21      	ldr	r3, [pc, #132]	; (8005a80 <LCD_Init+0x3c18>)
 80059fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a00:	615a      	str	r2, [r3, #20]
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <LCD_Init+0x3c1c>)
 8005a04:	2217      	movs	r2, #23
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <LCD_Init+0x3c18>)
 8005a0a:	2280      	movs	r2, #128	; 0x80
 8005a0c:	615a      	str	r2, [r3, #20]
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <LCD_Init+0x3c18>)
 8005a10:	2280      	movs	r2, #128	; 0x80
 8005a12:	611a      	str	r2, [r3, #16]
 8005a14:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <LCD_Init+0x3c18>)
 8005a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005a1c:	4b18      	ldr	r3, [pc, #96]	; (8005a80 <LCD_Init+0x3c18>)
 8005a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <LCD_Init+0x3c18>)
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	615a      	str	r2, [r3, #20]
 8005a2c:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <LCD_Init+0x3c1c>)
 8005a2e:	2215      	movs	r2, #21
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <LCD_Init+0x3c18>)
 8005a34:	2280      	movs	r2, #128	; 0x80
 8005a36:	615a      	str	r2, [r3, #20]
 8005a38:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <LCD_Init+0x3c18>)
 8005a3a:	2280      	movs	r2, #128	; 0x80
 8005a3c:	611a      	str	r2, [r3, #16]
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <LCD_Init+0x3c18>)
 8005a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a44:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a46:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <LCD_Init+0x3c18>)
 8005a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <LCD_Init+0x3c18>)
 8005a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a54:	615a      	str	r2, [r3, #20]
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <LCD_Init+0x3c1c>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <LCD_Init+0x3c18>)
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	615a      	str	r2, [r3, #20]
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <LCD_Init+0x3c18>)
 8005a64:	2280      	movs	r2, #128	; 0x80
 8005a66:	611a      	str	r2, [r3, #16]
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <LCD_Init+0x3c18>)
 8005a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <LCD_Init+0x3c18>)
 8005a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a76:	611a      	str	r2, [r3, #16]
 8005a78:	4b01      	ldr	r3, [pc, #4]	; (8005a80 <LCD_Init+0x3c18>)
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	e003      	b.n	8005a88 <LCD_Init+0x3c20>
 8005a80:	40011000 	.word	0x40011000
 8005a84:	40010c00 	.word	0x40010c00
 8005a88:	615a      	str	r2, [r3, #20]
 8005a8a:	4b8b      	ldr	r3, [pc, #556]	; (8005cb8 <LCD_Init+0x3e50>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	60da      	str	r2, [r3, #12]
 8005a90:	4b8a      	ldr	r3, [pc, #552]	; (8005cbc <LCD_Init+0x3e54>)
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	615a      	str	r2, [r3, #20]
 8005a96:	4b89      	ldr	r3, [pc, #548]	; (8005cbc <LCD_Init+0x3e54>)
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	611a      	str	r2, [r3, #16]
 8005a9c:	4b87      	ldr	r3, [pc, #540]	; (8005cbc <LCD_Init+0x3e54>)
 8005a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005aa4:	20f0      	movs	r0, #240	; 0xf0
 8005aa6:	f7fa fee7 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005aaa:	4b84      	ldr	r3, [pc, #528]	; (8005cbc <LCD_Init+0x3e54>)
 8005aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab0:	611a      	str	r2, [r3, #16]
 8005ab2:	4b82      	ldr	r3, [pc, #520]	; (8005cbc <LCD_Init+0x3e54>)
 8005ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab8:	615a      	str	r2, [r3, #20]
 8005aba:	4b7f      	ldr	r3, [pc, #508]	; (8005cb8 <LCD_Init+0x3e50>)
 8005abc:	2203      	movs	r2, #3
 8005abe:	60da      	str	r2, [r3, #12]
 8005ac0:	4b7e      	ldr	r3, [pc, #504]	; (8005cbc <LCD_Init+0x3e54>)
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	615a      	str	r2, [r3, #20]
 8005ac6:	4b7d      	ldr	r3, [pc, #500]	; (8005cbc <LCD_Init+0x3e54>)
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	611a      	str	r2, [r3, #16]
 8005acc:	4b7b      	ldr	r3, [pc, #492]	; (8005cbc <LCD_Init+0x3e54>)
 8005ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005ad4:	2029      	movs	r0, #41	; 0x29
 8005ad6:	f7fa fecf 	bl	8000878 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005ada:	20d0      	movs	r0, #208	; 0xd0
 8005adc:	f7fa fecc 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005ae0:	4b76      	ldr	r3, [pc, #472]	; (8005cbc <LCD_Init+0x3e54>)
 8005ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae6:	611a      	str	r2, [r3, #16]
 8005ae8:	4b74      	ldr	r3, [pc, #464]	; (8005cbc <LCD_Init+0x3e54>)
 8005aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aee:	615a      	str	r2, [r3, #20]
 8005af0:	4b71      	ldr	r3, [pc, #452]	; (8005cb8 <LCD_Init+0x3e50>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	4b71      	ldr	r3, [pc, #452]	; (8005cbc <LCD_Init+0x3e54>)
 8005af8:	2280      	movs	r2, #128	; 0x80
 8005afa:	615a      	str	r2, [r3, #20]
 8005afc:	4b6f      	ldr	r3, [pc, #444]	; (8005cbc <LCD_Init+0x3e54>)
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	611a      	str	r2, [r3, #16]
 8005b02:	4b6e      	ldr	r3, [pc, #440]	; (8005cbc <LCD_Init+0x3e54>)
 8005b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b08:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005b0a:	20be      	movs	r0, #190	; 0xbe
 8005b0c:	f7fa feb4 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005b10:	4b6a      	ldr	r3, [pc, #424]	; (8005cbc <LCD_Init+0x3e54>)
 8005b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b16:	611a      	str	r2, [r3, #16]
 8005b18:	4b68      	ldr	r3, [pc, #416]	; (8005cbc <LCD_Init+0x3e54>)
 8005b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1e:	615a      	str	r2, [r3, #20]
 8005b20:	4b65      	ldr	r3, [pc, #404]	; (8005cb8 <LCD_Init+0x3e50>)
 8005b22:	2205      	movs	r2, #5
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <LCD_Init+0x3e54>)
 8005b28:	2280      	movs	r2, #128	; 0x80
 8005b2a:	615a      	str	r2, [r3, #20]
 8005b2c:	4b63      	ldr	r3, [pc, #396]	; (8005cbc <LCD_Init+0x3e54>)
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	4b62      	ldr	r3, [pc, #392]	; (8005cbc <LCD_Init+0x3e54>)
 8005b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005b3a:	4b60      	ldr	r3, [pc, #384]	; (8005cbc <LCD_Init+0x3e54>)
 8005b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b40:	611a      	str	r2, [r3, #16]
 8005b42:	4b5e      	ldr	r3, [pc, #376]	; (8005cbc <LCD_Init+0x3e54>)
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	615a      	str	r2, [r3, #20]
 8005b4a:	4b5b      	ldr	r3, [pc, #364]	; (8005cb8 <LCD_Init+0x3e50>)
 8005b4c:	22fe      	movs	r2, #254	; 0xfe
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	4b5a      	ldr	r3, [pc, #360]	; (8005cbc <LCD_Init+0x3e54>)
 8005b52:	2280      	movs	r2, #128	; 0x80
 8005b54:	615a      	str	r2, [r3, #20]
 8005b56:	4b59      	ldr	r3, [pc, #356]	; (8005cbc <LCD_Init+0x3e54>)
 8005b58:	2280      	movs	r2, #128	; 0x80
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	4b57      	ldr	r3, [pc, #348]	; (8005cbc <LCD_Init+0x3e54>)
 8005b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005b64:	4b55      	ldr	r3, [pc, #340]	; (8005cbc <LCD_Init+0x3e54>)
 8005b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b6a:	611a      	str	r2, [r3, #16]
 8005b6c:	4b53      	ldr	r3, [pc, #332]	; (8005cbc <LCD_Init+0x3e54>)
 8005b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b72:	615a      	str	r2, [r3, #20]
 8005b74:	4b50      	ldr	r3, [pc, #320]	; (8005cb8 <LCD_Init+0x3e50>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	4b50      	ldr	r3, [pc, #320]	; (8005cbc <LCD_Init+0x3e54>)
 8005b7c:	2280      	movs	r2, #128	; 0x80
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	4b4e      	ldr	r3, [pc, #312]	; (8005cbc <LCD_Init+0x3e54>)
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	4b4d      	ldr	r3, [pc, #308]	; (8005cbc <LCD_Init+0x3e54>)
 8005b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <LCD_Init+0x3e54>)
 8005b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b94:	611a      	str	r2, [r3, #16]
 8005b96:	4b49      	ldr	r3, [pc, #292]	; (8005cbc <LCD_Init+0x3e54>)
 8005b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9c:	615a      	str	r2, [r3, #20]
 8005b9e:	4b46      	ldr	r3, [pc, #280]	; (8005cb8 <LCD_Init+0x3e50>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	60da      	str	r2, [r3, #12]
 8005ba4:	4b45      	ldr	r3, [pc, #276]	; (8005cbc <LCD_Init+0x3e54>)
 8005ba6:	2280      	movs	r2, #128	; 0x80
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	4b44      	ldr	r3, [pc, #272]	; (8005cbc <LCD_Init+0x3e54>)
 8005bac:	2280      	movs	r2, #128	; 0x80
 8005bae:	611a      	str	r2, [r3, #16]
 8005bb0:	4b42      	ldr	r3, [pc, #264]	; (8005cbc <LCD_Init+0x3e54>)
 8005bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005bb8:	4b40      	ldr	r3, [pc, #256]	; (8005cbc <LCD_Init+0x3e54>)
 8005bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bbe:	611a      	str	r2, [r3, #16]
 8005bc0:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <LCD_Init+0x3e54>)
 8005bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc6:	615a      	str	r2, [r3, #20]
 8005bc8:	4b3b      	ldr	r3, [pc, #236]	; (8005cb8 <LCD_Init+0x3e50>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	4b3b      	ldr	r3, [pc, #236]	; (8005cbc <LCD_Init+0x3e54>)
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	615a      	str	r2, [r3, #20]
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <LCD_Init+0x3e54>)
 8005bd6:	2280      	movs	r2, #128	; 0x80
 8005bd8:	611a      	str	r2, [r3, #16]
 8005bda:	4b38      	ldr	r3, [pc, #224]	; (8005cbc <LCD_Init+0x3e54>)
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005be2:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <LCD_Init+0x3e54>)
 8005be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005be8:	611a      	str	r2, [r3, #16]
 8005bea:	4b34      	ldr	r3, [pc, #208]	; (8005cbc <LCD_Init+0x3e54>)
 8005bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf0:	615a      	str	r2, [r3, #20]
 8005bf2:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <LCD_Init+0x3e50>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	60da      	str	r2, [r3, #12]
 8005bf8:	4b30      	ldr	r3, [pc, #192]	; (8005cbc <LCD_Init+0x3e54>)
 8005bfa:	2280      	movs	r2, #128	; 0x80
 8005bfc:	615a      	str	r2, [r3, #20]
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <LCD_Init+0x3e54>)
 8005c00:	2280      	movs	r2, #128	; 0x80
 8005c02:	611a      	str	r2, [r3, #16]
 8005c04:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <LCD_Init+0x3e54>)
 8005c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005c0c:	20b8      	movs	r0, #184	; 0xb8
 8005c0e:	f7fa fe33 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005c12:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <LCD_Init+0x3e54>)
 8005c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	4b28      	ldr	r3, [pc, #160]	; (8005cbc <LCD_Init+0x3e54>)
 8005c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c20:	615a      	str	r2, [r3, #20]
 8005c22:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <LCD_Init+0x3e50>)
 8005c24:	2203      	movs	r2, #3
 8005c26:	60da      	str	r2, [r3, #12]
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <LCD_Init+0x3e54>)
 8005c2a:	2280      	movs	r2, #128	; 0x80
 8005c2c:	615a      	str	r2, [r3, #20]
 8005c2e:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <LCD_Init+0x3e54>)
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	611a      	str	r2, [r3, #16]
 8005c34:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <LCD_Init+0x3e54>)
 8005c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005c3c:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <LCD_Init+0x3e54>)
 8005c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c42:	611a      	str	r2, [r3, #16]
 8005c44:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <LCD_Init+0x3e54>)
 8005c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4a:	615a      	str	r2, [r3, #20]
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <LCD_Init+0x3e50>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	4b1a      	ldr	r3, [pc, #104]	; (8005cbc <LCD_Init+0x3e54>)
 8005c54:	2280      	movs	r2, #128	; 0x80
 8005c56:	615a      	str	r2, [r3, #20]
 8005c58:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <LCD_Init+0x3e54>)
 8005c5a:	2280      	movs	r2, #128	; 0x80
 8005c5c:	611a      	str	r2, [r3, #16]
 8005c5e:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <LCD_Init+0x3e54>)
 8005c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c64:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005c66:	20ba      	movs	r0, #186	; 0xba
 8005c68:	f7fa fe06 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005c6c:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <LCD_Init+0x3e54>)
 8005c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c72:	611a      	str	r2, [r3, #16]
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <LCD_Init+0x3e54>)
 8005c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7a:	615a      	str	r2, [r3, #20]
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <LCD_Init+0x3e50>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <LCD_Init+0x3e54>)
 8005c84:	2280      	movs	r2, #128	; 0x80
 8005c86:	615a      	str	r2, [r3, #20]
 8005c88:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <LCD_Init+0x3e54>)
 8005c8a:	2280      	movs	r2, #128	; 0x80
 8005c8c:	611a      	str	r2, [r3, #16]
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <LCD_Init+0x3e54>)
 8005c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c94:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005c96:	2064      	movs	r0, #100	; 0x64
 8005c98:	f7fb ff36 	bl	8001b08 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f7fb ffd7 	bl	8001c50 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <LCD_Init+0x3e58>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005ca8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005cac:	f000 f80a 	bl	8005cc4 <LCD_Clear>
}
 8005cb0:	bf00      	nop
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40010c00 	.word	0x40010c00
 8005cbc:	40011000 	.word	0x40011000
 8005cc0:	422201a8 	.word	0x422201a8

08005cc4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005cd2:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <LCD_Clear+0xb8>)
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005cd8:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <LCD_Clear+0xb8>)
 8005cda:	885b      	ldrh	r3, [r3, #2]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005ce6:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <LCD_Clear+0xb8>)
 8005ce8:	889b      	ldrh	r3, [r3, #4]
 8005cea:	f646 0204 	movw	r2, #26628	; 0x6804
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d11a      	bne.n	8005d28 <LCD_Clear+0x64>
 8005cf2:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <LCD_Clear+0xb8>)
 8005cf4:	799b      	ldrb	r3, [r3, #6]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d116      	bne.n	8005d28 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <LCD_Clear+0xb8>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005d00:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <LCD_Clear+0xb8>)
 8005d02:	222a      	movs	r2, #42	; 0x2a
 8005d04:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <LCD_Clear+0xb8>)
 8005d08:	222b      	movs	r2, #43	; 0x2b
 8005d0a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f7fa fe84 	bl	8000a1c <LCD_SetCursor>
		lcddev.dir = 1;
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <LCD_Clear+0xb8>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005d1a:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <LCD_Clear+0xb8>)
 8005d1c:	222b      	movs	r2, #43	; 0x2b
 8005d1e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <LCD_Clear+0xb8>)
 8005d22:	222a      	movs	r2, #42	; 0x2a
 8005d24:	819a      	strh	r2, [r3, #12]
 8005d26:	e003      	b.n	8005d30 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005d28:	2100      	movs	r1, #0
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f7fa fe76 	bl	8000a1c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005d30:	f7fa fe68 	bl	8000a04 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e017      	b.n	8005d6a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005d3a:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <LCD_Clear+0xbc>)
 8005d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d40:	611a      	str	r2, [r3, #16]
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <LCD_Clear+0xbc>)
 8005d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d48:	615a      	str	r2, [r3, #20]
 8005d4a:	4a0e      	ldr	r2, [pc, #56]	; (8005d84 <LCD_Clear+0xc0>)
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	60d3      	str	r3, [r2, #12]
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <LCD_Clear+0xbc>)
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	615a      	str	r2, [r3, #20]
 8005d56:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <LCD_Clear+0xbc>)
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	611a      	str	r2, [r3, #16]
 8005d5c:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <LCD_Clear+0xbc>)
 8005d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d62:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3e3      	bcc.n	8005d3a <LCD_Clear+0x76>
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000080 	.word	0x20000080
 8005d80:	40011000 	.word	0x40011000
 8005d84:	40010c00 	.word	0x40010c00

08005d88 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	80fb      	strh	r3, [r7, #6]
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	80bb      	strh	r3, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	70fb      	strb	r3, [r7, #3]
 8005da2:	4613      	mov	r3, r2
 8005da4:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005da6:	88bb      	ldrh	r3, [r7, #4]
 8005da8:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005daa:	78bb      	ldrb	r3, [r7, #2]
 8005dac:	08db      	lsrs	r3, r3, #3
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	78bb      	ldrb	r3, [r7, #2]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	78ba      	ldrb	r2, [r7, #2]
 8005dca:	0852      	lsrs	r2, r2, #1
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	3b20      	subs	r3, #32
 8005dd8:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005dda:	2300      	movs	r3, #0
 8005ddc:	737b      	strb	r3, [r7, #13]
 8005dde:	e069      	b.n	8005eb4 <LCD_ShowChar+0x12c>
		if (size == 12)
 8005de0:	78bb      	ldrb	r3, [r7, #2]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d10b      	bne.n	8005dfe <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	7b79      	ldrb	r1, [r7, #13]
 8005dea:	4838      	ldr	r0, [pc, #224]	; (8005ecc <LCD_ShowChar+0x144>)
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4403      	add	r3, r0
 8005df6:	440b      	add	r3, r1
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	73fb      	strb	r3, [r7, #15]
 8005dfc:	e019      	b.n	8005e32 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005dfe:	78bb      	ldrb	r3, [r7, #2]
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	d108      	bne.n	8005e16 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	7b7b      	ldrb	r3, [r7, #13]
 8005e08:	4931      	ldr	r1, [pc, #196]	; (8005ed0 <LCD_ShowChar+0x148>)
 8005e0a:	0112      	lsls	r2, r2, #4
 8005e0c:	440a      	add	r2, r1
 8005e0e:	4413      	add	r3, r2
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	73fb      	strb	r3, [r7, #15]
 8005e14:	e00d      	b.n	8005e32 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005e16:	78bb      	ldrb	r3, [r7, #2]
 8005e18:	2b18      	cmp	r3, #24
 8005e1a:	d150      	bne.n	8005ebe <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	7b79      	ldrb	r1, [r7, #13]
 8005e20:	482c      	ldr	r0, [pc, #176]	; (8005ed4 <LCD_ShowChar+0x14c>)
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4403      	add	r3, r0
 8005e2c:	440b      	add	r3, r1
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005e32:	2300      	movs	r3, #0
 8005e34:	73bb      	strb	r3, [r7, #14]
 8005e36:	e035      	b.n	8005ea4 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da07      	bge.n	8005e50 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <LCD_ShowChar+0x150>)
 8005e42:	881a      	ldrh	r2, [r3, #0]
 8005e44:	88b9      	ldrh	r1, [r7, #4]
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fb fbc5 	bl	80015d8 <LCD_Fast_DrawPoint>
 8005e4e:	e00a      	b.n	8005e66 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005e50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005e58:	4b20      	ldr	r3, [pc, #128]	; (8005edc <LCD_ShowChar+0x154>)
 8005e5a:	881a      	ldrh	r2, [r3, #0]
 8005e5c:	88b9      	ldrh	r1, [r7, #4]
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fb fbb9 	bl	80015d8 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
			y++;
 8005e6c:	88bb      	ldrh	r3, [r7, #4]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005e72:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <LCD_ShowChar+0x158>)
 8005e74:	885b      	ldrh	r3, [r3, #2]
 8005e76:	88ba      	ldrh	r2, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d222      	bcs.n	8005ec2 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005e7c:	88ba      	ldrh	r2, [r7, #4]
 8005e7e:	897b      	ldrh	r3, [r7, #10]
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	78bb      	ldrb	r3, [r7, #2]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d10a      	bne.n	8005e9e <LCD_ShowChar+0x116>
				y = y0;
 8005e88:	897b      	ldrh	r3, [r7, #10]
 8005e8a:	80bb      	strh	r3, [r7, #4]
				x++;
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005e92:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <LCD_ShowChar+0x158>)
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d307      	bcc.n	8005eac <LCD_ShowChar+0x124>
					return;	//超区域了
 8005e9c:	e012      	b.n	8005ec4 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	73bb      	strb	r3, [r7, #14]
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b07      	cmp	r3, #7
 8005ea8:	d9c6      	bls.n	8005e38 <LCD_ShowChar+0xb0>
 8005eaa:	e000      	b.n	8005eae <LCD_ShowChar+0x126>
				break;
 8005eac:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005eae:	7b7b      	ldrb	r3, [r7, #13]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	737b      	strb	r3, [r7, #13]
 8005eb4:	7b7a      	ldrb	r2, [r7, #13]
 8005eb6:	7a7b      	ldrb	r3, [r7, #9]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d391      	bcc.n	8005de0 <LCD_ShowChar+0x58>
 8005ebc:	e002      	b.n	8005ec4 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005ec2:	bf00      	nop
			}
		}
	}
}
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd90      	pop	{r4, r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	08007aa4 	.word	0x08007aa4
 8005ed0:	08007f18 	.word	0x08007f18
 8005ed4:	08008508 	.word	0x08008508
 8005ed8:	2000007c 	.word	0x2000007c
 8005edc:	20000000 	.word	0x20000000
 8005ee0:	20000080 	.word	0x20000080

08005ee4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	80fb      	strh	r3, [r7, #6]
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	80bb      	strh	r3, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	807b      	strh	r3, [r7, #2]
 8005efe:	4613      	mov	r3, r2
 8005f00:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	73fb      	strb	r3, [r7, #15]
	width += x;
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	807b      	strh	r3, [r7, #2]
	height += y;
 8005f0e:	883a      	ldrh	r2, [r7, #0]
 8005f10:	88bb      	ldrh	r3, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005f16:	e024      	b.n	8005f62 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8005f18:	88fa      	ldrh	r2, [r7, #6]
 8005f1a:	887b      	ldrh	r3, [r7, #2]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d307      	bcc.n	8005f30 <LCD_ShowString+0x4c>
			x = x0;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	80fb      	strh	r3, [r7, #6]
			y += size;
 8005f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	88bb      	ldrh	r3, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8005f30:	88ba      	ldrh	r2, [r7, #4]
 8005f32:	883b      	ldrh	r3, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d21d      	bcs.n	8005f74 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f40:	88b9      	ldrh	r1, [r7, #4]
 8005f42:	88f8      	ldrh	r0, [r7, #6]
 8005f44:	2400      	movs	r4, #0
 8005f46:	9400      	str	r4, [sp, #0]
 8005f48:	f7ff ff1e 	bl	8005d88 <LCD_ShowChar>
		x += size / 2;
 8005f4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	4413      	add	r3, r2
 8005f5a:	80fb      	strh	r3, [r7, #6]
		p++;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	3301      	adds	r3, #1
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b7e      	cmp	r3, #126	; 0x7e
 8005f68:	d805      	bhi.n	8005f76 <LCD_ShowString+0x92>
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b1f      	cmp	r3, #31
 8005f70:	d8d2      	bhi.n	8005f18 <LCD_ShowString+0x34>
	}
}
 8005f72:	e000      	b.n	8005f76 <LCD_ShowString+0x92>
			break;	//退出
 8005f74:	bf00      	nop
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd90      	pop	{r4, r7, pc}
	...

08005f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f86:	f000 f9dd 	bl	8006344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f8a:	f000 f8d5 	bl	8006138 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8005f8e:	f7fb ff6b 	bl	8001e68 <LCD_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f92:	f7fa fc4f 	bl	8000834 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t x = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (x) {
 8005f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fa0:	2b0b      	cmp	r3, #11
 8005fa2:	f200 8083 	bhi.w	80060ac <main+0x12c>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <main+0x2c>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fdd 	.word	0x08005fdd
 8005fb0:	08005fef 	.word	0x08005fef
 8005fb4:	08005ffd 	.word	0x08005ffd
 8005fb8:	0800600b 	.word	0x0800600b
 8005fbc:	0800601d 	.word	0x0800601d
 8005fc0:	0800602f 	.word	0x0800602f
 8005fc4:	08006041 	.word	0x08006041
 8005fc8:	08006053 	.word	0x08006053
 8005fcc:	08006065 	.word	0x08006065
 8005fd0:	08006077 	.word	0x08006077
 8005fd4:	08006089 	.word	0x08006089
 8005fd8:	0800609b 	.word	0x0800609b
	  case 0: LCD_Clear(WHITE); BACK_COLOR = WHITE; break;
 8005fdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005fe0:	f7ff fe70 	bl	8005cc4 <LCD_Clear>
 8005fe4:	4b4e      	ldr	r3, [pc, #312]	; (8006120 <main+0x1a0>)
 8005fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	e05e      	b.n	80060ac <main+0x12c>
	  case 1: LCD_Clear(BLACK); BACK_COLOR = BLACK; break;
 8005fee:	2000      	movs	r0, #0
 8005ff0:	f7ff fe68 	bl	8005cc4 <LCD_Clear>
 8005ff4:	4b4a      	ldr	r3, [pc, #296]	; (8006120 <main+0x1a0>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	e057      	b.n	80060ac <main+0x12c>
	  case 2: LCD_Clear(BLUE); BACK_COLOR = BLUE; break;
 8005ffc:	201f      	movs	r0, #31
 8005ffe:	f7ff fe61 	bl	8005cc4 <LCD_Clear>
 8006002:	4b47      	ldr	r3, [pc, #284]	; (8006120 <main+0x1a0>)
 8006004:	221f      	movs	r2, #31
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e050      	b.n	80060ac <main+0x12c>
	  case 3: LCD_Clear(RED); BACK_COLOR = RED; break;
 800600a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800600e:	f7ff fe59 	bl	8005cc4 <LCD_Clear>
 8006012:	4b43      	ldr	r3, [pc, #268]	; (8006120 <main+0x1a0>)
 8006014:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	e047      	b.n	80060ac <main+0x12c>
	  case 4: LCD_Clear(MAGENTA); BACK_COLOR = MAGENTA; break;
 800601c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8006020:	f7ff fe50 	bl	8005cc4 <LCD_Clear>
 8006024:	4b3e      	ldr	r3, [pc, #248]	; (8006120 <main+0x1a0>)
 8006026:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e03e      	b.n	80060ac <main+0x12c>
	  case 5: LCD_Clear(GREEN); BACK_COLOR = GREEN; break;
 800602e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006032:	f7ff fe47 	bl	8005cc4 <LCD_Clear>
 8006036:	4b3a      	ldr	r3, [pc, #232]	; (8006120 <main+0x1a0>)
 8006038:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	e035      	b.n	80060ac <main+0x12c>
	  case 6: LCD_Clear(CYAN); BACK_COLOR = CYAN; break;
 8006040:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8006044:	f7ff fe3e 	bl	8005cc4 <LCD_Clear>
 8006048:	4b35      	ldr	r3, [pc, #212]	; (8006120 <main+0x1a0>)
 800604a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e02c      	b.n	80060ac <main+0x12c>
	  case 7: LCD_Clear(YELLOW); BACK_COLOR = YELLOW; break;
 8006052:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006056:	f7ff fe35 	bl	8005cc4 <LCD_Clear>
 800605a:	4b31      	ldr	r3, [pc, #196]	; (8006120 <main+0x1a0>)
 800605c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e023      	b.n	80060ac <main+0x12c>
	  case 8: LCD_Clear(BRRED); BACK_COLOR = BRRED; break;
 8006064:	f64f 4007 	movw	r0, #64519	; 0xfc07
 8006068:	f7ff fe2c 	bl	8005cc4 <LCD_Clear>
 800606c:	4b2c      	ldr	r3, [pc, #176]	; (8006120 <main+0x1a0>)
 800606e:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e01a      	b.n	80060ac <main+0x12c>
	  case 9: LCD_Clear(GRAY); BACK_COLOR = GRAY; break;
 8006076:	f248 4030 	movw	r0, #33840	; 0x8430
 800607a:	f7ff fe23 	bl	8005cc4 <LCD_Clear>
 800607e:	4b28      	ldr	r3, [pc, #160]	; (8006120 <main+0x1a0>)
 8006080:	f248 4230 	movw	r2, #33840	; 0x8430
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e011      	b.n	80060ac <main+0x12c>
	  case 10: LCD_Clear(LGRAY); BACK_COLOR = LGRAY; break;
 8006088:	f24c 6018 	movw	r0, #50712	; 0xc618
 800608c:	f7ff fe1a 	bl	8005cc4 <LCD_Clear>
 8006090:	4b23      	ldr	r3, [pc, #140]	; (8006120 <main+0x1a0>)
 8006092:	f24c 6218 	movw	r2, #50712	; 0xc618
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e008      	b.n	80060ac <main+0x12c>
	  case 11: LCD_Clear(BROWN); BACK_COLOR = BROWN; break;
 800609a:	f64b 4040 	movw	r0, #48192	; 0xbc40
 800609e:	f7ff fe11 	bl	8005cc4 <LCD_Clear>
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <main+0x1a0>)
 80060a4:	f64b 4240 	movw	r2, #48192	; 0xbc40
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	bf00      	nop
	  }//end of switch
	  POINT_COLOR = RED;
 80060ac:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <main+0x1a4>)
 80060ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80060b2:	801a      	strh	r2, [r3, #0]
	  LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "Mini STM32 ^_^");
 80060b4:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <main+0x1a8>)
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	2318      	movs	r3, #24
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2318      	movs	r3, #24
 80060be:	22c8      	movs	r2, #200	; 0xc8
 80060c0:	2128      	movs	r1, #40	; 0x28
 80060c2:	201e      	movs	r0, #30
 80060c4:	f7ff ff0e 	bl	8005ee4 <LCD_ShowString>
	  LCD_ShowString(30, 70, 200, 16, 16, (uint8_t*) "TFTLCD TEST");
 80060c8:	4b18      	ldr	r3, [pc, #96]	; (800612c <main+0x1ac>)
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	2310      	movs	r3, #16
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	2310      	movs	r3, #16
 80060d2:	22c8      	movs	r2, #200	; 0xc8
 80060d4:	2146      	movs	r1, #70	; 0x46
 80060d6:	201e      	movs	r0, #30
 80060d8:	f7ff ff04 	bl	8005ee4 <LCD_ShowString>

	  sprintf(str,"address=0x%X",&GPIOA->CRL);
 80060dc:	1d3b      	adds	r3, r7, #4
 80060de:	4a14      	ldr	r2, [pc, #80]	; (8006130 <main+0x1b0>)
 80060e0:	4914      	ldr	r1, [pc, #80]	; (8006134 <main+0x1b4>)
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 f80a 	bl	80070fc <siprintf>
	  LCD_ShowString(30, 100, 200, 40, 40, (uint8_t*)str);
 80060e8:	1d3b      	adds	r3, r7, #4
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2328      	movs	r3, #40	; 0x28
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2328      	movs	r3, #40	; 0x28
 80060f2:	22c8      	movs	r2, #200	; 0xc8
 80060f4:	2164      	movs	r1, #100	; 0x64
 80060f6:	201e      	movs	r0, #30
 80060f8:	f7ff fef4 	bl	8005ee4 <LCD_ShowString>
//	  LCD_ShowString(30,130,200,40,40,(uint8_t *)str);
	  /* Code of showing address of GPIOA->CRL (represented in hexadecimal) END */
//	  POINT_COLOR = BLACK;
//	  LCD_DrawRectangle(30, 150, 210, 190);
//	  LCD_Fill(31, 151, 209, 189, YELLOW);
	  x++;
 80060fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006100:	3301      	adds	r3, #1
 8006102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if (x == 12)
 8006106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800610a:	2b0c      	cmp	r3, #12
 800610c:	d102      	bne.n	8006114 <main+0x194>
	  x = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  HAL_Delay(2000);
 8006114:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006118:	f000 f976 	bl	8006408 <HAL_Delay>
	  switch (x) {
 800611c:	e73e      	b.n	8005f9c <main+0x1c>
 800611e:	bf00      	nop
 8006120:	20000000 	.word	0x20000000
 8006124:	2000007c 	.word	0x2000007c
 8006128:	08007a78 	.word	0x08007a78
 800612c:	08007a88 	.word	0x08007a88
 8006130:	40010800 	.word	0x40010800
 8006134:	08007a94 	.word	0x08007a94

08006138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b090      	sub	sp, #64	; 0x40
 800613c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800613e:	f107 0318 	add.w	r3, r7, #24
 8006142:	2228      	movs	r2, #40	; 0x28
 8006144:	2100      	movs	r1, #0
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fff8 	bl	800713c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	605a      	str	r2, [r3, #4]
 8006154:	609a      	str	r2, [r3, #8]
 8006156:	60da      	str	r2, [r3, #12]
 8006158:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800615a:	2301      	movs	r3, #1
 800615c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800615e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006162:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006164:	2300      	movs	r3, #0
 8006166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006168:	2301      	movs	r3, #1
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800616c:	2302      	movs	r3, #2
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006176:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800617c:	f107 0318 	add.w	r3, r7, #24
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fbdd 	bl	8006940 <HAL_RCC_OscConfig>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800618c:	f000 f819 	bl	80061c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006190:	230f      	movs	r3, #15
 8006192:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006194:	2302      	movs	r3, #2
 8006196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800619c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80061a6:	1d3b      	adds	r3, r7, #4
 80061a8:	2102      	movs	r1, #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fe4a 	bl	8006e44 <HAL_RCC_ClockConfig>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80061b6:	f000 f804 	bl	80061c2 <Error_Handler>
  }
}
 80061ba:	bf00      	nop
 80061bc:	3740      	adds	r7, #64	; 0x40
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061c2:	b480      	push	{r7}
 80061c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061c6:	b672      	cpsid	i
}
 80061c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80061ca:	e7fe      	b.n	80061ca <Error_Handler+0x8>

080061cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80061d2:	4b15      	ldr	r3, [pc, #84]	; (8006228 <HAL_MspInit+0x5c>)
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	4a14      	ldr	r2, [pc, #80]	; (8006228 <HAL_MspInit+0x5c>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	6193      	str	r3, [r2, #24]
 80061de:	4b12      	ldr	r3, [pc, #72]	; (8006228 <HAL_MspInit+0x5c>)
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <HAL_MspInit+0x5c>)
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <HAL_MspInit+0x5c>)
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f4:	61d3      	str	r3, [r2, #28]
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <HAL_MspInit+0x5c>)
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <HAL_MspInit+0x60>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	4a04      	ldr	r2, [pc, #16]	; (800622c <HAL_MspInit+0x60>)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr
 8006228:	40021000 	.word	0x40021000
 800622c:	40010000 	.word	0x40010000

08006230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006234:	e7fe      	b.n	8006234 <NMI_Handler+0x4>

08006236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800623a:	e7fe      	b.n	800623a <HardFault_Handler+0x4>

0800623c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006240:	e7fe      	b.n	8006240 <MemManage_Handler+0x4>

08006242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006242:	b480      	push	{r7}
 8006244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006246:	e7fe      	b.n	8006246 <BusFault_Handler+0x4>

08006248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800624c:	e7fe      	b.n	800624c <UsageFault_Handler+0x4>

0800624e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800624e:	b480      	push	{r7}
 8006250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr

0800625a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800625a:	b480      	push	{r7}
 800625c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800626a:	bf00      	nop
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr

08006272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006276:	f000 f8ab 	bl	80063d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006288:	4a14      	ldr	r2, [pc, #80]	; (80062dc <_sbrk+0x5c>)
 800628a:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <_sbrk+0x60>)
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006294:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <_sbrk+0x64>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800629c:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <_sbrk+0x64>)
 800629e:	4a12      	ldr	r2, [pc, #72]	; (80062e8 <_sbrk+0x68>)
 80062a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062a2:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <_sbrk+0x64>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d207      	bcs.n	80062c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062b0:	f000 ff4c 	bl	800714c <__errno>
 80062b4:	4603      	mov	r3, r0
 80062b6:	220c      	movs	r2, #12
 80062b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295
 80062be:	e009      	b.n	80062d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062c0:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <_sbrk+0x64>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <_sbrk+0x64>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	4a05      	ldr	r2, [pc, #20]	; (80062e4 <_sbrk+0x64>)
 80062d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	2000c000 	.word	0x2000c000
 80062e0:	00000400 	.word	0x00000400
 80062e4:	20000090 	.word	0x20000090
 80062e8:	200001e0 	.word	0x200001e0

080062ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062f0:	bf00      	nop
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062f8:	f7ff fff8 	bl	80062ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062fc:	480b      	ldr	r0, [pc, #44]	; (800632c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80062fe:	490c      	ldr	r1, [pc, #48]	; (8006330 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006300:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006304:	e002      	b.n	800630c <LoopCopyDataInit>

08006306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800630a:	3304      	adds	r3, #4

0800630c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800630c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800630e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006310:	d3f9      	bcc.n	8006306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006314:	4c09      	ldr	r4, [pc, #36]	; (800633c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006318:	e001      	b.n	800631e <LoopFillZerobss>

0800631a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800631a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800631c:	3204      	adds	r2, #4

0800631e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800631e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006320:	d3fb      	bcc.n	800631a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006322:	f000 ff19 	bl	8007158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006326:	f7ff fe2b 	bl	8005f80 <main>
  bx lr
 800632a:	4770      	bx	lr
  ldr r0, =_sdata
 800632c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006330:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8006334:	080092c4 	.word	0x080092c4
  ldr r2, =_sbss
 8006338:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800633c:	200001e0 	.word	0x200001e0

08006340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006340:	e7fe      	b.n	8006340 <ADC1_2_IRQHandler>
	...

08006344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006348:	4b08      	ldr	r3, [pc, #32]	; (800636c <HAL_Init+0x28>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a07      	ldr	r2, [pc, #28]	; (800636c <HAL_Init+0x28>)
 800634e:	f043 0310 	orr.w	r3, r3, #16
 8006352:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006354:	2003      	movs	r0, #3
 8006356:	f000 f92b 	bl	80065b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800635a:	200f      	movs	r0, #15
 800635c:	f000 f808 	bl	8006370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006360:	f7ff ff34 	bl	80061cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40022000 	.word	0x40022000

08006370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006378:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_InitTick+0x54>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_InitTick+0x58>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	4619      	mov	r1, r3
 8006382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006386:	fbb3 f3f1 	udiv	r3, r3, r1
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f935 	bl	80065fe <HAL_SYSTICK_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e00e      	b.n	80063bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b0f      	cmp	r3, #15
 80063a2:	d80a      	bhi.n	80063ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063a4:	2200      	movs	r2, #0
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	f000 f90b 	bl	80065c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <HAL_InitTick+0x5c>)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	e000      	b.n	80063bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000004 	.word	0x20000004
 80063c8:	2000000c 	.word	0x2000000c
 80063cc:	20000008 	.word	0x20000008

080063d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_IncTick+0x1c>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_IncTick+0x20>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4413      	add	r3, r2
 80063e0:	4a03      	ldr	r2, [pc, #12]	; (80063f0 <HAL_IncTick+0x20>)
 80063e2:	6013      	str	r3, [r2, #0]
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c
 80063f0:	20000094 	.word	0x20000094

080063f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return uwTick;
 80063f8:	4b02      	ldr	r3, [pc, #8]	; (8006404 <HAL_GetTick+0x10>)
 80063fa:	681b      	ldr	r3, [r3, #0]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr
 8006404:	20000094 	.word	0x20000094

08006408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006410:	f7ff fff0 	bl	80063f4 <HAL_GetTick>
 8006414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d005      	beq.n	800642e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <HAL_Delay+0x44>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800642e:	bf00      	nop
 8006430:	f7ff ffe0 	bl	80063f4 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	429a      	cmp	r2, r3
 800643e:	d8f7      	bhi.n	8006430 <HAL_Delay+0x28>
  {
  }
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	2000000c 	.word	0x2000000c

08006450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <__NVIC_SetPriorityGrouping+0x44>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800646c:	4013      	ands	r3, r2
 800646e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800647c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006482:	4a04      	ldr	r2, [pc, #16]	; (8006494 <__NVIC_SetPriorityGrouping+0x44>)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	60d3      	str	r3, [r2, #12]
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	e000ed00 	.word	0xe000ed00

08006498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <__NVIC_GetPriorityGrouping+0x18>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	0a1b      	lsrs	r3, r3, #8
 80064a2:	f003 0307 	and.w	r3, r3, #7
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	e000ed00 	.word	0xe000ed00

080064b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db0a      	blt.n	80064de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	490c      	ldr	r1, [pc, #48]	; (8006500 <__NVIC_SetPriority+0x4c>)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	0112      	lsls	r2, r2, #4
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	440b      	add	r3, r1
 80064d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064dc:	e00a      	b.n	80064f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4908      	ldr	r1, [pc, #32]	; (8006504 <__NVIC_SetPriority+0x50>)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	3b04      	subs	r3, #4
 80064ec:	0112      	lsls	r2, r2, #4
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	440b      	add	r3, r1
 80064f2:	761a      	strb	r2, [r3, #24]
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	e000e100 	.word	0xe000e100
 8006504:	e000ed00 	.word	0xe000ed00

08006508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f1c3 0307 	rsb	r3, r3, #7
 8006522:	2b04      	cmp	r3, #4
 8006524:	bf28      	it	cs
 8006526:	2304      	movcs	r3, #4
 8006528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	3304      	adds	r3, #4
 800652e:	2b06      	cmp	r3, #6
 8006530:	d902      	bls.n	8006538 <NVIC_EncodePriority+0x30>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3b03      	subs	r3, #3
 8006536:	e000      	b.n	800653a <NVIC_EncodePriority+0x32>
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800653c:	f04f 32ff 	mov.w	r2, #4294967295
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43da      	mvns	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	401a      	ands	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006550:	f04f 31ff 	mov.w	r1, #4294967295
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa01 f303 	lsl.w	r3, r1, r3
 800655a:	43d9      	mvns	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006560:	4313      	orrs	r3, r2
         );
}
 8006562:	4618      	mov	r0, r3
 8006564:	3724      	adds	r7, #36	; 0x24
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr

0800656c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3b01      	subs	r3, #1
 8006578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800657c:	d301      	bcc.n	8006582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800657e:	2301      	movs	r3, #1
 8006580:	e00f      	b.n	80065a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006582:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <SysTick_Config+0x40>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3b01      	subs	r3, #1
 8006588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800658a:	210f      	movs	r1, #15
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	f7ff ff90 	bl	80064b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <SysTick_Config+0x40>)
 8006596:	2200      	movs	r2, #0
 8006598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <SysTick_Config+0x40>)
 800659c:	2207      	movs	r2, #7
 800659e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	e000e010 	.word	0xe000e010

080065b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff ff49 	bl	8006450 <__NVIC_SetPriorityGrouping>
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	4603      	mov	r3, r0
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065d8:	f7ff ff5e 	bl	8006498 <__NVIC_GetPriorityGrouping>
 80065dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	6978      	ldr	r0, [r7, #20]
 80065e4:	f7ff ff90 	bl	8006508 <NVIC_EncodePriority>
 80065e8:	4602      	mov	r2, r0
 80065ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ee:	4611      	mov	r1, r2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff ff5f 	bl	80064b4 <__NVIC_SetPriority>
}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ffb0 	bl	800656c <SysTick_Config>
 800660c:	4603      	mov	r3, r0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006618:	b480      	push	{r7}
 800661a:	b08b      	sub	sp, #44	; 0x2c
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006626:	2300      	movs	r3, #0
 8006628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800662a:	e179      	b.n	8006920 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800662c:	2201      	movs	r2, #1
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	4013      	ands	r3, r2
 800663e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	429a      	cmp	r2, r3
 8006646:	f040 8168 	bne.w	800691a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	4a96      	ldr	r2, [pc, #600]	; (80068a8 <HAL_GPIO_Init+0x290>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d05e      	beq.n	8006712 <HAL_GPIO_Init+0xfa>
 8006654:	4a94      	ldr	r2, [pc, #592]	; (80068a8 <HAL_GPIO_Init+0x290>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d875      	bhi.n	8006746 <HAL_GPIO_Init+0x12e>
 800665a:	4a94      	ldr	r2, [pc, #592]	; (80068ac <HAL_GPIO_Init+0x294>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d058      	beq.n	8006712 <HAL_GPIO_Init+0xfa>
 8006660:	4a92      	ldr	r2, [pc, #584]	; (80068ac <HAL_GPIO_Init+0x294>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d86f      	bhi.n	8006746 <HAL_GPIO_Init+0x12e>
 8006666:	4a92      	ldr	r2, [pc, #584]	; (80068b0 <HAL_GPIO_Init+0x298>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d052      	beq.n	8006712 <HAL_GPIO_Init+0xfa>
 800666c:	4a90      	ldr	r2, [pc, #576]	; (80068b0 <HAL_GPIO_Init+0x298>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d869      	bhi.n	8006746 <HAL_GPIO_Init+0x12e>
 8006672:	4a90      	ldr	r2, [pc, #576]	; (80068b4 <HAL_GPIO_Init+0x29c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d04c      	beq.n	8006712 <HAL_GPIO_Init+0xfa>
 8006678:	4a8e      	ldr	r2, [pc, #568]	; (80068b4 <HAL_GPIO_Init+0x29c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d863      	bhi.n	8006746 <HAL_GPIO_Init+0x12e>
 800667e:	4a8e      	ldr	r2, [pc, #568]	; (80068b8 <HAL_GPIO_Init+0x2a0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d046      	beq.n	8006712 <HAL_GPIO_Init+0xfa>
 8006684:	4a8c      	ldr	r2, [pc, #560]	; (80068b8 <HAL_GPIO_Init+0x2a0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d85d      	bhi.n	8006746 <HAL_GPIO_Init+0x12e>
 800668a:	2b12      	cmp	r3, #18
 800668c:	d82a      	bhi.n	80066e4 <HAL_GPIO_Init+0xcc>
 800668e:	2b12      	cmp	r3, #18
 8006690:	d859      	bhi.n	8006746 <HAL_GPIO_Init+0x12e>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <HAL_GPIO_Init+0x80>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	08006713 	.word	0x08006713
 800669c:	080066ed 	.word	0x080066ed
 80066a0:	080066ff 	.word	0x080066ff
 80066a4:	08006741 	.word	0x08006741
 80066a8:	08006747 	.word	0x08006747
 80066ac:	08006747 	.word	0x08006747
 80066b0:	08006747 	.word	0x08006747
 80066b4:	08006747 	.word	0x08006747
 80066b8:	08006747 	.word	0x08006747
 80066bc:	08006747 	.word	0x08006747
 80066c0:	08006747 	.word	0x08006747
 80066c4:	08006747 	.word	0x08006747
 80066c8:	08006747 	.word	0x08006747
 80066cc:	08006747 	.word	0x08006747
 80066d0:	08006747 	.word	0x08006747
 80066d4:	08006747 	.word	0x08006747
 80066d8:	08006747 	.word	0x08006747
 80066dc:	080066f5 	.word	0x080066f5
 80066e0:	08006709 	.word	0x08006709
 80066e4:	4a75      	ldr	r2, [pc, #468]	; (80068bc <HAL_GPIO_Init+0x2a4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80066ea:	e02c      	b.n	8006746 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	623b      	str	r3, [r7, #32]
          break;
 80066f2:	e029      	b.n	8006748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	3304      	adds	r3, #4
 80066fa:	623b      	str	r3, [r7, #32]
          break;
 80066fc:	e024      	b.n	8006748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	3308      	adds	r3, #8
 8006704:	623b      	str	r3, [r7, #32]
          break;
 8006706:	e01f      	b.n	8006748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	330c      	adds	r3, #12
 800670e:	623b      	str	r3, [r7, #32]
          break;
 8006710:	e01a      	b.n	8006748 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800671a:	2304      	movs	r3, #4
 800671c:	623b      	str	r3, [r7, #32]
          break;
 800671e:	e013      	b.n	8006748 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d105      	bne.n	8006734 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006728:	2308      	movs	r3, #8
 800672a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	611a      	str	r2, [r3, #16]
          break;
 8006732:	e009      	b.n	8006748 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006734:	2308      	movs	r3, #8
 8006736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	615a      	str	r2, [r3, #20]
          break;
 800673e:	e003      	b.n	8006748 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006740:	2300      	movs	r3, #0
 8006742:	623b      	str	r3, [r7, #32]
          break;
 8006744:	e000      	b.n	8006748 <HAL_GPIO_Init+0x130>
          break;
 8006746:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2bff      	cmp	r3, #255	; 0xff
 800674c:	d801      	bhi.n	8006752 <HAL_GPIO_Init+0x13a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	e001      	b.n	8006756 <HAL_GPIO_Init+0x13e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2bff      	cmp	r3, #255	; 0xff
 800675c:	d802      	bhi.n	8006764 <HAL_GPIO_Init+0x14c>
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	e002      	b.n	800676a <HAL_GPIO_Init+0x152>
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	3b08      	subs	r3, #8
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	210f      	movs	r1, #15
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	fa01 f303 	lsl.w	r3, r1, r3
 8006778:	43db      	mvns	r3, r3
 800677a:	401a      	ands	r2, r3
 800677c:	6a39      	ldr	r1, [r7, #32]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	fa01 f303 	lsl.w	r3, r1, r3
 8006784:	431a      	orrs	r2, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80c1 	beq.w	800691a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006798:	4b49      	ldr	r3, [pc, #292]	; (80068c0 <HAL_GPIO_Init+0x2a8>)
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	4a48      	ldr	r2, [pc, #288]	; (80068c0 <HAL_GPIO_Init+0x2a8>)
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	6193      	str	r3, [r2, #24]
 80067a4:	4b46      	ldr	r3, [pc, #280]	; (80068c0 <HAL_GPIO_Init+0x2a8>)
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80067b0:	4a44      	ldr	r2, [pc, #272]	; (80068c4 <HAL_GPIO_Init+0x2ac>)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	3302      	adds	r3, #2
 80067b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	220f      	movs	r2, #15
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	43db      	mvns	r3, r3
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3c      	ldr	r2, [pc, #240]	; (80068c8 <HAL_GPIO_Init+0x2b0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d01f      	beq.n	800681c <HAL_GPIO_Init+0x204>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <HAL_GPIO_Init+0x2b4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d019      	beq.n	8006818 <HAL_GPIO_Init+0x200>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a3a      	ldr	r2, [pc, #232]	; (80068d0 <HAL_GPIO_Init+0x2b8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_GPIO_Init+0x1fc>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a39      	ldr	r2, [pc, #228]	; (80068d4 <HAL_GPIO_Init+0x2bc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00d      	beq.n	8006810 <HAL_GPIO_Init+0x1f8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a38      	ldr	r2, [pc, #224]	; (80068d8 <HAL_GPIO_Init+0x2c0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <HAL_GPIO_Init+0x1f4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a37      	ldr	r2, [pc, #220]	; (80068dc <HAL_GPIO_Init+0x2c4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d101      	bne.n	8006808 <HAL_GPIO_Init+0x1f0>
 8006804:	2305      	movs	r3, #5
 8006806:	e00a      	b.n	800681e <HAL_GPIO_Init+0x206>
 8006808:	2306      	movs	r3, #6
 800680a:	e008      	b.n	800681e <HAL_GPIO_Init+0x206>
 800680c:	2304      	movs	r3, #4
 800680e:	e006      	b.n	800681e <HAL_GPIO_Init+0x206>
 8006810:	2303      	movs	r3, #3
 8006812:	e004      	b.n	800681e <HAL_GPIO_Init+0x206>
 8006814:	2302      	movs	r3, #2
 8006816:	e002      	b.n	800681e <HAL_GPIO_Init+0x206>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <HAL_GPIO_Init+0x206>
 800681c:	2300      	movs	r3, #0
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	f002 0203 	and.w	r2, r2, #3
 8006824:	0092      	lsls	r2, r2, #2
 8006826:	4093      	lsls	r3, r2
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800682e:	4925      	ldr	r1, [pc, #148]	; (80068c4 <HAL_GPIO_Init+0x2ac>)
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	089b      	lsrs	r3, r3, #2
 8006834:	3302      	adds	r3, #2
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d006      	beq.n	8006856 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006848:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	4924      	ldr	r1, [pc, #144]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	4313      	orrs	r3, r2
 8006852:	608b      	str	r3, [r1, #8]
 8006854:	e006      	b.n	8006864 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006856:	4b22      	ldr	r3, [pc, #136]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	43db      	mvns	r3, r3
 800685e:	4920      	ldr	r1, [pc, #128]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 8006860:	4013      	ands	r3, r2
 8006862:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d006      	beq.n	800687e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	491a      	ldr	r1, [pc, #104]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	4313      	orrs	r3, r2
 800687a:	60cb      	str	r3, [r1, #12]
 800687c:	e006      	b.n	800688c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800687e:	4b18      	ldr	r3, [pc, #96]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	43db      	mvns	r3, r3
 8006886:	4916      	ldr	r1, [pc, #88]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 8006888:	4013      	ands	r3, r2
 800688a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d025      	beq.n	80068e4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006898:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4910      	ldr	r1, [pc, #64]	; (80068e0 <HAL_GPIO_Init+0x2c8>)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	604b      	str	r3, [r1, #4]
 80068a4:	e025      	b.n	80068f2 <HAL_GPIO_Init+0x2da>
 80068a6:	bf00      	nop
 80068a8:	10320000 	.word	0x10320000
 80068ac:	10310000 	.word	0x10310000
 80068b0:	10220000 	.word	0x10220000
 80068b4:	10210000 	.word	0x10210000
 80068b8:	10120000 	.word	0x10120000
 80068bc:	10110000 	.word	0x10110000
 80068c0:	40021000 	.word	0x40021000
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40010800 	.word	0x40010800
 80068cc:	40010c00 	.word	0x40010c00
 80068d0:	40011000 	.word	0x40011000
 80068d4:	40011400 	.word	0x40011400
 80068d8:	40011800 	.word	0x40011800
 80068dc:	40011c00 	.word	0x40011c00
 80068e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80068e4:	4b15      	ldr	r3, [pc, #84]	; (800693c <HAL_GPIO_Init+0x324>)
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	43db      	mvns	r3, r3
 80068ec:	4913      	ldr	r1, [pc, #76]	; (800693c <HAL_GPIO_Init+0x324>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d006      	beq.n	800690c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80068fe:	4b0f      	ldr	r3, [pc, #60]	; (800693c <HAL_GPIO_Init+0x324>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	490e      	ldr	r1, [pc, #56]	; (800693c <HAL_GPIO_Init+0x324>)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	4313      	orrs	r3, r2
 8006908:	600b      	str	r3, [r1, #0]
 800690a:	e006      	b.n	800691a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <HAL_GPIO_Init+0x324>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	43db      	mvns	r3, r3
 8006914:	4909      	ldr	r1, [pc, #36]	; (800693c <HAL_GPIO_Init+0x324>)
 8006916:	4013      	ands	r3, r2
 8006918:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	3301      	adds	r3, #1
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	f47f ae7e 	bne.w	800662c <HAL_GPIO_Init+0x14>
  }
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	372c      	adds	r7, #44	; 0x2c
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr
 800693c:	40010400 	.word	0x40010400

08006940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e272      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8087 	beq.w	8006a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006960:	4b92      	ldr	r3, [pc, #584]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b04      	cmp	r3, #4
 800696a:	d00c      	beq.n	8006986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800696c:	4b8f      	ldr	r3, [pc, #572]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b08      	cmp	r3, #8
 8006976:	d112      	bne.n	800699e <HAL_RCC_OscConfig+0x5e>
 8006978:	4b8c      	ldr	r3, [pc, #560]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006984:	d10b      	bne.n	800699e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006986:	4b89      	ldr	r3, [pc, #548]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d06c      	beq.n	8006a6c <HAL_RCC_OscConfig+0x12c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d168      	bne.n	8006a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e24c      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a6:	d106      	bne.n	80069b6 <HAL_RCC_OscConfig+0x76>
 80069a8:	4b80      	ldr	r3, [pc, #512]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a7f      	ldr	r2, [pc, #508]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	e02e      	b.n	8006a14 <HAL_RCC_OscConfig+0xd4>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCC_OscConfig+0x98>
 80069be:	4b7b      	ldr	r3, [pc, #492]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7a      	ldr	r2, [pc, #488]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4b78      	ldr	r3, [pc, #480]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a77      	ldr	r2, [pc, #476]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e01d      	b.n	8006a14 <HAL_RCC_OscConfig+0xd4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e0:	d10c      	bne.n	80069fc <HAL_RCC_OscConfig+0xbc>
 80069e2:	4b72      	ldr	r3, [pc, #456]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a71      	ldr	r2, [pc, #452]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4b6f      	ldr	r3, [pc, #444]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a6e      	ldr	r2, [pc, #440]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e00b      	b.n	8006a14 <HAL_RCC_OscConfig+0xd4>
 80069fc:	4b6b      	ldr	r3, [pc, #428]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6a      	ldr	r2, [pc, #424]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4b68      	ldr	r3, [pc, #416]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a67      	ldr	r2, [pc, #412]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d013      	beq.n	8006a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1c:	f7ff fcea 	bl	80063f4 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a24:	f7ff fce6 	bl	80063f4 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b64      	cmp	r3, #100	; 0x64
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e200      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a36:	4b5d      	ldr	r3, [pc, #372]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0xe4>
 8006a42:	e014      	b.n	8006a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a44:	f7ff fcd6 	bl	80063f4 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a4c:	f7ff fcd2 	bl	80063f4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b64      	cmp	r3, #100	; 0x64
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e1ec      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a5e:	4b53      	ldr	r3, [pc, #332]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x10c>
 8006a6a:	e000      	b.n	8006a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d063      	beq.n	8006b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a7a:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a86:	4b49      	ldr	r3, [pc, #292]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d11c      	bne.n	8006acc <HAL_RCC_OscConfig+0x18c>
 8006a92:	4b46      	ldr	r3, [pc, #280]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d116      	bne.n	8006acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	4b43      	ldr	r3, [pc, #268]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x176>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d001      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e1c0      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab6:	4b3d      	ldr	r3, [pc, #244]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4939      	ldr	r1, [pc, #228]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aca:	e03a      	b.n	8006b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d020      	beq.n	8006b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad4:	4b36      	ldr	r3, [pc, #216]	; (8006bb0 <HAL_RCC_OscConfig+0x270>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ada:	f7ff fc8b 	bl	80063f4 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae2:	f7ff fc87 	bl	80063f4 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e1a1      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af4:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b00:	4b2a      	ldr	r3, [pc, #168]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4927      	ldr	r1, [pc, #156]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]
 8006b14:	e015      	b.n	8006b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b16:	4b26      	ldr	r3, [pc, #152]	; (8006bb0 <HAL_RCC_OscConfig+0x270>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1c:	f7ff fc6a 	bl	80063f4 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b24:	f7ff fc66 	bl	80063f4 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e180      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03a      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d019      	beq.n	8006b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b56:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <HAL_RCC_OscConfig+0x274>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5c:	f7ff fc4a 	bl	80063f4 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b64:	f7ff fc46 	bl	80063f4 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e160      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b82:	2001      	movs	r0, #1
 8006b84:	f000 fa9c 	bl	80070c0 <RCC_Delay>
 8006b88:	e01c      	b.n	8006bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <HAL_RCC_OscConfig+0x274>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b90:	f7ff fc30 	bl	80063f4 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b96:	e00f      	b.n	8006bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b98:	f7ff fc2c 	bl	80063f4 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d908      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e146      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	42420000 	.word	0x42420000
 8006bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb8:	4b92      	ldr	r3, [pc, #584]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e9      	bne.n	8006b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80a6 	beq.w	8006d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd6:	4b8b      	ldr	r3, [pc, #556]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10d      	bne.n	8006bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be2:	4b88      	ldr	r3, [pc, #544]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	4a87      	ldr	r2, [pc, #540]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bec:	61d3      	str	r3, [r2, #28]
 8006bee:	4b85      	ldr	r3, [pc, #532]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfe:	4b82      	ldr	r3, [pc, #520]	; (8006e08 <HAL_RCC_OscConfig+0x4c8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d118      	bne.n	8006c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c0a:	4b7f      	ldr	r3, [pc, #508]	; (8006e08 <HAL_RCC_OscConfig+0x4c8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a7e      	ldr	r2, [pc, #504]	; (8006e08 <HAL_RCC_OscConfig+0x4c8>)
 8006c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c16:	f7ff fbed 	bl	80063f4 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1e:	f7ff fbe9 	bl	80063f4 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b64      	cmp	r3, #100	; 0x64
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e103      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c30:	4b75      	ldr	r3, [pc, #468]	; (8006e08 <HAL_RCC_OscConfig+0x4c8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d106      	bne.n	8006c52 <HAL_RCC_OscConfig+0x312>
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	4a6e      	ldr	r2, [pc, #440]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	6213      	str	r3, [r2, #32]
 8006c50:	e02d      	b.n	8006cae <HAL_RCC_OscConfig+0x36e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10c      	bne.n	8006c74 <HAL_RCC_OscConfig+0x334>
 8006c5a:	4b6a      	ldr	r3, [pc, #424]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	4a69      	ldr	r2, [pc, #420]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	6213      	str	r3, [r2, #32]
 8006c66:	4b67      	ldr	r3, [pc, #412]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	4a66      	ldr	r2, [pc, #408]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	6213      	str	r3, [r2, #32]
 8006c72:	e01c      	b.n	8006cae <HAL_RCC_OscConfig+0x36e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d10c      	bne.n	8006c96 <HAL_RCC_OscConfig+0x356>
 8006c7c:	4b61      	ldr	r3, [pc, #388]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	4a60      	ldr	r2, [pc, #384]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	6213      	str	r3, [r2, #32]
 8006c88:	4b5e      	ldr	r3, [pc, #376]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	4a5d      	ldr	r2, [pc, #372]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	6213      	str	r3, [r2, #32]
 8006c94:	e00b      	b.n	8006cae <HAL_RCC_OscConfig+0x36e>
 8006c96:	4b5b      	ldr	r3, [pc, #364]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	4a5a      	ldr	r2, [pc, #360]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	6213      	str	r3, [r2, #32]
 8006ca2:	4b58      	ldr	r3, [pc, #352]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	4a57      	ldr	r2, [pc, #348]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006ca8:	f023 0304 	bic.w	r3, r3, #4
 8006cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d015      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cb6:	f7ff fb9d 	bl	80063f4 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	e00a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cbe:	f7ff fb99 	bl	80063f4 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e0b1      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	4b4b      	ldr	r3, [pc, #300]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ee      	beq.n	8006cbe <HAL_RCC_OscConfig+0x37e>
 8006ce0:	e014      	b.n	8006d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce2:	f7ff fb87 	bl	80063f4 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce8:	e00a      	b.n	8006d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7ff fb83 	bl	80063f4 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e09b      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d00:	4b40      	ldr	r3, [pc, #256]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1ee      	bne.n	8006cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d105      	bne.n	8006d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d12:	4b3c      	ldr	r3, [pc, #240]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	4a3b      	ldr	r2, [pc, #236]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8087 	beq.w	8006e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d28:	4b36      	ldr	r3, [pc, #216]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 030c 	and.w	r3, r3, #12
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d061      	beq.n	8006df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d146      	bne.n	8006dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3c:	4b33      	ldr	r3, [pc, #204]	; (8006e0c <HAL_RCC_OscConfig+0x4cc>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d42:	f7ff fb57 	bl	80063f4 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4a:	f7ff fb53 	bl	80063f4 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e06d      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d5c:	4b29      	ldr	r3, [pc, #164]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f0      	bne.n	8006d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d70:	d108      	bne.n	8006d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d72:	4b24      	ldr	r3, [pc, #144]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	4921      	ldr	r1, [pc, #132]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d84:	4b1f      	ldr	r3, [pc, #124]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a19      	ldr	r1, [r3, #32]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	430b      	orrs	r3, r1
 8006d96:	491b      	ldr	r1, [pc, #108]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d9c:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da2:	f7ff fb27 	bl	80063f4 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006daa:	f7ff fb23 	bl	80063f4 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e03d      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dbc:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0f0      	beq.n	8006daa <HAL_RCC_OscConfig+0x46a>
 8006dc8:	e035      	b.n	8006e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <HAL_RCC_OscConfig+0x4cc>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd0:	f7ff fb10 	bl	80063f4 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd8:	f7ff fb0c 	bl	80063f4 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e026      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_RCC_OscConfig+0x4c4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f0      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x498>
 8006df6:	e01e      	b.n	8006e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e019      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
 8006e04:	40021000 	.word	0x40021000
 8006e08:	40007000 	.word	0x40007000
 8006e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <HAL_RCC_OscConfig+0x500>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d106      	bne.n	8006e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d001      	beq.n	8006e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40021000 	.word	0x40021000

08006e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0d0      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e58:	4b6a      	ldr	r3, [pc, #424]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d910      	bls.n	8006e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e66:	4b67      	ldr	r3, [pc, #412]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f023 0207 	bic.w	r2, r3, #7
 8006e6e:	4965      	ldr	r1, [pc, #404]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e76:	4b63      	ldr	r3, [pc, #396]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d001      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0b8      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d020      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ea0:	4b59      	ldr	r3, [pc, #356]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4a58      	ldr	r2, [pc, #352]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006eb8:	4b53      	ldr	r3, [pc, #332]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4a52      	ldr	r2, [pc, #328]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec4:	4b50      	ldr	r3, [pc, #320]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	494d      	ldr	r1, [pc, #308]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d040      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d107      	bne.n	8006efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eea:	4b47      	ldr	r3, [pc, #284]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d115      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e07f      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d107      	bne.n	8006f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f02:	4b41      	ldr	r3, [pc, #260]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e073      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f12:	4b3d      	ldr	r3, [pc, #244]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e06b      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f22:	4b39      	ldr	r3, [pc, #228]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f023 0203 	bic.w	r2, r3, #3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4936      	ldr	r1, [pc, #216]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f34:	f7ff fa5e 	bl	80063f4 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f3c:	f7ff fa5a 	bl	80063f4 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e053      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f52:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f003 020c 	and.w	r2, r3, #12
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d1eb      	bne.n	8006f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f64:	4b27      	ldr	r3, [pc, #156]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d210      	bcs.n	8006f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f72:	4b24      	ldr	r3, [pc, #144]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f023 0207 	bic.w	r2, r3, #7
 8006f7a:	4922      	ldr	r1, [pc, #136]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f82:	4b20      	ldr	r3, [pc, #128]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e032      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa0:	4b19      	ldr	r3, [pc, #100]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	4916      	ldr	r1, [pc, #88]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fbe:	4b12      	ldr	r3, [pc, #72]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	490e      	ldr	r1, [pc, #56]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fd2:	f000 f821 	bl	8007018 <HAL_RCC_GetSysClockFreq>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	490a      	ldr	r1, [pc, #40]	; (800700c <HAL_RCC_ClockConfig+0x1c8>)
 8006fe4:	5ccb      	ldrb	r3, [r1, r3]
 8006fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fea:	4a09      	ldr	r2, [pc, #36]	; (8007010 <HAL_RCC_ClockConfig+0x1cc>)
 8006fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <HAL_RCC_ClockConfig+0x1d0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff f9bc 	bl	8006370 <HAL_InitTick>

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40022000 	.word	0x40022000
 8007008:	40021000 	.word	0x40021000
 800700c:	08009264 	.word	0x08009264
 8007010:	20000004 	.word	0x20000004
 8007014:	20000008 	.word	0x20000008

08007018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	2300      	movs	r3, #0
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	2300      	movs	r3, #0
 800702c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007032:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <HAL_RCC_GetSysClockFreq+0x94>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 030c 	and.w	r3, r3, #12
 800703e:	2b04      	cmp	r3, #4
 8007040:	d002      	beq.n	8007048 <HAL_RCC_GetSysClockFreq+0x30>
 8007042:	2b08      	cmp	r3, #8
 8007044:	d003      	beq.n	800704e <HAL_RCC_GetSysClockFreq+0x36>
 8007046:	e027      	b.n	8007098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007048:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800704a:	613b      	str	r3, [r7, #16]
      break;
 800704c:	e027      	b.n	800709e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	0c9b      	lsrs	r3, r3, #18
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007058:	5cd3      	ldrb	r3, [r2, r3]
 800705a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d010      	beq.n	8007088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007066:	4b11      	ldr	r3, [pc, #68]	; (80070ac <HAL_RCC_GetSysClockFreq+0x94>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	0c5b      	lsrs	r3, r3, #17
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007072:	5cd3      	ldrb	r3, [r2, r3]
 8007074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a0d      	ldr	r2, [pc, #52]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800707a:	fb03 f202 	mul.w	r2, r3, r2
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	fbb2 f3f3 	udiv	r3, r2, r3
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e004      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800708c:	fb02 f303 	mul.w	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	613b      	str	r3, [r7, #16]
      break;
 8007096:	e002      	b.n	800709e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007098:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800709a:	613b      	str	r3, [r7, #16]
      break;
 800709c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800709e:	693b      	ldr	r3, [r7, #16]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40021000 	.word	0x40021000
 80070b0:	007a1200 	.word	0x007a1200
 80070b4:	08009274 	.word	0x08009274
 80070b8:	08009284 	.word	0x08009284
 80070bc:	003d0900 	.word	0x003d0900

080070c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <RCC_Delay+0x34>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a0a      	ldr	r2, [pc, #40]	; (80070f8 <RCC_Delay+0x38>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	0a5b      	lsrs	r3, r3, #9
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80070dc:	bf00      	nop
  }
  while (Delay --);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1e5a      	subs	r2, r3, #1
 80070e2:	60fa      	str	r2, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1f9      	bne.n	80070dc <RCC_Delay+0x1c>
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	20000004 	.word	0x20000004
 80070f8:	10624dd3 	.word	0x10624dd3

080070fc <siprintf>:
 80070fc:	b40e      	push	{r1, r2, r3}
 80070fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007102:	b500      	push	{lr}
 8007104:	b09c      	sub	sp, #112	; 0x70
 8007106:	ab1d      	add	r3, sp, #116	; 0x74
 8007108:	9002      	str	r0, [sp, #8]
 800710a:	9006      	str	r0, [sp, #24]
 800710c:	9107      	str	r1, [sp, #28]
 800710e:	9104      	str	r1, [sp, #16]
 8007110:	4808      	ldr	r0, [pc, #32]	; (8007134 <siprintf+0x38>)
 8007112:	4909      	ldr	r1, [pc, #36]	; (8007138 <siprintf+0x3c>)
 8007114:	f853 2b04 	ldr.w	r2, [r3], #4
 8007118:	9105      	str	r1, [sp, #20]
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	a902      	add	r1, sp, #8
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	f000 f98e 	bl	8007440 <_svfiprintf_r>
 8007124:	2200      	movs	r2, #0
 8007126:	9b02      	ldr	r3, [sp, #8]
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	b01c      	add	sp, #112	; 0x70
 800712c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007130:	b003      	add	sp, #12
 8007132:	4770      	bx	lr
 8007134:	2000005c 	.word	0x2000005c
 8007138:	ffff0208 	.word	0xffff0208

0800713c <memset>:
 800713c:	4603      	mov	r3, r0
 800713e:	4402      	add	r2, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <__errno>:
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <__errno+0x8>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000005c 	.word	0x2000005c

08007158 <__libc_init_array>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	2600      	movs	r6, #0
 800715c:	4d0c      	ldr	r5, [pc, #48]	; (8007190 <__libc_init_array+0x38>)
 800715e:	4c0d      	ldr	r4, [pc, #52]	; (8007194 <__libc_init_array+0x3c>)
 8007160:	1b64      	subs	r4, r4, r5
 8007162:	10a4      	asrs	r4, r4, #2
 8007164:	42a6      	cmp	r6, r4
 8007166:	d109      	bne.n	800717c <__libc_init_array+0x24>
 8007168:	f000 fc7a 	bl	8007a60 <_init>
 800716c:	2600      	movs	r6, #0
 800716e:	4d0a      	ldr	r5, [pc, #40]	; (8007198 <__libc_init_array+0x40>)
 8007170:	4c0a      	ldr	r4, [pc, #40]	; (800719c <__libc_init_array+0x44>)
 8007172:	1b64      	subs	r4, r4, r5
 8007174:	10a4      	asrs	r4, r4, #2
 8007176:	42a6      	cmp	r6, r4
 8007178:	d105      	bne.n	8007186 <__libc_init_array+0x2e>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007180:	4798      	blx	r3
 8007182:	3601      	adds	r6, #1
 8007184:	e7ee      	b.n	8007164 <__libc_init_array+0xc>
 8007186:	f855 3b04 	ldr.w	r3, [r5], #4
 800718a:	4798      	blx	r3
 800718c:	3601      	adds	r6, #1
 800718e:	e7f2      	b.n	8007176 <__libc_init_array+0x1e>
 8007190:	080092bc 	.word	0x080092bc
 8007194:	080092bc 	.word	0x080092bc
 8007198:	080092bc 	.word	0x080092bc
 800719c:	080092c0 	.word	0x080092c0

080071a0 <__retarget_lock_acquire_recursive>:
 80071a0:	4770      	bx	lr

080071a2 <__retarget_lock_release_recursive>:
 80071a2:	4770      	bx	lr

080071a4 <_free_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4605      	mov	r5, r0
 80071a8:	2900      	cmp	r1, #0
 80071aa:	d040      	beq.n	800722e <_free_r+0x8a>
 80071ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b0:	1f0c      	subs	r4, r1, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bfb8      	it	lt
 80071b6:	18e4      	addlt	r4, r4, r3
 80071b8:	f000 f8dc 	bl	8007374 <__malloc_lock>
 80071bc:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <_free_r+0x8c>)
 80071be:	6813      	ldr	r3, [r2, #0]
 80071c0:	b933      	cbnz	r3, 80071d0 <_free_r+0x2c>
 80071c2:	6063      	str	r3, [r4, #4]
 80071c4:	6014      	str	r4, [r2, #0]
 80071c6:	4628      	mov	r0, r5
 80071c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071cc:	f000 b8d8 	b.w	8007380 <__malloc_unlock>
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d908      	bls.n	80071e6 <_free_r+0x42>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	1821      	adds	r1, r4, r0
 80071d8:	428b      	cmp	r3, r1
 80071da:	bf01      	itttt	eq
 80071dc:	6819      	ldreq	r1, [r3, #0]
 80071de:	685b      	ldreq	r3, [r3, #4]
 80071e0:	1809      	addeq	r1, r1, r0
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	e7ed      	b.n	80071c2 <_free_r+0x1e>
 80071e6:	461a      	mov	r2, r3
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	b10b      	cbz	r3, 80071f0 <_free_r+0x4c>
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d9fa      	bls.n	80071e6 <_free_r+0x42>
 80071f0:	6811      	ldr	r1, [r2, #0]
 80071f2:	1850      	adds	r0, r2, r1
 80071f4:	42a0      	cmp	r0, r4
 80071f6:	d10b      	bne.n	8007210 <_free_r+0x6c>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	4401      	add	r1, r0
 80071fc:	1850      	adds	r0, r2, r1
 80071fe:	4283      	cmp	r3, r0
 8007200:	6011      	str	r1, [r2, #0]
 8007202:	d1e0      	bne.n	80071c6 <_free_r+0x22>
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4408      	add	r0, r1
 800720a:	6010      	str	r0, [r2, #0]
 800720c:	6053      	str	r3, [r2, #4]
 800720e:	e7da      	b.n	80071c6 <_free_r+0x22>
 8007210:	d902      	bls.n	8007218 <_free_r+0x74>
 8007212:	230c      	movs	r3, #12
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	e7d6      	b.n	80071c6 <_free_r+0x22>
 8007218:	6820      	ldr	r0, [r4, #0]
 800721a:	1821      	adds	r1, r4, r0
 800721c:	428b      	cmp	r3, r1
 800721e:	bf01      	itttt	eq
 8007220:	6819      	ldreq	r1, [r3, #0]
 8007222:	685b      	ldreq	r3, [r3, #4]
 8007224:	1809      	addeq	r1, r1, r0
 8007226:	6021      	streq	r1, [r4, #0]
 8007228:	6063      	str	r3, [r4, #4]
 800722a:	6054      	str	r4, [r2, #4]
 800722c:	e7cb      	b.n	80071c6 <_free_r+0x22>
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	200001d8 	.word	0x200001d8

08007234 <sbrk_aligned>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	4e0e      	ldr	r6, [pc, #56]	; (8007270 <sbrk_aligned+0x3c>)
 8007238:	460c      	mov	r4, r1
 800723a:	6831      	ldr	r1, [r6, #0]
 800723c:	4605      	mov	r5, r0
 800723e:	b911      	cbnz	r1, 8007246 <sbrk_aligned+0x12>
 8007240:	f000 fbaa 	bl	8007998 <_sbrk_r>
 8007244:	6030      	str	r0, [r6, #0]
 8007246:	4621      	mov	r1, r4
 8007248:	4628      	mov	r0, r5
 800724a:	f000 fba5 	bl	8007998 <_sbrk_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d00a      	beq.n	8007268 <sbrk_aligned+0x34>
 8007252:	1cc4      	adds	r4, r0, #3
 8007254:	f024 0403 	bic.w	r4, r4, #3
 8007258:	42a0      	cmp	r0, r4
 800725a:	d007      	beq.n	800726c <sbrk_aligned+0x38>
 800725c:	1a21      	subs	r1, r4, r0
 800725e:	4628      	mov	r0, r5
 8007260:	f000 fb9a 	bl	8007998 <_sbrk_r>
 8007264:	3001      	adds	r0, #1
 8007266:	d101      	bne.n	800726c <sbrk_aligned+0x38>
 8007268:	f04f 34ff 	mov.w	r4, #4294967295
 800726c:	4620      	mov	r0, r4
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	200001dc 	.word	0x200001dc

08007274 <_malloc_r>:
 8007274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007278:	1ccd      	adds	r5, r1, #3
 800727a:	f025 0503 	bic.w	r5, r5, #3
 800727e:	3508      	adds	r5, #8
 8007280:	2d0c      	cmp	r5, #12
 8007282:	bf38      	it	cc
 8007284:	250c      	movcc	r5, #12
 8007286:	2d00      	cmp	r5, #0
 8007288:	4607      	mov	r7, r0
 800728a:	db01      	blt.n	8007290 <_malloc_r+0x1c>
 800728c:	42a9      	cmp	r1, r5
 800728e:	d905      	bls.n	800729c <_malloc_r+0x28>
 8007290:	230c      	movs	r3, #12
 8007292:	2600      	movs	r6, #0
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	4630      	mov	r0, r6
 8007298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800729c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007370 <_malloc_r+0xfc>
 80072a0:	f000 f868 	bl	8007374 <__malloc_lock>
 80072a4:	f8d8 3000 	ldr.w	r3, [r8]
 80072a8:	461c      	mov	r4, r3
 80072aa:	bb5c      	cbnz	r4, 8007304 <_malloc_r+0x90>
 80072ac:	4629      	mov	r1, r5
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7ff ffc0 	bl	8007234 <sbrk_aligned>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	4604      	mov	r4, r0
 80072b8:	d155      	bne.n	8007366 <_malloc_r+0xf2>
 80072ba:	f8d8 4000 	ldr.w	r4, [r8]
 80072be:	4626      	mov	r6, r4
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	d145      	bne.n	8007350 <_malloc_r+0xdc>
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	d048      	beq.n	800735a <_malloc_r+0xe6>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	4631      	mov	r1, r6
 80072cc:	4638      	mov	r0, r7
 80072ce:	eb04 0903 	add.w	r9, r4, r3
 80072d2:	f000 fb61 	bl	8007998 <_sbrk_r>
 80072d6:	4581      	cmp	r9, r0
 80072d8:	d13f      	bne.n	800735a <_malloc_r+0xe6>
 80072da:	6821      	ldr	r1, [r4, #0]
 80072dc:	4638      	mov	r0, r7
 80072de:	1a6d      	subs	r5, r5, r1
 80072e0:	4629      	mov	r1, r5
 80072e2:	f7ff ffa7 	bl	8007234 <sbrk_aligned>
 80072e6:	3001      	adds	r0, #1
 80072e8:	d037      	beq.n	800735a <_malloc_r+0xe6>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	442b      	add	r3, r5
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	f8d8 3000 	ldr.w	r3, [r8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d038      	beq.n	800736a <_malloc_r+0xf6>
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	42a2      	cmp	r2, r4
 80072fc:	d12b      	bne.n	8007356 <_malloc_r+0xe2>
 80072fe:	2200      	movs	r2, #0
 8007300:	605a      	str	r2, [r3, #4]
 8007302:	e00f      	b.n	8007324 <_malloc_r+0xb0>
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	1b52      	subs	r2, r2, r5
 8007308:	d41f      	bmi.n	800734a <_malloc_r+0xd6>
 800730a:	2a0b      	cmp	r2, #11
 800730c:	d917      	bls.n	800733e <_malloc_r+0xca>
 800730e:	1961      	adds	r1, r4, r5
 8007310:	42a3      	cmp	r3, r4
 8007312:	6025      	str	r5, [r4, #0]
 8007314:	bf18      	it	ne
 8007316:	6059      	strne	r1, [r3, #4]
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	bf08      	it	eq
 800731c:	f8c8 1000 	streq.w	r1, [r8]
 8007320:	5162      	str	r2, [r4, r5]
 8007322:	604b      	str	r3, [r1, #4]
 8007324:	4638      	mov	r0, r7
 8007326:	f104 060b 	add.w	r6, r4, #11
 800732a:	f000 f829 	bl	8007380 <__malloc_unlock>
 800732e:	f026 0607 	bic.w	r6, r6, #7
 8007332:	1d23      	adds	r3, r4, #4
 8007334:	1af2      	subs	r2, r6, r3
 8007336:	d0ae      	beq.n	8007296 <_malloc_r+0x22>
 8007338:	1b9b      	subs	r3, r3, r6
 800733a:	50a3      	str	r3, [r4, r2]
 800733c:	e7ab      	b.n	8007296 <_malloc_r+0x22>
 800733e:	42a3      	cmp	r3, r4
 8007340:	6862      	ldr	r2, [r4, #4]
 8007342:	d1dd      	bne.n	8007300 <_malloc_r+0x8c>
 8007344:	f8c8 2000 	str.w	r2, [r8]
 8007348:	e7ec      	b.n	8007324 <_malloc_r+0xb0>
 800734a:	4623      	mov	r3, r4
 800734c:	6864      	ldr	r4, [r4, #4]
 800734e:	e7ac      	b.n	80072aa <_malloc_r+0x36>
 8007350:	4634      	mov	r4, r6
 8007352:	6876      	ldr	r6, [r6, #4]
 8007354:	e7b4      	b.n	80072c0 <_malloc_r+0x4c>
 8007356:	4613      	mov	r3, r2
 8007358:	e7cc      	b.n	80072f4 <_malloc_r+0x80>
 800735a:	230c      	movs	r3, #12
 800735c:	4638      	mov	r0, r7
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	f000 f80e 	bl	8007380 <__malloc_unlock>
 8007364:	e797      	b.n	8007296 <_malloc_r+0x22>
 8007366:	6025      	str	r5, [r4, #0]
 8007368:	e7dc      	b.n	8007324 <_malloc_r+0xb0>
 800736a:	605b      	str	r3, [r3, #4]
 800736c:	deff      	udf	#255	; 0xff
 800736e:	bf00      	nop
 8007370:	200001d8 	.word	0x200001d8

08007374 <__malloc_lock>:
 8007374:	4801      	ldr	r0, [pc, #4]	; (800737c <__malloc_lock+0x8>)
 8007376:	f7ff bf13 	b.w	80071a0 <__retarget_lock_acquire_recursive>
 800737a:	bf00      	nop
 800737c:	200001d4 	.word	0x200001d4

08007380 <__malloc_unlock>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__malloc_unlock+0x8>)
 8007382:	f7ff bf0e 	b.w	80071a2 <__retarget_lock_release_recursive>
 8007386:	bf00      	nop
 8007388:	200001d4 	.word	0x200001d4

0800738c <__ssputs_r>:
 800738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	461f      	mov	r7, r3
 8007392:	688e      	ldr	r6, [r1, #8]
 8007394:	4682      	mov	sl, r0
 8007396:	42be      	cmp	r6, r7
 8007398:	460c      	mov	r4, r1
 800739a:	4690      	mov	r8, r2
 800739c:	680b      	ldr	r3, [r1, #0]
 800739e:	d82c      	bhi.n	80073fa <__ssputs_r+0x6e>
 80073a0:	898a      	ldrh	r2, [r1, #12]
 80073a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073a6:	d026      	beq.n	80073f6 <__ssputs_r+0x6a>
 80073a8:	6965      	ldr	r5, [r4, #20]
 80073aa:	6909      	ldr	r1, [r1, #16]
 80073ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073b0:	eba3 0901 	sub.w	r9, r3, r1
 80073b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073b8:	1c7b      	adds	r3, r7, #1
 80073ba:	444b      	add	r3, r9
 80073bc:	106d      	asrs	r5, r5, #1
 80073be:	429d      	cmp	r5, r3
 80073c0:	bf38      	it	cc
 80073c2:	461d      	movcc	r5, r3
 80073c4:	0553      	lsls	r3, r2, #21
 80073c6:	d527      	bpl.n	8007418 <__ssputs_r+0x8c>
 80073c8:	4629      	mov	r1, r5
 80073ca:	f7ff ff53 	bl	8007274 <_malloc_r>
 80073ce:	4606      	mov	r6, r0
 80073d0:	b360      	cbz	r0, 800742c <__ssputs_r+0xa0>
 80073d2:	464a      	mov	r2, r9
 80073d4:	6921      	ldr	r1, [r4, #16]
 80073d6:	f000 fafd 	bl	80079d4 <memcpy>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	6126      	str	r6, [r4, #16]
 80073e8:	444e      	add	r6, r9
 80073ea:	6026      	str	r6, [r4, #0]
 80073ec:	463e      	mov	r6, r7
 80073ee:	6165      	str	r5, [r4, #20]
 80073f0:	eba5 0509 	sub.w	r5, r5, r9
 80073f4:	60a5      	str	r5, [r4, #8]
 80073f6:	42be      	cmp	r6, r7
 80073f8:	d900      	bls.n	80073fc <__ssputs_r+0x70>
 80073fa:	463e      	mov	r6, r7
 80073fc:	4632      	mov	r2, r6
 80073fe:	4641      	mov	r1, r8
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	f000 faaf 	bl	8007964 <memmove>
 8007406:	2000      	movs	r0, #0
 8007408:	68a3      	ldr	r3, [r4, #8]
 800740a:	1b9b      	subs	r3, r3, r6
 800740c:	60a3      	str	r3, [r4, #8]
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	4433      	add	r3, r6
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007418:	462a      	mov	r2, r5
 800741a:	f000 fae9 	bl	80079f0 <_realloc_r>
 800741e:	4606      	mov	r6, r0
 8007420:	2800      	cmp	r0, #0
 8007422:	d1e0      	bne.n	80073e6 <__ssputs_r+0x5a>
 8007424:	4650      	mov	r0, sl
 8007426:	6921      	ldr	r1, [r4, #16]
 8007428:	f7ff febc 	bl	80071a4 <_free_r>
 800742c:	230c      	movs	r3, #12
 800742e:	f8ca 3000 	str.w	r3, [sl]
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	e7e9      	b.n	8007414 <__ssputs_r+0x88>

08007440 <_svfiprintf_r>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	4698      	mov	r8, r3
 8007446:	898b      	ldrh	r3, [r1, #12]
 8007448:	4607      	mov	r7, r0
 800744a:	061b      	lsls	r3, r3, #24
 800744c:	460d      	mov	r5, r1
 800744e:	4614      	mov	r4, r2
 8007450:	b09d      	sub	sp, #116	; 0x74
 8007452:	d50e      	bpl.n	8007472 <_svfiprintf_r+0x32>
 8007454:	690b      	ldr	r3, [r1, #16]
 8007456:	b963      	cbnz	r3, 8007472 <_svfiprintf_r+0x32>
 8007458:	2140      	movs	r1, #64	; 0x40
 800745a:	f7ff ff0b 	bl	8007274 <_malloc_r>
 800745e:	6028      	str	r0, [r5, #0]
 8007460:	6128      	str	r0, [r5, #16]
 8007462:	b920      	cbnz	r0, 800746e <_svfiprintf_r+0x2e>
 8007464:	230c      	movs	r3, #12
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	f04f 30ff 	mov.w	r0, #4294967295
 800746c:	e0d0      	b.n	8007610 <_svfiprintf_r+0x1d0>
 800746e:	2340      	movs	r3, #64	; 0x40
 8007470:	616b      	str	r3, [r5, #20]
 8007472:	2300      	movs	r3, #0
 8007474:	9309      	str	r3, [sp, #36]	; 0x24
 8007476:	2320      	movs	r3, #32
 8007478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800747c:	2330      	movs	r3, #48	; 0x30
 800747e:	f04f 0901 	mov.w	r9, #1
 8007482:	f8cd 800c 	str.w	r8, [sp, #12]
 8007486:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007628 <_svfiprintf_r+0x1e8>
 800748a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800748e:	4623      	mov	r3, r4
 8007490:	469a      	mov	sl, r3
 8007492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007496:	b10a      	cbz	r2, 800749c <_svfiprintf_r+0x5c>
 8007498:	2a25      	cmp	r2, #37	; 0x25
 800749a:	d1f9      	bne.n	8007490 <_svfiprintf_r+0x50>
 800749c:	ebba 0b04 	subs.w	fp, sl, r4
 80074a0:	d00b      	beq.n	80074ba <_svfiprintf_r+0x7a>
 80074a2:	465b      	mov	r3, fp
 80074a4:	4622      	mov	r2, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	4638      	mov	r0, r7
 80074aa:	f7ff ff6f 	bl	800738c <__ssputs_r>
 80074ae:	3001      	adds	r0, #1
 80074b0:	f000 80a9 	beq.w	8007606 <_svfiprintf_r+0x1c6>
 80074b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b6:	445a      	add	r2, fp
 80074b8:	9209      	str	r2, [sp, #36]	; 0x24
 80074ba:	f89a 3000 	ldrb.w	r3, [sl]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 80a1 	beq.w	8007606 <_svfiprintf_r+0x1c6>
 80074c4:	2300      	movs	r3, #0
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ce:	f10a 0a01 	add.w	sl, sl, #1
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	9307      	str	r3, [sp, #28]
 80074d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074da:	931a      	str	r3, [sp, #104]	; 0x68
 80074dc:	4654      	mov	r4, sl
 80074de:	2205      	movs	r2, #5
 80074e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e4:	4850      	ldr	r0, [pc, #320]	; (8007628 <_svfiprintf_r+0x1e8>)
 80074e6:	f000 fa67 	bl	80079b8 <memchr>
 80074ea:	9a04      	ldr	r2, [sp, #16]
 80074ec:	b9d8      	cbnz	r0, 8007526 <_svfiprintf_r+0xe6>
 80074ee:	06d0      	lsls	r0, r2, #27
 80074f0:	bf44      	itt	mi
 80074f2:	2320      	movmi	r3, #32
 80074f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f8:	0711      	lsls	r1, r2, #28
 80074fa:	bf44      	itt	mi
 80074fc:	232b      	movmi	r3, #43	; 0x2b
 80074fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007502:	f89a 3000 	ldrb.w	r3, [sl]
 8007506:	2b2a      	cmp	r3, #42	; 0x2a
 8007508:	d015      	beq.n	8007536 <_svfiprintf_r+0xf6>
 800750a:	4654      	mov	r4, sl
 800750c:	2000      	movs	r0, #0
 800750e:	f04f 0c0a 	mov.w	ip, #10
 8007512:	9a07      	ldr	r2, [sp, #28]
 8007514:	4621      	mov	r1, r4
 8007516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800751a:	3b30      	subs	r3, #48	; 0x30
 800751c:	2b09      	cmp	r3, #9
 800751e:	d94d      	bls.n	80075bc <_svfiprintf_r+0x17c>
 8007520:	b1b0      	cbz	r0, 8007550 <_svfiprintf_r+0x110>
 8007522:	9207      	str	r2, [sp, #28]
 8007524:	e014      	b.n	8007550 <_svfiprintf_r+0x110>
 8007526:	eba0 0308 	sub.w	r3, r0, r8
 800752a:	fa09 f303 	lsl.w	r3, r9, r3
 800752e:	4313      	orrs	r3, r2
 8007530:	46a2      	mov	sl, r4
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	e7d2      	b.n	80074dc <_svfiprintf_r+0x9c>
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	1d19      	adds	r1, r3, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	9103      	str	r1, [sp, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	bfbb      	ittet	lt
 8007542:	425b      	neglt	r3, r3
 8007544:	f042 0202 	orrlt.w	r2, r2, #2
 8007548:	9307      	strge	r3, [sp, #28]
 800754a:	9307      	strlt	r3, [sp, #28]
 800754c:	bfb8      	it	lt
 800754e:	9204      	strlt	r2, [sp, #16]
 8007550:	7823      	ldrb	r3, [r4, #0]
 8007552:	2b2e      	cmp	r3, #46	; 0x2e
 8007554:	d10c      	bne.n	8007570 <_svfiprintf_r+0x130>
 8007556:	7863      	ldrb	r3, [r4, #1]
 8007558:	2b2a      	cmp	r3, #42	; 0x2a
 800755a:	d134      	bne.n	80075c6 <_svfiprintf_r+0x186>
 800755c:	9b03      	ldr	r3, [sp, #12]
 800755e:	3402      	adds	r4, #2
 8007560:	1d1a      	adds	r2, r3, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	9203      	str	r2, [sp, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	bfb8      	it	lt
 800756a:	f04f 33ff 	movlt.w	r3, #4294967295
 800756e:	9305      	str	r3, [sp, #20]
 8007570:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800762c <_svfiprintf_r+0x1ec>
 8007574:	2203      	movs	r2, #3
 8007576:	4650      	mov	r0, sl
 8007578:	7821      	ldrb	r1, [r4, #0]
 800757a:	f000 fa1d 	bl	80079b8 <memchr>
 800757e:	b138      	cbz	r0, 8007590 <_svfiprintf_r+0x150>
 8007580:	2240      	movs	r2, #64	; 0x40
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	eba0 000a 	sub.w	r0, r0, sl
 8007588:	4082      	lsls	r2, r0
 800758a:	4313      	orrs	r3, r2
 800758c:	3401      	adds	r4, #1
 800758e:	9304      	str	r3, [sp, #16]
 8007590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007594:	2206      	movs	r2, #6
 8007596:	4826      	ldr	r0, [pc, #152]	; (8007630 <_svfiprintf_r+0x1f0>)
 8007598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800759c:	f000 fa0c 	bl	80079b8 <memchr>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d038      	beq.n	8007616 <_svfiprintf_r+0x1d6>
 80075a4:	4b23      	ldr	r3, [pc, #140]	; (8007634 <_svfiprintf_r+0x1f4>)
 80075a6:	bb1b      	cbnz	r3, 80075f0 <_svfiprintf_r+0x1b0>
 80075a8:	9b03      	ldr	r3, [sp, #12]
 80075aa:	3307      	adds	r3, #7
 80075ac:	f023 0307 	bic.w	r3, r3, #7
 80075b0:	3308      	adds	r3, #8
 80075b2:	9303      	str	r3, [sp, #12]
 80075b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b6:	4433      	add	r3, r6
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	e768      	b.n	800748e <_svfiprintf_r+0x4e>
 80075bc:	460c      	mov	r4, r1
 80075be:	2001      	movs	r0, #1
 80075c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075c4:	e7a6      	b.n	8007514 <_svfiprintf_r+0xd4>
 80075c6:	2300      	movs	r3, #0
 80075c8:	f04f 0c0a 	mov.w	ip, #10
 80075cc:	4619      	mov	r1, r3
 80075ce:	3401      	adds	r4, #1
 80075d0:	9305      	str	r3, [sp, #20]
 80075d2:	4620      	mov	r0, r4
 80075d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d8:	3a30      	subs	r2, #48	; 0x30
 80075da:	2a09      	cmp	r2, #9
 80075dc:	d903      	bls.n	80075e6 <_svfiprintf_r+0x1a6>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0c6      	beq.n	8007570 <_svfiprintf_r+0x130>
 80075e2:	9105      	str	r1, [sp, #20]
 80075e4:	e7c4      	b.n	8007570 <_svfiprintf_r+0x130>
 80075e6:	4604      	mov	r4, r0
 80075e8:	2301      	movs	r3, #1
 80075ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ee:	e7f0      	b.n	80075d2 <_svfiprintf_r+0x192>
 80075f0:	ab03      	add	r3, sp, #12
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	462a      	mov	r2, r5
 80075f6:	4638      	mov	r0, r7
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <_svfiprintf_r+0x1f8>)
 80075fa:	a904      	add	r1, sp, #16
 80075fc:	f3af 8000 	nop.w
 8007600:	1c42      	adds	r2, r0, #1
 8007602:	4606      	mov	r6, r0
 8007604:	d1d6      	bne.n	80075b4 <_svfiprintf_r+0x174>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	065b      	lsls	r3, r3, #25
 800760a:	f53f af2d 	bmi.w	8007468 <_svfiprintf_r+0x28>
 800760e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007610:	b01d      	add	sp, #116	; 0x74
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	ab03      	add	r3, sp, #12
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	462a      	mov	r2, r5
 800761c:	4638      	mov	r0, r7
 800761e:	4b06      	ldr	r3, [pc, #24]	; (8007638 <_svfiprintf_r+0x1f8>)
 8007620:	a904      	add	r1, sp, #16
 8007622:	f000 f87d 	bl	8007720 <_printf_i>
 8007626:	e7eb      	b.n	8007600 <_svfiprintf_r+0x1c0>
 8007628:	08009286 	.word	0x08009286
 800762c:	0800928c 	.word	0x0800928c
 8007630:	08009290 	.word	0x08009290
 8007634:	00000000 	.word	0x00000000
 8007638:	0800738d 	.word	0x0800738d

0800763c <_printf_common>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	4616      	mov	r6, r2
 8007642:	4699      	mov	r9, r3
 8007644:	688a      	ldr	r2, [r1, #8]
 8007646:	690b      	ldr	r3, [r1, #16]
 8007648:	4607      	mov	r7, r0
 800764a:	4293      	cmp	r3, r2
 800764c:	bfb8      	it	lt
 800764e:	4613      	movlt	r3, r2
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007656:	460c      	mov	r4, r1
 8007658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800765c:	b10a      	cbz	r2, 8007662 <_printf_common+0x26>
 800765e:	3301      	adds	r3, #1
 8007660:	6033      	str	r3, [r6, #0]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	0699      	lsls	r1, r3, #26
 8007666:	bf42      	ittt	mi
 8007668:	6833      	ldrmi	r3, [r6, #0]
 800766a:	3302      	addmi	r3, #2
 800766c:	6033      	strmi	r3, [r6, #0]
 800766e:	6825      	ldr	r5, [r4, #0]
 8007670:	f015 0506 	ands.w	r5, r5, #6
 8007674:	d106      	bne.n	8007684 <_printf_common+0x48>
 8007676:	f104 0a19 	add.w	sl, r4, #25
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	6832      	ldr	r2, [r6, #0]
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	42ab      	cmp	r3, r5
 8007682:	dc2b      	bgt.n	80076dc <_printf_common+0xa0>
 8007684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007688:	1e13      	subs	r3, r2, #0
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	bf18      	it	ne
 800768e:	2301      	movne	r3, #1
 8007690:	0692      	lsls	r2, r2, #26
 8007692:	d430      	bmi.n	80076f6 <_printf_common+0xba>
 8007694:	4649      	mov	r1, r9
 8007696:	4638      	mov	r0, r7
 8007698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800769c:	47c0      	blx	r8
 800769e:	3001      	adds	r0, #1
 80076a0:	d023      	beq.n	80076ea <_printf_common+0xae>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	6922      	ldr	r2, [r4, #16]
 80076a6:	f003 0306 	and.w	r3, r3, #6
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	bf14      	ite	ne
 80076ae:	2500      	movne	r5, #0
 80076b0:	6833      	ldreq	r3, [r6, #0]
 80076b2:	f04f 0600 	mov.w	r6, #0
 80076b6:	bf08      	it	eq
 80076b8:	68e5      	ldreq	r5, [r4, #12]
 80076ba:	f104 041a 	add.w	r4, r4, #26
 80076be:	bf08      	it	eq
 80076c0:	1aed      	subeq	r5, r5, r3
 80076c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076c6:	bf08      	it	eq
 80076c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076cc:	4293      	cmp	r3, r2
 80076ce:	bfc4      	itt	gt
 80076d0:	1a9b      	subgt	r3, r3, r2
 80076d2:	18ed      	addgt	r5, r5, r3
 80076d4:	42b5      	cmp	r5, r6
 80076d6:	d11a      	bne.n	800770e <_printf_common+0xd2>
 80076d8:	2000      	movs	r0, #0
 80076da:	e008      	b.n	80076ee <_printf_common+0xb2>
 80076dc:	2301      	movs	r3, #1
 80076de:	4652      	mov	r2, sl
 80076e0:	4649      	mov	r1, r9
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c0      	blx	r8
 80076e6:	3001      	adds	r0, #1
 80076e8:	d103      	bne.n	80076f2 <_printf_common+0xb6>
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	3501      	adds	r5, #1
 80076f4:	e7c1      	b.n	800767a <_printf_common+0x3e>
 80076f6:	2030      	movs	r0, #48	; 0x30
 80076f8:	18e1      	adds	r1, r4, r3
 80076fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007704:	4422      	add	r2, r4
 8007706:	3302      	adds	r3, #2
 8007708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800770c:	e7c2      	b.n	8007694 <_printf_common+0x58>
 800770e:	2301      	movs	r3, #1
 8007710:	4622      	mov	r2, r4
 8007712:	4649      	mov	r1, r9
 8007714:	4638      	mov	r0, r7
 8007716:	47c0      	blx	r8
 8007718:	3001      	adds	r0, #1
 800771a:	d0e6      	beq.n	80076ea <_printf_common+0xae>
 800771c:	3601      	adds	r6, #1
 800771e:	e7d9      	b.n	80076d4 <_printf_common+0x98>

08007720 <_printf_i>:
 8007720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	7e0f      	ldrb	r7, [r1, #24]
 8007726:	4691      	mov	r9, r2
 8007728:	2f78      	cmp	r7, #120	; 0x78
 800772a:	4680      	mov	r8, r0
 800772c:	460c      	mov	r4, r1
 800772e:	469a      	mov	sl, r3
 8007730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007736:	d807      	bhi.n	8007748 <_printf_i+0x28>
 8007738:	2f62      	cmp	r7, #98	; 0x62
 800773a:	d80a      	bhi.n	8007752 <_printf_i+0x32>
 800773c:	2f00      	cmp	r7, #0
 800773e:	f000 80d5 	beq.w	80078ec <_printf_i+0x1cc>
 8007742:	2f58      	cmp	r7, #88	; 0x58
 8007744:	f000 80c1 	beq.w	80078ca <_printf_i+0x1aa>
 8007748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800774c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007750:	e03a      	b.n	80077c8 <_printf_i+0xa8>
 8007752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007756:	2b15      	cmp	r3, #21
 8007758:	d8f6      	bhi.n	8007748 <_printf_i+0x28>
 800775a:	a101      	add	r1, pc, #4	; (adr r1, 8007760 <_printf_i+0x40>)
 800775c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077cd 	.word	0x080077cd
 8007768:	08007749 	.word	0x08007749
 800776c:	08007749 	.word	0x08007749
 8007770:	08007749 	.word	0x08007749
 8007774:	08007749 	.word	0x08007749
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007749 	.word	0x08007749
 8007780:	08007749 	.word	0x08007749
 8007784:	08007749 	.word	0x08007749
 8007788:	08007749 	.word	0x08007749
 800778c:	080078d3 	.word	0x080078d3
 8007790:	080077f9 	.word	0x080077f9
 8007794:	0800788d 	.word	0x0800788d
 8007798:	08007749 	.word	0x08007749
 800779c:	08007749 	.word	0x08007749
 80077a0:	080078f5 	.word	0x080078f5
 80077a4:	08007749 	.word	0x08007749
 80077a8:	080077f9 	.word	0x080077f9
 80077ac:	08007749 	.word	0x08007749
 80077b0:	08007749 	.word	0x08007749
 80077b4:	08007895 	.word	0x08007895
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0a0      	b.n	800790e <_printf_i+0x1ee>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	0607      	lsls	r7, r0, #24
 80077d2:	f103 0104 	add.w	r1, r3, #4
 80077d6:	6029      	str	r1, [r5, #0]
 80077d8:	d501      	bpl.n	80077de <_printf_i+0xbe>
 80077da:	681e      	ldr	r6, [r3, #0]
 80077dc:	e003      	b.n	80077e6 <_printf_i+0xc6>
 80077de:	0646      	lsls	r6, r0, #25
 80077e0:	d5fb      	bpl.n	80077da <_printf_i+0xba>
 80077e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	da03      	bge.n	80077f2 <_printf_i+0xd2>
 80077ea:	232d      	movs	r3, #45	; 0x2d
 80077ec:	4276      	negs	r6, r6
 80077ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f2:	230a      	movs	r3, #10
 80077f4:	4859      	ldr	r0, [pc, #356]	; (800795c <_printf_i+0x23c>)
 80077f6:	e012      	b.n	800781e <_printf_i+0xfe>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	1d19      	adds	r1, r3, #4
 80077fe:	6029      	str	r1, [r5, #0]
 8007800:	0605      	lsls	r5, r0, #24
 8007802:	d501      	bpl.n	8007808 <_printf_i+0xe8>
 8007804:	681e      	ldr	r6, [r3, #0]
 8007806:	e002      	b.n	800780e <_printf_i+0xee>
 8007808:	0641      	lsls	r1, r0, #25
 800780a:	d5fb      	bpl.n	8007804 <_printf_i+0xe4>
 800780c:	881e      	ldrh	r6, [r3, #0]
 800780e:	2f6f      	cmp	r7, #111	; 0x6f
 8007810:	bf0c      	ite	eq
 8007812:	2308      	moveq	r3, #8
 8007814:	230a      	movne	r3, #10
 8007816:	4851      	ldr	r0, [pc, #324]	; (800795c <_printf_i+0x23c>)
 8007818:	2100      	movs	r1, #0
 800781a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800781e:	6865      	ldr	r5, [r4, #4]
 8007820:	2d00      	cmp	r5, #0
 8007822:	bfa8      	it	ge
 8007824:	6821      	ldrge	r1, [r4, #0]
 8007826:	60a5      	str	r5, [r4, #8]
 8007828:	bfa4      	itt	ge
 800782a:	f021 0104 	bicge.w	r1, r1, #4
 800782e:	6021      	strge	r1, [r4, #0]
 8007830:	b90e      	cbnz	r6, 8007836 <_printf_i+0x116>
 8007832:	2d00      	cmp	r5, #0
 8007834:	d04b      	beq.n	80078ce <_printf_i+0x1ae>
 8007836:	4615      	mov	r5, r2
 8007838:	fbb6 f1f3 	udiv	r1, r6, r3
 800783c:	fb03 6711 	mls	r7, r3, r1, r6
 8007840:	5dc7      	ldrb	r7, [r0, r7]
 8007842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007846:	4637      	mov	r7, r6
 8007848:	42bb      	cmp	r3, r7
 800784a:	460e      	mov	r6, r1
 800784c:	d9f4      	bls.n	8007838 <_printf_i+0x118>
 800784e:	2b08      	cmp	r3, #8
 8007850:	d10b      	bne.n	800786a <_printf_i+0x14a>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	07de      	lsls	r6, r3, #31
 8007856:	d508      	bpl.n	800786a <_printf_i+0x14a>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	6861      	ldr	r1, [r4, #4]
 800785c:	4299      	cmp	r1, r3
 800785e:	bfde      	ittt	le
 8007860:	2330      	movle	r3, #48	; 0x30
 8007862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800786a:	1b52      	subs	r2, r2, r5
 800786c:	6122      	str	r2, [r4, #16]
 800786e:	464b      	mov	r3, r9
 8007870:	4621      	mov	r1, r4
 8007872:	4640      	mov	r0, r8
 8007874:	f8cd a000 	str.w	sl, [sp]
 8007878:	aa03      	add	r2, sp, #12
 800787a:	f7ff fedf 	bl	800763c <_printf_common>
 800787e:	3001      	adds	r0, #1
 8007880:	d14a      	bne.n	8007918 <_printf_i+0x1f8>
 8007882:	f04f 30ff 	mov.w	r0, #4294967295
 8007886:	b004      	add	sp, #16
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	f043 0320 	orr.w	r3, r3, #32
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	2778      	movs	r7, #120	; 0x78
 8007896:	4832      	ldr	r0, [pc, #200]	; (8007960 <_printf_i+0x240>)
 8007898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	6829      	ldr	r1, [r5, #0]
 80078a0:	061f      	lsls	r7, r3, #24
 80078a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80078a6:	d402      	bmi.n	80078ae <_printf_i+0x18e>
 80078a8:	065f      	lsls	r7, r3, #25
 80078aa:	bf48      	it	mi
 80078ac:	b2b6      	uxthmi	r6, r6
 80078ae:	07df      	lsls	r7, r3, #31
 80078b0:	bf48      	it	mi
 80078b2:	f043 0320 	orrmi.w	r3, r3, #32
 80078b6:	6029      	str	r1, [r5, #0]
 80078b8:	bf48      	it	mi
 80078ba:	6023      	strmi	r3, [r4, #0]
 80078bc:	b91e      	cbnz	r6, 80078c6 <_printf_i+0x1a6>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	f023 0320 	bic.w	r3, r3, #32
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	2310      	movs	r3, #16
 80078c8:	e7a6      	b.n	8007818 <_printf_i+0xf8>
 80078ca:	4824      	ldr	r0, [pc, #144]	; (800795c <_printf_i+0x23c>)
 80078cc:	e7e4      	b.n	8007898 <_printf_i+0x178>
 80078ce:	4615      	mov	r5, r2
 80078d0:	e7bd      	b.n	800784e <_printf_i+0x12e>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	6826      	ldr	r6, [r4, #0]
 80078d6:	1d18      	adds	r0, r3, #4
 80078d8:	6961      	ldr	r1, [r4, #20]
 80078da:	6028      	str	r0, [r5, #0]
 80078dc:	0635      	lsls	r5, r6, #24
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	d501      	bpl.n	80078e6 <_printf_i+0x1c6>
 80078e2:	6019      	str	r1, [r3, #0]
 80078e4:	e002      	b.n	80078ec <_printf_i+0x1cc>
 80078e6:	0670      	lsls	r0, r6, #25
 80078e8:	d5fb      	bpl.n	80078e2 <_printf_i+0x1c2>
 80078ea:	8019      	strh	r1, [r3, #0]
 80078ec:	2300      	movs	r3, #0
 80078ee:	4615      	mov	r5, r2
 80078f0:	6123      	str	r3, [r4, #16]
 80078f2:	e7bc      	b.n	800786e <_printf_i+0x14e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	2100      	movs	r1, #0
 80078f8:	1d1a      	adds	r2, r3, #4
 80078fa:	602a      	str	r2, [r5, #0]
 80078fc:	681d      	ldr	r5, [r3, #0]
 80078fe:	6862      	ldr	r2, [r4, #4]
 8007900:	4628      	mov	r0, r5
 8007902:	f000 f859 	bl	80079b8 <memchr>
 8007906:	b108      	cbz	r0, 800790c <_printf_i+0x1ec>
 8007908:	1b40      	subs	r0, r0, r5
 800790a:	6060      	str	r0, [r4, #4]
 800790c:	6863      	ldr	r3, [r4, #4]
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	2300      	movs	r3, #0
 8007912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007916:	e7aa      	b.n	800786e <_printf_i+0x14e>
 8007918:	462a      	mov	r2, r5
 800791a:	4649      	mov	r1, r9
 800791c:	4640      	mov	r0, r8
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	47d0      	blx	sl
 8007922:	3001      	adds	r0, #1
 8007924:	d0ad      	beq.n	8007882 <_printf_i+0x162>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	079b      	lsls	r3, r3, #30
 800792a:	d413      	bmi.n	8007954 <_printf_i+0x234>
 800792c:	68e0      	ldr	r0, [r4, #12]
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	4298      	cmp	r0, r3
 8007932:	bfb8      	it	lt
 8007934:	4618      	movlt	r0, r3
 8007936:	e7a6      	b.n	8007886 <_printf_i+0x166>
 8007938:	2301      	movs	r3, #1
 800793a:	4632      	mov	r2, r6
 800793c:	4649      	mov	r1, r9
 800793e:	4640      	mov	r0, r8
 8007940:	47d0      	blx	sl
 8007942:	3001      	adds	r0, #1
 8007944:	d09d      	beq.n	8007882 <_printf_i+0x162>
 8007946:	3501      	adds	r5, #1
 8007948:	68e3      	ldr	r3, [r4, #12]
 800794a:	9903      	ldr	r1, [sp, #12]
 800794c:	1a5b      	subs	r3, r3, r1
 800794e:	42ab      	cmp	r3, r5
 8007950:	dcf2      	bgt.n	8007938 <_printf_i+0x218>
 8007952:	e7eb      	b.n	800792c <_printf_i+0x20c>
 8007954:	2500      	movs	r5, #0
 8007956:	f104 0619 	add.w	r6, r4, #25
 800795a:	e7f5      	b.n	8007948 <_printf_i+0x228>
 800795c:	08009297 	.word	0x08009297
 8007960:	080092a8 	.word	0x080092a8

08007964 <memmove>:
 8007964:	4288      	cmp	r0, r1
 8007966:	b510      	push	{r4, lr}
 8007968:	eb01 0402 	add.w	r4, r1, r2
 800796c:	d902      	bls.n	8007974 <memmove+0x10>
 800796e:	4284      	cmp	r4, r0
 8007970:	4623      	mov	r3, r4
 8007972:	d807      	bhi.n	8007984 <memmove+0x20>
 8007974:	1e43      	subs	r3, r0, #1
 8007976:	42a1      	cmp	r1, r4
 8007978:	d008      	beq.n	800798c <memmove+0x28>
 800797a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800797e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007982:	e7f8      	b.n	8007976 <memmove+0x12>
 8007984:	4601      	mov	r1, r0
 8007986:	4402      	add	r2, r0
 8007988:	428a      	cmp	r2, r1
 800798a:	d100      	bne.n	800798e <memmove+0x2a>
 800798c:	bd10      	pop	{r4, pc}
 800798e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007996:	e7f7      	b.n	8007988 <memmove+0x24>

08007998 <_sbrk_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	2300      	movs	r3, #0
 800799c:	4d05      	ldr	r5, [pc, #20]	; (80079b4 <_sbrk_r+0x1c>)
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	602b      	str	r3, [r5, #0]
 80079a4:	f7fe fc6c 	bl	8006280 <_sbrk>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_sbrk_r+0x1a>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_sbrk_r+0x1a>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	200001d0 	.word	0x200001d0

080079b8 <memchr>:
 80079b8:	4603      	mov	r3, r0
 80079ba:	b510      	push	{r4, lr}
 80079bc:	b2c9      	uxtb	r1, r1
 80079be:	4402      	add	r2, r0
 80079c0:	4293      	cmp	r3, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	d101      	bne.n	80079ca <memchr+0x12>
 80079c6:	2000      	movs	r0, #0
 80079c8:	e003      	b.n	80079d2 <memchr+0x1a>
 80079ca:	7804      	ldrb	r4, [r0, #0]
 80079cc:	3301      	adds	r3, #1
 80079ce:	428c      	cmp	r4, r1
 80079d0:	d1f6      	bne.n	80079c0 <memchr+0x8>
 80079d2:	bd10      	pop	{r4, pc}

080079d4 <memcpy>:
 80079d4:	440a      	add	r2, r1
 80079d6:	4291      	cmp	r1, r2
 80079d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079dc:	d100      	bne.n	80079e0 <memcpy+0xc>
 80079de:	4770      	bx	lr
 80079e0:	b510      	push	{r4, lr}
 80079e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e6:	4291      	cmp	r1, r2
 80079e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ec:	d1f9      	bne.n	80079e2 <memcpy+0xe>
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <_realloc_r>:
 80079f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f4:	4680      	mov	r8, r0
 80079f6:	4614      	mov	r4, r2
 80079f8:	460e      	mov	r6, r1
 80079fa:	b921      	cbnz	r1, 8007a06 <_realloc_r+0x16>
 80079fc:	4611      	mov	r1, r2
 80079fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a02:	f7ff bc37 	b.w	8007274 <_malloc_r>
 8007a06:	b92a      	cbnz	r2, 8007a14 <_realloc_r+0x24>
 8007a08:	f7ff fbcc 	bl	80071a4 <_free_r>
 8007a0c:	4625      	mov	r5, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a14:	f000 f81b 	bl	8007a4e <_malloc_usable_size_r>
 8007a18:	4284      	cmp	r4, r0
 8007a1a:	4607      	mov	r7, r0
 8007a1c:	d802      	bhi.n	8007a24 <_realloc_r+0x34>
 8007a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a22:	d812      	bhi.n	8007a4a <_realloc_r+0x5a>
 8007a24:	4621      	mov	r1, r4
 8007a26:	4640      	mov	r0, r8
 8007a28:	f7ff fc24 	bl	8007274 <_malloc_r>
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d0ed      	beq.n	8007a0e <_realloc_r+0x1e>
 8007a32:	42bc      	cmp	r4, r7
 8007a34:	4622      	mov	r2, r4
 8007a36:	4631      	mov	r1, r6
 8007a38:	bf28      	it	cs
 8007a3a:	463a      	movcs	r2, r7
 8007a3c:	f7ff ffca 	bl	80079d4 <memcpy>
 8007a40:	4631      	mov	r1, r6
 8007a42:	4640      	mov	r0, r8
 8007a44:	f7ff fbae 	bl	80071a4 <_free_r>
 8007a48:	e7e1      	b.n	8007a0e <_realloc_r+0x1e>
 8007a4a:	4635      	mov	r5, r6
 8007a4c:	e7df      	b.n	8007a0e <_realloc_r+0x1e>

08007a4e <_malloc_usable_size_r>:
 8007a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a52:	1f18      	subs	r0, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfbc      	itt	lt
 8007a58:	580b      	ldrlt	r3, [r1, r0]
 8007a5a:	18c0      	addlt	r0, r0, r3
 8007a5c:	4770      	bx	lr
	...

08007a60 <_init>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	bf00      	nop
 8007a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a66:	bc08      	pop	{r3}
 8007a68:	469e      	mov	lr, r3
 8007a6a:	4770      	bx	lr

08007a6c <_fini>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr
